
_programs/pcse_TP/out/pcse_TP.elf:     file format elf32-littlearm
_programs/pcse_TP/out/pcse_TP.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000d3d

Program Header:
0x70000001 off    0x00016458 vaddr 0x1a006458 paddr 0x1a006458 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002c64 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00006460 memsz 0x00006460 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a006460 align 2**16
         filesz 0x00000148 memsz 0x00000148 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006454  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  10000000  1a006460  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020148  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020148  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020148  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020148  2**2
                  CONTENTS
  6 .bss          00002b1c  10000148  10000148  00000148  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020148  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020148  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020148  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020148  2**2
                  CONTENTS
 11 .init_array   00000004  1a006454  1a006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a006458  1a006458  00016458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020148  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020148  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020148  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020148  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020148  2**2
                  CONTENTS
 18 .noinit       00000000  10002c64  10002c64  00020148  2**2
                  CONTENTS
 19 .debug_info   0003b246  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00007448  00000000  00000000  0005b38e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000fbd4  00000000  00000000  000627d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001290  00000000  00000000  000723aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000014b8  00000000  00000000  0007363a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00011ff3  00000000  00000000  00074af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00022018  00000000  00000000  00086ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0003187f  00000000  00000000  000a8afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000da37c  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000da3e4  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000037c4  00000000  00000000  000da418  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000148 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a006454 l    d  .init_array	00000000 .init_array
1a006458 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c64 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003e98 l     F .text	000000c8 uartProcessIRQ
10002b84 l     O .bss	00000004 rxIsrCallbackUART0
10002b88 l     O .bss	00000004 rxIsrCallbackUART0Params
10002b8c l     O .bss	00000004 rxIsrCallbackUART2
10002b90 l     O .bss	00000004 rxIsrCallbackUART2Params
10002b94 l     O .bss	00000004 rxIsrCallbackUART3
10002b98 l     O .bss	00000004 rxIsrCallbackUART3Params
10002b9c l     O .bss	00000004 txIsrCallbackUART0
10002ba0 l     O .bss	00000004 txIsrCallbackUART0Params
10002ba4 l     O .bss	00000004 txIsrCallbackUART2
10002ba8 l     O .bss	00000004 txIsrCallbackUART2Params
10002bac l     O .bss	00000004 txIsrCallbackUART3
10002bb0 l     O .bss	00000004 txIsrCallbackUART3Params
1a006288 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 uart_driver.c
00000000 l    df *ABS*	00000000 irq_button_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 userTasks.c
00000000 l    df *ABS*	00000000 system.c
10000148 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_1.c
10000150 l     O .bss	00002000 ucHeap
1000014c l     O .bss	00000004 pucAlignedHeap.11524
10002150 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a000f16 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000f28 l     F .text	0000001e prvIsQueueFull
1a000f46 l     F .text	0000001a prvIsQueueEmpty
1a000f60 l     F .text	00000076 prvCopyDataToQueue
1a000fd6 l     F .text	00000024 prvCopyDataFromQueue
1a000ffa l     F .text	0000006e prvUnlockQueue
1a0010ec l     F .text	00000022 prvInitialiseNewQueue
1a001370 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002154 l     O .bss	00000168 uxIdleTaskStack.10813
100022bc l     O .bss	000005a0 uxTimerTaskStack.10820
1000285c l     O .bss	00000060 xIdleTaskTCB.10812
100028bc l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001a68 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001a94 l     F .text	00000090 prvInitialiseNewTask
1a001b24 l     F .text	00000068 prvInitialiseTaskLists
1a001b8c l     F .text	000000ac prvAddNewTaskToReadyList
1a001c38 l     F .text	00000038 prvDeleteTCB
1a001c70 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001cbc l     F .text	00000028 prvIdleTask
1a001ce4 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002920 l     O .bss	00000004 pxDelayedTaskList
10002924 l     O .bss	00000004 pxOverflowDelayedTaskList
10002928 l     O .bss	0000008c pxReadyTasksLists
100029b4 l     O .bss	00000004 uxCurrentNumberOfTasks
100029b8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100029bc l     O .bss	00000004 uxPendedTicks
100029c0 l     O .bss	00000004 uxSchedulerSuspended
100029c4 l     O .bss	00000004 uxTaskNumber
100029c8 l     O .bss	00000004 uxTopReadyPriority
100029cc l     O .bss	00000014 xDelayedTaskList1
100029e0 l     O .bss	00000014 xDelayedTaskList2
100029f4 l     O .bss	00000004 xNextTaskUnblockTime
100029f8 l     O .bss	00000004 xNumOfOverflows
100029fc l     O .bss	00000014 xPendingReadyList
10002a10 l     O .bss	00000004 xSchedulerRunning
10002a14 l     O .bss	00000014 xSuspendedTaskList
10002a28 l     O .bss	00000014 xTasksWaitingTermination
10002a3c l     O .bss	00000004 xTickCount
10002a40 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002638 l     F .text	00000020 prvGetNextExpireTime
1a002658 l     F .text	00000048 prvInsertTimerInActiveList
1a0026a0 l     F .text	00000070 prvCheckForValidListAndQueue
1a002a54 l     F .text	00000016 prvTimerTask
1a0027e0 l     F .text	00000078 prvSwitchTimerLists
1a002858 l     F .text	0000002c prvSampleTimeNow
1a002884 l     F .text	00000060 prvProcessExpiredTimer
1a0028e4 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002958 l     F .text	000000fc prvProcessReceivedCommands
10002a44 l     O .bss	00000004 pxCurrentTimerList
10002a48 l     O .bss	00000004 pxOverflowTimerList
10002a4c l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
10002aec l     O .bss	00000014 xActiveTimerList1
10002b00 l     O .bss	00000014 xActiveTimerList2
10002b14 l     O .bss	00000004 xLastTime.11863
10002b18 l     O .bss	00000050 xStaticTimerQueue.11913
10002b68 l     O .bss	00000004 xTimerQueue
10002b6c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002a6c l     F .text	00000040 prvTaskExitError
1a002aac l     F .text	00000022 prvPortStartFirstTask
1a002ad4 l     F .text	0000000e vPortEnableVFP
1a002b40 l       .text	00000000 pxCurrentTCBConst2
1a002c20 l       .text	00000000 pxCurrentTCBConst
10002b70 l     O .bss	00000001 ucMaxSysCallPriority
10002b74 l     O .bss	00000004 ulMaxPRIGROUPValue
10000054 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002e14 l     F .text	00000044 Board_LED_Init
1a002e58 l     F .text	00000040 Board_TEC_Init
1a002e98 l     F .text	00000040 Board_GPIO_Init
1a002ed8 l     F .text	00000030 Board_ADC_Init
1a002f08 l     F .text	00000038 Board_SPI_Init
1a002f40 l     F .text	00000024 Board_I2C_Init
1a006114 l     O .text	00000008 GpioButtons
1a00611c l     O .text	0000000c GpioLeds
1a006128 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a006140 l     O .text	00000004 InitClkStates
1a006144 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0030b4 l     F .text	0000002c Chip_UART_GetIndex
1a0061b8 l     O .text	00000008 UART_BClock
1a0061c0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003250 l     F .text	00000014 Chip_ADC_GetClockIndex
1a003264 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003318 l     F .text	000000a0 pll_calc_divs
1a0033b8 l     F .text	0000010c pll_get_frac
1a0034c4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003738 l     F .text	00000022 Chip_Clock_GetDivRate
10002b7c l     O .bss	00000008 audio_usb_pll_freq
1a0061d4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a006240 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003b44 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003b58 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000058 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000090 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a0042a8 l     F .text	00000030 i2cHardwareInit
1a0042d8 l     F .text	00000040 i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00433e l     F .text	00000002 errorOcurred
1a004340 l     F .text	00000002 doNothing
100000a0 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00444c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002bb4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_lcd.c
1a004838 l     F .text	00000038 pcf8574TGpioPortWrite
1a004870 l     F .text	00000028 pcf8574TGpioWrite
1a004898 l     F .text	00000008 lcdPinSet
1a0048a0 l     F .text	0000002e lcdSendNibble
1a0048ce l     F .text	0000001c lcdEnablePulse
1a0048ec l     F .text	0000002c pcf8574TGpioPortInit
1a004918 l     F .text	00000018 pcf8574TInit
10002bb8 l     O .bss	0000000a lcd
10002bc2 l     O .bss	00000001 pcf8574TGpioPortDirections
10002bc3 l     O .bss	00000001 pcf8574TGpioPortValue
100000e0 l     O .data	00000001 pcf8574TI2cAddress
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004f58 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a00530c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
100000e8 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a006458 l       .init_array	00000000 __init_array_end
1a006454 l       .bss_RAM5	00000000 __preinit_array_end
1a006454 l       .init_array	00000000 __init_array_start
1a006454 l       .bss_RAM5	00000000 __preinit_array_start
1a00355c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000ddc g     F .text	00000012 _isatty_r
1a003b10 g     F .text	0000000e Chip_I2CM_Xfer
1a0058f4 g     F .text	000000dc _puts_r
10002bcc g     O .bss	00000018 tec_config
1a0043c4 g     F .text	00000044 TIMER2_IRQHandler
1a0040dc g     F .text	00000014 uartRxRead
1a004318 g     F .text	0000000e i2cInit
1a000dee g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002b88 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004180 g     F .text	0000001e uartReadByte
1a0058c4 g     F .text	00000030 printf
1a002ffa g     F .text	00000008 __stdio_init
10002c58 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a0047f8 g     F .text	0000003e delayRead
1a005a3a g     F .text	00000024 __sseek
1a005008 g     F .text	00000070 __sinit
1a005a88 g     F .text	000000a4 __swbuf_r
1a00057c g     F .text	0000003c enable_buttons_interrupt
1a00017a  w    F .text	00000002 HardFault_Handler
1a0018f4 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003c18 g     F .text	00000120 handleMasterXferState
1a004fac g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a00330a g     F .text	0000000c Chip_ADC_SetResolution
1a005d7c g     F .text	0000000c __malloc_unlock
1a002c24 g     F .text	0000002c SysTick_Handler
1a003134 g     F .text	00000040 Chip_UART_SetBaud
10002c59 g     O .bss	00000001 __lock___arc4random_mutex
1a000d38  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002f9c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002bc0 g     F .text	00000064 PendSV_Handler
1a00139e g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a006460 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0007b8 g     F .text	00000054 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1000291c g     O .bss	00000004 pxCurrentTCB
1a000dd2 g     F .text	0000000a _fstat_r
53ff6b52 g       *ABS*	00000000 __valid_user_code_checksum
1a006460 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a000840 g     F .text	000000fc tecla_task
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002324 g     F .text	00000018 vTaskInternalSetTimeOutState
1a00419e g     F .text	00000080 waitForReceiveStringOrTimeout
1a004408 g     F .text	00000044 TIMER3_IRQHandler
1a0037da g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
10000000 g     O .data	0000000b lcd_text_t
1a002c88 g     F .text	00000110 xPortStartScheduler
1a00518e g     F .text	0000001c memcpy
1a002230 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004fa0 g     F .text	0000000c _cleanup_r
1a002c50  w    F .text	00000038 vPortSetupTimerInterrupt
1a003dc4 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a004ad0 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c64 g       .noinit	00000000 _noinit
1a0059d0 g     F .text	00000010 puts
1000000c g     O .data	0000001e rele_code_t
1a000f00 g     F .text	00000016 vPortFree
1a004272 g     F .text	00000016 uartWriteString
10002be4 g     O .bss	00000001 tec_save
10002c50 g     O .bss	00000004 SystemCoreClock
1a0030e0 g     F .text	00000054 Chip_UART_Init
1a00167c g     F .text	000001a4 xQueueSemaphoreTake
1a000cf0 g     F .text	00000048 system_task
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002d98 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003858 g     F .text	0000004c Chip_Clock_GetRate
1a001962 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00303c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003d94 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a004b00 g     F .text	000002d0 .hidden __udivmoddi4
1a000e70 g     F .text	00000020 _sbrk_r
1a006110 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000df8 g     F .text	0000004e _read_r
1a00195c g     F .text	00000006 vListInitialiseItem
1a000668 g     F .text	00000054 GPIO1_IRQHandler
1a001520 g     F .text	0000015c xQueueReceive
10002c10 g     O .bss	00000040 xQueueRegistry
1a0049fa g     F .text	00000014 lcdCursorSet
1a0019ec g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0040ac g     F .text	00000018 uartRxReady
1a006458 g       .ARM.exidx	00000000 __exidx_start
10002c5a g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
10002c5b g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00641c g     O .text	00000004 _global_impure_ptr
10002be8 g     O .bss	00000014 uart_struct
1a005140 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000e90 g     F .text	00000070 pvPortMalloc
1a002fb8 g     F .text	00000030 Board_Init
10002bfc g     O .bss	00000004 led_queue
1a000dc6  w    F .text	00000002 _init
1a001946 g     F .text	00000016 vListInitialise
1a0004c4 g     F .text	000000b8 IRQ_handler_Init
1a000114 g       .text	00000000 __data_section_table
1a001ef8 g     F .text	0000000c xTaskGetTickCount
1a0011f0 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c64 g       .bss	00000000 _ebss
1a004344 g     F .text	00000040 TIMER0_IRQHandler
1a000d3c g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003b1e g     F .text	00000024 Chip_I2CM_XferBlocking
1a003d5c g     F .text	00000038 Chip_I2C_SetClockRate
1a0024a8 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a003510 g     F .text	0000004c Chip_Clock_EnableCrystal
10002c5c g     O .bss	00000001 __lock___malloc_recursive_mutex
1a0003f8 g     F .text	00000030 ag9_attach
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002298 g     F .text	0000008c xTaskRemoveFromEventList
1a001a30  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a000c50 g     F .text	000000a0 led_task
1a005a66 g     F .text	00000020 strcat
10002c00 g     O .bss	00000008 system_access
1a004384 g     F .text	00000040 TIMER1_IRQHandler
1a0063bc g     O .text	00000020 __sf_fake_stderr
1a003d38 g     F .text	00000024 Chip_I2C_Init
1a00518c g     F .text	00000002 __retarget_lock_release_recursive
1a004288 g     F .text	0000000a UART2_IRQHandler
1a0036cc g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0062d0 g     O .text	000000e6 gpioPinsInit
1a0005b8 g     F .text	0000005c disable_buttons_interrupt
1a003f60 g     F .text	00000090 uartInterrupt
1a001a04  w    F .text	0000002c vAssertCalled
1a004258 g     F .text	0000001a uartWriteByte
1a00261c g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003b70 g     F .text	00000012 Chip_SSP_SetClockRate
1a00533a g     F .text	00000024 __sfputs_r
1a0006bc g     F .text	00000054 GPIO2_IRQHandler
1a004fd8 g     F .text	0000000c __sfp_lock_acquire
1a005cd0 g     F .text	00000000 memchr
1a00233c g     F .text	00000084 xTaskCheckForTimeOut
1a0051bc g     F .text	0000009c _free_r
1a0037b4 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0023ec g     F .text	000000bc xTaskPriorityInherit
1a004a24 g     F .text	00000010 lcdClearAndHome
1a004a34 g     F .text	0000009c lcdInit
10000148 g       .bss	00000000 _bss
1a0032d8 g     F .text	00000032 Chip_ADC_SetSampleRate
10002b78 g     O .bss	00000004 freeRtosInterruptCallback
1a001ee8 g     F .text	00000010 vTaskSuspendAll
1a0047d8 g     F .text	00000020 delayInit
10002c08 g     O .bss	00000004 lcd_queue
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003b82 g     F .text	0000003e Chip_SSP_SetBitRate
1a0019ac g     F .text	00000026 uxListRemove
1a003b42 g     F .text	00000002 Chip_GPIO_Init
1a00613c g     O .text	00000004 OscRateIn
1a004720 g     F .text	0000005a delayInaccurateMs
1a004104 g     F .text	0000007c uartInit
1a001d7c g     F .text	00000072 xTaskCreateStatic
10002c64 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a002164 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a004968 g     F .text	00000030 lcdData
1a00110e g     F .text	00000092 xQueueGenericCreateStatic
1a002260 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000dc8 g     F .text	0000000a _close_r
1a004480 g     F .text	000001ac gpioInit
1a0019d4 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002774 g     F .text	0000006c xTimerGenericCommand
1a005b2c g     F .text	000000dc __swsetup_r
1a001a4c  w    F .text	0000001c vApplicationStackOverflowHook
1a004dd0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a005078 g     F .text	0000008c __sfp
1a004930 g     F .text	00000038 lcdCommand
1a000428 g     F .text	0000009c uart_cofig
1a004ffc g     F .text	0000000c __sinit_lock_release
1a0059e0 g     F .text	00000022 __sread
1a004698 g     F .text	0000001c USB0_IRQHandler
1a000398 g     F .text	00000030 ag9_test
1a000710 g     F .text	00000054 GPIO3_IRQHandler
1a005d70 g     F .text	0000000c __malloc_lock
1a002f88 g     F .text	00000014 Board_UARTPutChar
1a003df4 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a004ee0 g     F .text	00000078 _fflush_r
1a0063dc g     O .text	00000020 __sf_fake_stdin
1a003578 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00518a g     F .text	00000002 __retarget_lock_acquire_recursive
1a0051aa g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00080c g     F .text	00000034 main
1a005188 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001978 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002b20 g     F .text	00000024 SVC_Handler
1a005a5e g     F .text	00000008 __sclose
1a002710 g     F .text	00000064 xTimerCreateTimerTask
1a005258 g     F .text	000000b4 _malloc_r
1a0040c4 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0037e8 g     F .text	0000003c Chip_Clock_EnableOpts
1a002ff2 g     F .text	00000008 __stdio_getchar
1a001820 g     F .text	000000ac xQueueReceiveFromISR
1a0011a0 g     F .text	0000004e xQueueGenericCreate
1a003594 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00364c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003e44 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00462c g     F .text	0000006a gpioWrite
1a000dc4  w    F .text	00000002 _fini
1a0058c4 g     F .text	00000030 iprintf
1a00201c g     F .text	000000fc xTaskResumeAll
1a001e54 g     F .text	00000094 vTaskStartScheduler
1a003298 g     F .text	00000040 Chip_ADC_Init
1a000300 g     F .text	00000098 functionRX
10002c54 g     O .bss	00000004 g_pUsbApi
1a003004 g     F .text	00000038 Board_SetupMuxing
1a004998 g     F .text	00000050 lcdGoToXY
1a003174 g     F .text	000000dc Chip_UART_SetBaudFDR
1a00429c g     F .text	0000000a tickRead
1a000e46 g     F .text	00000028 _write_r
10000098 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0055b0 g     F .text	000000ea _printf_common
1a000ba8 g     F .text	000000a8 system_status
100000e4 g     O .data	00000004 _impure_ptr
1a004dd4 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00421e g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a004a0e g     F .text	00000016 lcdSendStringRaw
1a0040f0 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a003a10 g     F .text	00000100 Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a0023c0 g     F .text	0000000c vTaskMissedYield
10002c64 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003bc0 g     F .text	00000038 Chip_SSP_Init
1a0009ec g     F .text	0000003c first_init
1a003e0c g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0018cc g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001f04 g     F .text	00000118 xTaskIncrementTick
1a005c08 g     F .text	00000048 __swhatbuf_r
1a002df4 g     F .text	00000020 DAC_IRQHandler
1a004326 g     F .text	00000018 i2cWrite
1a002f64 g     F .text	00000024 Board_Debug_Init
1a002fe8 g     F .text	0000000a __stdio_putchar
1a001068 g     F .text	00000084 xQueueGenericReset
10000148 g       .data	00000000 _edata
1a003bf8 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10002c5d g     O .bss	00000001 __lock___at_quick_exit_mutex
1a001dee g     F .text	00000066 xTaskCreate
1a0003c8 g     F .text	00000030 ag9_syntax
1a0038b8 g     F .text	00000158 Chip_SetupCoreClock
1a005a02 g     F .text	00000038 __swrite
1a000614 g     F .text	00000054 GPIO0_IRQHandler
1a005360 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a005104 g     F .text	0000003c _fwalk_reent
1a0038a4 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a002118 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a004fe4 g     F .text	0000000c __sfp_lock_release
1a0049e8 g     F .text	00000012 lcdClear
1a0063fc g     O .text	00000020 __sf_fake_stdout
1a0023cc g     F .text	00000020 xTaskGetSchedulerState
1a00477a g     F .text	0000005c delayInaccurateUs
1a00255c g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a004dd0  w    F .text	00000002 .hidden __aeabi_idiv0
1a003ff0 g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
10002c5e g     O .bss	00000001 __lock___dd_hash_mutex
1a005c50 g     F .text	00000080 __smakebuf_r
10002c5f g     O .bss	00000001 __lock___tz_mutex
1a002ae8 g     F .text	0000002c pxPortInitialiseStack
1a00569c g     F .text	00000228 _printf_i
1a003824 g     F .text	00000034 Chip_Clock_Enable
1a004292 g     F .text	0000000a UART3_IRQHandler
1a00093c g     F .text	000000b0 lcd_task
10002bc8 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0046b4 g     F .text	0000006c boardInit
1a002b44 g     F .text	00000044 vPortEnterCritical
10002c0c g     O .bss	00000001 flank_capture
1a000a28 g     F .text	00000180 _task_init
10002bc4 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a005360 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1000002c g     O .data	00000028 rele_state_t
1a001388 g     F .text	00000016 xQueueCreateMutex
1a00375c g     F .text	00000058 Chip_Clock_SetBaseClock
1a003e7c g     F .text	0000001c cyclesCounterInit
1a000764 g     F .text	00000054 GPIO4_IRQHandler
10002c60 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a00146c g     F .text	000000b2 xQueueGiveFromISR
1a004ff0 g     F .text	0000000c __sinit_lock_acquire
1a0030a8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 3d 0d 00 1a 79 01 00 1a 7b 01 00 1a     ....=...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 52 6b ff 53     }...........Rk.S
	...
1a00002c:	21 2b 00 1a 85 01 00 1a 00 00 00 00 c1 2b 00 1a     !+...........+..
1a00003c:	25 2c 00 1a                                         %,..

1a000040 <g_pfnVendorVectors>:
1a000040:	f5 2d 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .-..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	99 46 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .F..............
1a000070:	45 43 00 1a 85 43 00 1a c5 43 00 1a 09 44 00 1a     EC...C...C...D..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 89 42 00 1a 93 42 00 1a     .........B...B..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	15 06 00 1a 69 06 00 1a bd 06 00 1a 11 07 00 1a     ....i...........
1a0000d0:	65 07 00 1a b9 07 00 1a bb 01 00 1a bb 01 00 1a     e...............
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a006460 	.word	0x1a006460
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000148 	.word	0x00000148
1a000120:	1a006460 	.word	0x1a006460
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a006460 	.word	0x1a006460
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a006460 	.word	0x1a006460
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a006460 	.word	0x1a006460
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000148 	.word	0x10000148
1a000154:	00002b1c 	.word	0x00002b1c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 fe6a 	bl	1a003e98 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <functionRX>:
   uartWriteString( uart, "AT+CGATT?\r\n" );
   return waitForReceiveStringOrTimeoutBlocking( uart, "OK\r\n", strlen("OK\r\n"), 1000 );
}

void functionRX( void *param )
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b082      	sub	sp, #8
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000304:	2100      	movs	r1, #0
1a000306:	9101      	str	r1, [sp, #4]

	/* Se abre seccion critica para lectura de bytes recibidos */
	xSemaphoreTakeFromISR( uart_struct.uart_mutex, &xHigherPriorityTaskWoken );
1a000308:	4c1e      	ldr	r4, [pc, #120]	; (1a000384 <functionRX+0x84>)
1a00030a:	aa01      	add	r2, sp, #4
1a00030c:	68a0      	ldr	r0, [r4, #8]
1a00030e:	f001 fa87 	bl	1a001820 <xQueueReceiveFromISR>

	char c = uartRxRead( uart_struct.uart_value );
1a000312:	7820      	ldrb	r0, [r4, #0]
1a000314:	f003 fee2 	bl	1a0040dc <uartRxRead>

	/* Verifica que hay un llamado entrante */
	if(c == uart_struct.byte_ring){
1a000318:	7c23      	ldrb	r3, [r4, #16]
1a00031a:	4283      	cmp	r3, r0
1a00031c:	d010      	beq.n	1a000340 <functionRX+0x40>
			//xQueueSendFromISR(lcd_queue, &tec_save, &xHigherPriorityTaskWoken);
			xSemaphoreGiveFromISR( system_access.sem_system, &xHigherPriorityTaskWoken);
		}
	}

	xSemaphoreGiveFromISR( uart_struct.uart_mutex, &xHigherPriorityTaskWoken);
1a00031e:	a901      	add	r1, sp, #4
1a000320:	4b18      	ldr	r3, [pc, #96]	; (1a000384 <functionRX+0x84>)
1a000322:	6898      	ldr	r0, [r3, #8]
1a000324:	f001 f8a2 	bl	1a00146c <xQueueGiveFromISR>
	/* Se cierra seccion critica para lectura de bytes recibidos */

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000328:	9b01      	ldr	r3, [sp, #4]
1a00032a:	b13b      	cbz	r3, 1a00033c <functionRX+0x3c>
1a00032c:	4b16      	ldr	r3, [pc, #88]	; (1a000388 <functionRX+0x88>)
1a00032e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000332:	601a      	str	r2, [r3, #0]
1a000334:	f3bf 8f4f 	dsb	sy
1a000338:	f3bf 8f6f 	isb	sy
}
1a00033c:	b002      	add	sp, #8
1a00033e:	bd10      	pop	{r4, pc}
		if(c == 'R')
1a000340:	2852      	cmp	r0, #82	; 0x52
1a000342:	d013      	beq.n	1a00036c <functionRX+0x6c>
		if(c == 'I')
1a000344:	2849      	cmp	r0, #73	; 0x49
1a000346:	d014      	beq.n	1a000372 <functionRX+0x72>
		if(c == 'N')
1a000348:	284e      	cmp	r0, #78	; 0x4e
1a00034a:	d016      	beq.n	1a00037a <functionRX+0x7a>
		if(c == 'G'){
1a00034c:	2847      	cmp	r0, #71	; 0x47
1a00034e:	d1e6      	bne.n	1a00031e <functionRX+0x1e>
			uart_struct.byte_ring = '\0';
1a000350:	2300      	movs	r3, #0
1a000352:	4a0c      	ldr	r2, [pc, #48]	; (1a000384 <functionRX+0x84>)
1a000354:	7413      	strb	r3, [r2, #16]
			tec_save.str_button = Tecla1;
1a000356:	4a0d      	ldr	r2, [pc, #52]	; (1a00038c <functionRX+0x8c>)
1a000358:	7013      	strb	r3, [r2, #0]
			printf( "Sistema activado\r\n" );
1a00035a:	480d      	ldr	r0, [pc, #52]	; (1a000390 <functionRX+0x90>)
1a00035c:	f005 fb38 	bl	1a0059d0 <puts>
			xSemaphoreGiveFromISR( system_access.sem_system, &xHigherPriorityTaskWoken);
1a000360:	a901      	add	r1, sp, #4
1a000362:	4b0c      	ldr	r3, [pc, #48]	; (1a000394 <functionRX+0x94>)
1a000364:	6818      	ldr	r0, [r3, #0]
1a000366:	f001 f881 	bl	1a00146c <xQueueGiveFromISR>
1a00036a:	e7d8      	b.n	1a00031e <functionRX+0x1e>
			uart_struct.byte_ring = 'I';
1a00036c:	2249      	movs	r2, #73	; 0x49
1a00036e:	7422      	strb	r2, [r4, #16]
1a000370:	e7e8      	b.n	1a000344 <functionRX+0x44>
			uart_struct.byte_ring = 'N';
1a000372:	4b04      	ldr	r3, [pc, #16]	; (1a000384 <functionRX+0x84>)
1a000374:	224e      	movs	r2, #78	; 0x4e
1a000376:	741a      	strb	r2, [r3, #16]
1a000378:	e7e6      	b.n	1a000348 <functionRX+0x48>
			uart_struct.byte_ring = 'G';
1a00037a:	4b02      	ldr	r3, [pc, #8]	; (1a000384 <functionRX+0x84>)
1a00037c:	2247      	movs	r2, #71	; 0x47
1a00037e:	741a      	strb	r2, [r3, #16]
1a000380:	e7e4      	b.n	1a00034c <functionRX+0x4c>
1a000382:	bf00      	nop
1a000384:	10002be8 	.word	0x10002be8
1a000388:	e000ed04 	.word	0xe000ed04
1a00038c:	10002be4 	.word	0x10002be4
1a000390:	1a005db0 	.word	0x1a005db0
1a000394:	10002c00 	.word	0x10002c00

1a000398 <ag9_test>:
{
1a000398:	b510      	push	{r4, lr}
1a00039a:	b082      	sub	sp, #8
   uartWriteString( uart, "AT\r\n" );
1a00039c:	b2c4      	uxtb	r4, r0
1a00039e:	4908      	ldr	r1, [pc, #32]	; (1a0003c0 <ag9_test+0x28>)
1a0003a0:	4620      	mov	r0, r4
1a0003a2:	f003 ff66 	bl	1a004272 <uartWriteString>
   return waitForReceiveStringOrTimeoutBlocking( uart, "OK\r\n", strlen("OK\r\n"), 1000 );
1a0003a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0003aa:	2300      	movs	r3, #0
1a0003ac:	e9cd 2300 	strd	r2, r3, [sp]
1a0003b0:	2204      	movs	r2, #4
1a0003b2:	4904      	ldr	r1, [pc, #16]	; (1a0003c4 <ag9_test+0x2c>)
1a0003b4:	4620      	mov	r0, r4
1a0003b6:	f003 ff32 	bl	1a00421e <waitForReceiveStringOrTimeoutBlocking>
}
1a0003ba:	b002      	add	sp, #8
1a0003bc:	bd10      	pop	{r4, pc}
1a0003be:	bf00      	nop
1a0003c0:	1a005da0 	.word	0x1a005da0
1a0003c4:	1a005da8 	.word	0x1a005da8

1a0003c8 <ag9_syntax>:
{
1a0003c8:	b510      	push	{r4, lr}
1a0003ca:	b082      	sub	sp, #8
   uartWriteString( uart, "AT+CMGF=1\r\n" );
1a0003cc:	b2c4      	uxtb	r4, r0
1a0003ce:	4908      	ldr	r1, [pc, #32]	; (1a0003f0 <ag9_syntax+0x28>)
1a0003d0:	4620      	mov	r0, r4
1a0003d2:	f003 ff4e 	bl	1a004272 <uartWriteString>
   return waitForReceiveStringOrTimeoutBlocking( uart, "OK\r\n", strlen("OK\r\n"), 1000 );
1a0003d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0003da:	2300      	movs	r3, #0
1a0003dc:	e9cd 2300 	strd	r2, r3, [sp]
1a0003e0:	2204      	movs	r2, #4
1a0003e2:	4904      	ldr	r1, [pc, #16]	; (1a0003f4 <ag9_syntax+0x2c>)
1a0003e4:	4620      	mov	r0, r4
1a0003e6:	f003 ff1a 	bl	1a00421e <waitForReceiveStringOrTimeoutBlocking>
}
1a0003ea:	b002      	add	sp, #8
1a0003ec:	bd10      	pop	{r4, pc}
1a0003ee:	bf00      	nop
1a0003f0:	1a005d94 	.word	0x1a005d94
1a0003f4:	1a005da8 	.word	0x1a005da8

1a0003f8 <ag9_attach>:
{
1a0003f8:	b510      	push	{r4, lr}
1a0003fa:	b082      	sub	sp, #8
   uartWriteString( uart, "AT+CGATT?\r\n" );
1a0003fc:	b2c4      	uxtb	r4, r0
1a0003fe:	4908      	ldr	r1, [pc, #32]	; (1a000420 <ag9_attach+0x28>)
1a000400:	4620      	mov	r0, r4
1a000402:	f003 ff36 	bl	1a004272 <uartWriteString>
   return waitForReceiveStringOrTimeoutBlocking( uart, "OK\r\n", strlen("OK\r\n"), 1000 );
1a000406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00040a:	2300      	movs	r3, #0
1a00040c:	e9cd 2300 	strd	r2, r3, [sp]
1a000410:	2204      	movs	r2, #4
1a000412:	4904      	ldr	r1, [pc, #16]	; (1a000424 <ag9_attach+0x2c>)
1a000414:	4620      	mov	r0, r4
1a000416:	f003 ff02 	bl	1a00421e <waitForReceiveStringOrTimeoutBlocking>
}
1a00041a:	b002      	add	sp, #8
1a00041c:	bd10      	pop	{r4, pc}
1a00041e:	bf00      	nop
1a000420:	1a005d88 	.word	0x1a005d88
1a000424:	1a005da8 	.word	0x1a005da8

1a000428 <uart_cofig>:
bool_t uart_cofig( uart_drive_t *uart_drive ){
1a000428:	b510      	push	{r4, lr}
1a00042a:	4604      	mov	r4, r0
	uartConfig(uart_drive->uart_value, uart_drive->baud_rate);
1a00042c:	6841      	ldr	r1, [r0, #4]
1a00042e:	7800      	ldrb	r0, [r0, #0]
1a000430:	f003 fe68 	bl	1a004104 <uartInit>
	uartCallbackSet(uart_drive->uart_value, UART_RECEIVE, functionRX, NULL);
1a000434:	2300      	movs	r3, #0
1a000436:	4a1b      	ldr	r2, [pc, #108]	; (1a0004a4 <uart_cofig+0x7c>)
1a000438:	4619      	mov	r1, r3
1a00043a:	7820      	ldrb	r0, [r4, #0]
1a00043c:	f003 fdd8 	bl	1a003ff0 <uartCallbackSet>
	uartInterrupt(uart_drive->uart_value, TRUE);
1a000440:	2101      	movs	r1, #1
1a000442:	7820      	ldrb	r0, [r4, #0]
1a000444:	f003 fd8c 	bl	1a003f60 <uartInterrupt>
	if( ag9_test( uart_drive->uart_value ) ){
1a000448:	7820      	ldrb	r0, [r4, #0]
1a00044a:	f7ff ffa5 	bl	1a000398 <ag9_test>
1a00044e:	b1c8      	cbz	r0, 1a000484 <uart_cofig+0x5c>
		printf("Modulo funciona correctamente\r\n");
1a000450:	4815      	ldr	r0, [pc, #84]	; (1a0004a8 <uart_cofig+0x80>)
1a000452:	f005 fabd 	bl	1a0059d0 <puts>
	if( ag9_syntax( uart_drive->uart_value ) ){
1a000456:	7820      	ldrb	r0, [r4, #0]
1a000458:	f7ff ffb6 	bl	1a0003c8 <ag9_syntax>
1a00045c:	b1b0      	cbz	r0, 1a00048c <uart_cofig+0x64>
		printf("Modulo texto activado correctamente\r\n");
1a00045e:	4813      	ldr	r0, [pc, #76]	; (1a0004ac <uart_cofig+0x84>)
1a000460:	f005 fab6 	bl	1a0059d0 <puts>
	if( ag9_syntax( uart_drive->uart_value ) ){
1a000464:	7820      	ldrb	r0, [r4, #0]
1a000466:	f7ff ffaf 	bl	1a0003c8 <ag9_syntax>
1a00046a:	b198      	cbz	r0, 1a000494 <uart_cofig+0x6c>
		printf("Modo texto activado correctamente\r\n");
1a00046c:	4810      	ldr	r0, [pc, #64]	; (1a0004b0 <uart_cofig+0x88>)
1a00046e:	f005 faaf 	bl	1a0059d0 <puts>
	if( ag9_attach( uart_drive->uart_value ) ){
1a000472:	7820      	ldrb	r0, [r4, #0]
1a000474:	f7ff ffc0 	bl	1a0003f8 <ag9_attach>
1a000478:	b180      	cbz	r0, 1a00049c <uart_cofig+0x74>
		printf("Modulo atachado a la red\r\n");
1a00047a:	480e      	ldr	r0, [pc, #56]	; (1a0004b4 <uart_cofig+0x8c>)
1a00047c:	f005 faa8 	bl	1a0059d0 <puts>
}
1a000480:	2001      	movs	r0, #1
1a000482:	bd10      	pop	{r4, pc}
		printf("Modulo ag9 no funciona\r\n");
1a000484:	480c      	ldr	r0, [pc, #48]	; (1a0004b8 <uart_cofig+0x90>)
1a000486:	f005 faa3 	bl	1a0059d0 <puts>
1a00048a:	e7e4      	b.n	1a000456 <uart_cofig+0x2e>
		printf("Modo texto no activado\r\n");
1a00048c:	480b      	ldr	r0, [pc, #44]	; (1a0004bc <uart_cofig+0x94>)
1a00048e:	f005 fa9f 	bl	1a0059d0 <puts>
1a000492:	e7e7      	b.n	1a000464 <uart_cofig+0x3c>
		printf("Modo texto no activado\r\n");
1a000494:	4809      	ldr	r0, [pc, #36]	; (1a0004bc <uart_cofig+0x94>)
1a000496:	f005 fa9b 	bl	1a0059d0 <puts>
1a00049a:	e7ea      	b.n	1a000472 <uart_cofig+0x4a>
		printf("Modulo af9 no esta atachado a la red\r\n");
1a00049c:	4808      	ldr	r0, [pc, #32]	; (1a0004c0 <uart_cofig+0x98>)
1a00049e:	f005 fa97 	bl	1a0059d0 <puts>
1a0004a2:	e7ed      	b.n	1a000480 <uart_cofig+0x58>
1a0004a4:	1a000301 	.word	0x1a000301
1a0004a8:	1a005dc4 	.word	0x1a005dc4
1a0004ac:	1a005dfc 	.word	0x1a005dfc
1a0004b0:	1a005e3c 	.word	0x1a005e3c
1a0004b4:	1a005e60 	.word	0x1a005e60
1a0004b8:	1a005de4 	.word	0x1a005de4
1a0004bc:	1a005e24 	.word	0x1a005e24
1a0004c0:	1a005e7c 	.word	0x1a005e7c

1a0004c4 <IRQ_handler_Init>:
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
	int32_t of = (PortSel & 3) << 3;
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a0004c4:	4a2b      	ldr	r2, [pc, #172]	; (1a000574 <IRQ_handler_Init+0xb0>)
1a0004c6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
1a0004ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0004ce:	f043 0304 	orr.w	r3, r3, #4
1a0004d2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a0004d6:	4b28      	ldr	r3, [pc, #160]	; (1a000578 <IRQ_handler_Init+0xb4>)
1a0004d8:	6819      	ldr	r1, [r3, #0]
1a0004da:	f021 0101 	bic.w	r1, r1, #1
1a0004de:	6019      	str	r1, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a0004e0:	2101      	movs	r1, #1
1a0004e2:	6159      	str	r1, [r3, #20]
1a0004e4:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a0004e8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
1a0004ec:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
1a0004f0:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a0004f4:	6819      	ldr	r1, [r3, #0]
1a0004f6:	f021 0102 	bic.w	r1, r1, #2
1a0004fa:	6019      	str	r1, [r3, #0]
	pPININT->SIENR = pins;
1a0004fc:	2102      	movs	r1, #2
1a0004fe:	6099      	str	r1, [r3, #8]
1a000500:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a000504:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
1a000508:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
1a00050c:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a000510:	6819      	ldr	r1, [r3, #0]
1a000512:	f021 0104 	bic.w	r1, r1, #4
1a000516:	6019      	str	r1, [r3, #0]
	pPININT->SIENF = pins;
1a000518:	2104      	movs	r1, #4
1a00051a:	6159      	str	r1, [r3, #20]
1a00051c:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a000520:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
1a000524:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
1a000528:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a00052c:	6819      	ldr	r1, [r3, #0]
1a00052e:	f021 0108 	bic.w	r1, r1, #8
1a000532:	6019      	str	r1, [r3, #0]
	pPININT->SIENR = pins;
1a000534:	2108      	movs	r1, #8
1a000536:	6099      	str	r1, [r3, #8]
1a000538:	f8d2 1e04 	ldr.w	r1, [r2, #3588]	; 0xe04
1a00053c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
1a000540:	f041 0109 	orr.w	r1, r1, #9
1a000544:	f8c2 1e04 	str.w	r1, [r2, #3588]	; 0xe04
	pPININT->ISEL &= ~pins;
1a000548:	6819      	ldr	r1, [r3, #0]
1a00054a:	f021 0110 	bic.w	r1, r1, #16
1a00054e:	6019      	str	r1, [r3, #0]
	pPININT->SIENF = pins;
1a000550:	2110      	movs	r1, #16
1a000552:	6159      	str	r1, [r3, #20]
1a000554:	f8d2 1e04 	ldr.w	r1, [r2, #3588]	; 0xe04
1a000558:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
1a00055c:	f441 6110 	orr.w	r1, r1, #2304	; 0x900
1a000560:	f8c2 1e04 	str.w	r1, [r2, #3588]	; 0xe04
	pPININT->ISEL &= ~pins;
1a000564:	681a      	ldr	r2, [r3, #0]
1a000566:	f022 0220 	bic.w	r2, r2, #32
1a00056a:	601a      	str	r2, [r3, #0]
	pPININT->SIENR = pins;
1a00056c:	2220      	movs	r2, #32
1a00056e:	609a      	str	r2, [r3, #8]
	Chip_SCU_GPIOIntPinSel(5, 0, 9);
	Chip_PININT_SetPinModeEdge(LPC_GPIO_PIN_INT, PININTCH5);
	Chip_PININT_EnableIntHigh(LPC_GPIO_PIN_INT, PININTCH5);


}
1a000570:	4770      	bx	lr
1a000572:	bf00      	nop
1a000574:	40086000 	.word	0x40086000
1a000578:	40087000 	.word	0x40087000

1a00057c <enable_buttons_interrupt>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00057c:	4b0d      	ldr	r3, [pc, #52]	; (1a0005b4 <enable_buttons_interrupt+0x38>)
1a00057e:	22a0      	movs	r2, #160	; 0xa0
1a000580:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000584:	2101      	movs	r1, #1
1a000586:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000588:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00058c:	2102      	movs	r1, #2
1a00058e:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000590:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000594:	2104      	movs	r1, #4
1a000596:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000598:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00059c:	2108      	movs	r1, #8
1a00059e:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0005a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0005a4:	2110      	movs	r1, #16
1a0005a6:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0005a8:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0005ac:	2220      	movs	r2, #32
1a0005ae:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority(PIN_INT4_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
	NVIC_EnableIRQ(PIN_INT4_IRQn);
	NVIC_SetPriority(PIN_INT5_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
	NVIC_EnableIRQ(PIN_INT5_IRQn);

}
1a0005b0:	4770      	bx	lr
1a0005b2:	bf00      	nop
1a0005b4:	e000e100 	.word	0xe000e100

1a0005b8 <disable_buttons_interrupt>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0005b8:	4b15      	ldr	r3, [pc, #84]	; (1a000610 <disable_buttons_interrupt+0x58>)
1a0005ba:	2201      	movs	r2, #1
1a0005bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a0005c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005c4:	f3bf 8f6f 	isb	sy
1a0005c8:	2202      	movs	r2, #2
1a0005ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a0005ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005d2:	f3bf 8f6f 	isb	sy
1a0005d6:	2204      	movs	r2, #4
1a0005d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a0005dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005e0:	f3bf 8f6f 	isb	sy
1a0005e4:	2208      	movs	r2, #8
1a0005e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a0005ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005ee:	f3bf 8f6f 	isb	sy
1a0005f2:	2210      	movs	r2, #16
1a0005f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a0005f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0005fc:	f3bf 8f6f 	isb	sy
1a000600:	2220      	movs	r2, #32
1a000602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
1a000606:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a00060a:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(PIN_INT1_IRQn);
	NVIC_DisableIRQ(PIN_INT2_IRQn);
	NVIC_DisableIRQ(PIN_INT3_IRQn);
	NVIC_DisableIRQ(PIN_INT4_IRQn);
	NVIC_DisableIRQ(PIN_INT5_IRQn);
}
1a00060e:	4770      	bx	lr
1a000610:	e000e100 	.word	0xe000e100

1a000614 <GPIO0_IRQHandler>:

//Handler de interrupciones
void GPIO0_IRQHandler(void){
1a000614:	b500      	push	{lr}
1a000616:	b083      	sub	sp, #12


	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000618:	2300      	movs	r3, #0
1a00061a:	9301      	str	r3, [sp, #4]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetFallStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->FALL;
1a00061c:	4b0f      	ldr	r3, [pc, #60]	; (1a00065c <GPIO0_IRQHandler+0x48>)
1a00061e:	6a1b      	ldr	r3, [r3, #32]

	if (Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH0){ //Verificamos que la interrupciÃ³n es la esperada
1a000620:	f013 0f01 	tst.w	r3, #1
1a000624:	d10c      	bne.n	1a000640 <GPIO0_IRQHandler+0x2c>
		//codigo a ejecutar si ocurriÃ³ la interrupciÃ³n
		button_control button_capture;
		button_capture.flank = FALLING;
		xQueueSendFromISR( tec_config[0].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000626:	9b01      	ldr	r3, [sp, #4]
1a000628:	b13b      	cbz	r3, 1a00063a <GPIO0_IRQHandler+0x26>
1a00062a:	4b0d      	ldr	r3, [pc, #52]	; (1a000660 <GPIO0_IRQHandler+0x4c>)
1a00062c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000630:	601a      	str	r2, [r3, #0]
1a000632:	f3bf 8f4f 	dsb	sy
1a000636:	f3bf 8f6f 	isb	sy
}
1a00063a:	b003      	add	sp, #12
1a00063c:	f85d fb04 	ldr.w	pc, [sp], #4
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000640:	4b06      	ldr	r3, [pc, #24]	; (1a00065c <GPIO0_IRQHandler+0x48>)
1a000642:	2201      	movs	r2, #1
1a000644:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = FALLING;
1a000646:	2302      	movs	r3, #2
1a000648:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[0].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a00064c:	2300      	movs	r3, #0
1a00064e:	aa01      	add	r2, sp, #4
1a000650:	4669      	mov	r1, sp
1a000652:	4804      	ldr	r0, [pc, #16]	; (1a000664 <GPIO0_IRQHandler+0x50>)
1a000654:	6840      	ldr	r0, [r0, #4]
1a000656:	f000 fea2 	bl	1a00139e <xQueueGenericSendFromISR>
1a00065a:	e7e4      	b.n	1a000626 <GPIO0_IRQHandler+0x12>
1a00065c:	40087000 	.word	0x40087000
1a000660:	e000ed04 	.word	0xe000ed04
1a000664:	10002bcc 	.word	0x10002bcc

1a000668 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void){
1a000668:	b500      	push	{lr}
1a00066a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a00066c:	2300      	movs	r3, #0
1a00066e:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a000670:	4b0f      	ldr	r3, [pc, #60]	; (1a0006b0 <GPIO1_IRQHandler+0x48>)
1a000672:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH1){
1a000674:	f013 0f02 	tst.w	r3, #2
1a000678:	d10c      	bne.n	1a000694 <GPIO1_IRQHandler+0x2c>
		//codigo a ejecutar si ocurriÃ³ la interrupciÃ³n
		button_control button_capture;
		button_capture.flank = RISING;
		xQueueSendFromISR( tec_config[0].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a00067a:	9b01      	ldr	r3, [sp, #4]
1a00067c:	b13b      	cbz	r3, 1a00068e <GPIO1_IRQHandler+0x26>
1a00067e:	4b0d      	ldr	r3, [pc, #52]	; (1a0006b4 <GPIO1_IRQHandler+0x4c>)
1a000680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000684:	601a      	str	r2, [r3, #0]
1a000686:	f3bf 8f4f 	dsb	sy
1a00068a:	f3bf 8f6f 	isb	sy
}
1a00068e:	b003      	add	sp, #12
1a000690:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a000694:	4b06      	ldr	r3, [pc, #24]	; (1a0006b0 <GPIO1_IRQHandler+0x48>)
1a000696:	2202      	movs	r2, #2
1a000698:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = RISING;
1a00069a:	2304      	movs	r3, #4
1a00069c:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[0].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a0006a0:	2300      	movs	r3, #0
1a0006a2:	aa01      	add	r2, sp, #4
1a0006a4:	4669      	mov	r1, sp
1a0006a6:	4804      	ldr	r0, [pc, #16]	; (1a0006b8 <GPIO1_IRQHandler+0x50>)
1a0006a8:	6840      	ldr	r0, [r0, #4]
1a0006aa:	f000 fe78 	bl	1a00139e <xQueueGenericSendFromISR>
1a0006ae:	e7e4      	b.n	1a00067a <GPIO1_IRQHandler+0x12>
1a0006b0:	40087000 	.word	0x40087000
1a0006b4:	e000ed04 	.word	0xe000ed04
1a0006b8:	10002bcc 	.word	0x10002bcc

1a0006bc <GPIO2_IRQHandler>:


void GPIO2_IRQHandler(void){
1a0006bc:	b500      	push	{lr}
1a0006be:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a0006c0:	2300      	movs	r3, #0
1a0006c2:	9301      	str	r3, [sp, #4]
	return pPININT->FALL;
1a0006c4:	4b0f      	ldr	r3, [pc, #60]	; (1a000704 <GPIO2_IRQHandler+0x48>)
1a0006c6:	6a1b      	ldr	r3, [r3, #32]


	if (Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH2){ //Verificamos que la interrupciÃ³n es la esperada
1a0006c8:	f013 0f04 	tst.w	r3, #4
1a0006cc:	d10c      	bne.n	1a0006e8 <GPIO2_IRQHandler+0x2c>
		button_control button_capture;
		button_capture.flank = FALLING;
		xQueueSendFromISR( tec_config[Tecla2].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a0006ce:	9b01      	ldr	r3, [sp, #4]
1a0006d0:	b13b      	cbz	r3, 1a0006e2 <GPIO2_IRQHandler+0x26>
1a0006d2:	4b0d      	ldr	r3, [pc, #52]	; (1a000708 <GPIO2_IRQHandler+0x4c>)
1a0006d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0006d8:	601a      	str	r2, [r3, #0]
1a0006da:	f3bf 8f4f 	dsb	sy
1a0006de:	f3bf 8f6f 	isb	sy
}
1a0006e2:	b003      	add	sp, #12
1a0006e4:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a0006e8:	4b06      	ldr	r3, [pc, #24]	; (1a000704 <GPIO2_IRQHandler+0x48>)
1a0006ea:	2204      	movs	r2, #4
1a0006ec:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = FALLING;
1a0006ee:	2302      	movs	r3, #2
1a0006f0:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[Tecla2].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a0006f4:	2300      	movs	r3, #0
1a0006f6:	446a      	add	r2, sp
1a0006f8:	4669      	mov	r1, sp
1a0006fa:	4804      	ldr	r0, [pc, #16]	; (1a00070c <GPIO2_IRQHandler+0x50>)
1a0006fc:	68c0      	ldr	r0, [r0, #12]
1a0006fe:	f000 fe4e 	bl	1a00139e <xQueueGenericSendFromISR>
1a000702:	e7e4      	b.n	1a0006ce <GPIO2_IRQHandler+0x12>
1a000704:	40087000 	.word	0x40087000
1a000708:	e000ed04 	.word	0xe000ed04
1a00070c:	10002bcc 	.word	0x10002bcc

1a000710 <GPIO3_IRQHandler>:

void GPIO3_IRQHandler(void){
1a000710:	b500      	push	{lr}
1a000712:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000714:	2300      	movs	r3, #0
1a000716:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a000718:	4b0f      	ldr	r3, [pc, #60]	; (1a000758 <GPIO3_IRQHandler+0x48>)
1a00071a:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH3){
1a00071c:	f013 0f08 	tst.w	r3, #8
1a000720:	d10c      	bne.n	1a00073c <GPIO3_IRQHandler+0x2c>
		//codigo a ejecutar si ocurriÃ³ la interrupciÃ³n
		button_control button_capture;
		button_capture.flank = RISING;
		xQueueSendFromISR( tec_config[Tecla2].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000722:	9b01      	ldr	r3, [sp, #4]
1a000724:	b13b      	cbz	r3, 1a000736 <GPIO3_IRQHandler+0x26>
1a000726:	4b0d      	ldr	r3, [pc, #52]	; (1a00075c <GPIO3_IRQHandler+0x4c>)
1a000728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00072c:	601a      	str	r2, [r3, #0]
1a00072e:	f3bf 8f4f 	dsb	sy
1a000732:	f3bf 8f6f 	isb	sy
}
1a000736:	b003      	add	sp, #12
1a000738:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a00073c:	4b06      	ldr	r3, [pc, #24]	; (1a000758 <GPIO3_IRQHandler+0x48>)
1a00073e:	2208      	movs	r2, #8
1a000740:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = RISING;
1a000742:	2304      	movs	r3, #4
1a000744:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[Tecla2].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a000748:	2300      	movs	r3, #0
1a00074a:	aa01      	add	r2, sp, #4
1a00074c:	4669      	mov	r1, sp
1a00074e:	4804      	ldr	r0, [pc, #16]	; (1a000760 <GPIO3_IRQHandler+0x50>)
1a000750:	68c0      	ldr	r0, [r0, #12]
1a000752:	f000 fe24 	bl	1a00139e <xQueueGenericSendFromISR>
1a000756:	e7e4      	b.n	1a000722 <GPIO3_IRQHandler+0x12>
1a000758:	40087000 	.word	0x40087000
1a00075c:	e000ed04 	.word	0xe000ed04
1a000760:	10002bcc 	.word	0x10002bcc

1a000764 <GPIO4_IRQHandler>:

void GPIO4_IRQHandler(void){
1a000764:	b500      	push	{lr}
1a000766:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000768:	2300      	movs	r3, #0
1a00076a:	9301      	str	r3, [sp, #4]
	return pPININT->FALL;
1a00076c:	4b0f      	ldr	r3, [pc, #60]	; (1a0007ac <GPIO4_IRQHandler+0x48>)
1a00076e:	6a1b      	ldr	r3, [r3, #32]


	if (Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH4){ //Verificamos que la interrupciÃ³n es la esperada
1a000770:	f013 0f10 	tst.w	r3, #16
1a000774:	d10c      	bne.n	1a000790 <GPIO4_IRQHandler+0x2c>
		button_control button_capture;
		button_capture.flank = FALLING;
		xQueueSendFromISR( tec_config[Tecla3].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000776:	9b01      	ldr	r3, [sp, #4]
1a000778:	b13b      	cbz	r3, 1a00078a <GPIO4_IRQHandler+0x26>
1a00077a:	4b0d      	ldr	r3, [pc, #52]	; (1a0007b0 <GPIO4_IRQHandler+0x4c>)
1a00077c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000780:	601a      	str	r2, [r3, #0]
1a000782:	f3bf 8f4f 	dsb	sy
1a000786:	f3bf 8f6f 	isb	sy
}
1a00078a:	b003      	add	sp, #12
1a00078c:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a000790:	4b06      	ldr	r3, [pc, #24]	; (1a0007ac <GPIO4_IRQHandler+0x48>)
1a000792:	2210      	movs	r2, #16
1a000794:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = FALLING;
1a000796:	2302      	movs	r3, #2
1a000798:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[Tecla3].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a00079c:	2300      	movs	r3, #0
1a00079e:	aa01      	add	r2, sp, #4
1a0007a0:	4669      	mov	r1, sp
1a0007a2:	4804      	ldr	r0, [pc, #16]	; (1a0007b4 <GPIO4_IRQHandler+0x50>)
1a0007a4:	6940      	ldr	r0, [r0, #20]
1a0007a6:	f000 fdfa 	bl	1a00139e <xQueueGenericSendFromISR>
1a0007aa:	e7e4      	b.n	1a000776 <GPIO4_IRQHandler+0x12>
1a0007ac:	40087000 	.word	0x40087000
1a0007b0:	e000ed04 	.word	0xe000ed04
1a0007b4:	10002bcc 	.word	0x10002bcc

1a0007b8 <GPIO5_IRQHandler>:

void GPIO5_IRQHandler(void){
1a0007b8:	b500      	push	{lr}
1a0007ba:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a0007bc:	2300      	movs	r3, #0
1a0007be:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a0007c0:	4b0f      	ldr	r3, [pc, #60]	; (1a000800 <GPIO5_IRQHandler+0x48>)
1a0007c2:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH5){
1a0007c4:	f013 0f20 	tst.w	r3, #32
1a0007c8:	d10c      	bne.n	1a0007e4 <GPIO5_IRQHandler+0x2c>
		//codigo a ejecutar si ocurriÃ³ la interrupciÃ³n
		button_control button_capture;
		button_capture.flank = RISING;
		xQueueSendFromISR( tec_config[Tecla3].queue_button, &button_capture, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a0007ca:	9b01      	ldr	r3, [sp, #4]
1a0007cc:	b13b      	cbz	r3, 1a0007de <GPIO5_IRQHandler+0x26>
1a0007ce:	4b0d      	ldr	r3, [pc, #52]	; (1a000804 <GPIO5_IRQHandler+0x4c>)
1a0007d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0007d4:	601a      	str	r2, [r3, #0]
1a0007d6:	f3bf 8f4f 	dsb	sy
1a0007da:	f3bf 8f6f 	isb	sy
}
1a0007de:	b003      	add	sp, #12
1a0007e0:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a0007e4:	4b06      	ldr	r3, [pc, #24]	; (1a000800 <GPIO5_IRQHandler+0x48>)
1a0007e6:	2220      	movs	r2, #32
1a0007e8:	625a      	str	r2, [r3, #36]	; 0x24
		button_capture.flank = RISING;
1a0007ea:	2304      	movs	r3, #4
1a0007ec:	f88d 3000 	strb.w	r3, [sp]
		xQueueSendFromISR( tec_config[Tecla3].queue_button, &button_capture, &xHigherPriorityTaskWoken );
1a0007f0:	2300      	movs	r3, #0
1a0007f2:	aa01      	add	r2, sp, #4
1a0007f4:	4669      	mov	r1, sp
1a0007f6:	4804      	ldr	r0, [pc, #16]	; (1a000808 <GPIO5_IRQHandler+0x50>)
1a0007f8:	6940      	ldr	r0, [r0, #20]
1a0007fa:	f000 fdd0 	bl	1a00139e <xQueueGenericSendFromISR>
1a0007fe:	e7e4      	b.n	1a0007ca <GPIO5_IRQHandler+0x12>
1a000800:	40087000 	.word	0x40087000
1a000804:	e000ed04 	.word	0xe000ed04
1a000808:	10002bcc 	.word	0x10002bcc

1a00080c <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a00080c:	b508      	push	{r3, lr}
	boardInit();
1a00080e:	f003 ff51 	bl	1a0046b4 <boardInit>

	uart_struct.uart_value = UART_232;
1a000812:	4809      	ldr	r0, [pc, #36]	; (1a000838 <main+0x2c>)
1a000814:	2305      	movs	r3, #5
1a000816:	7003      	strb	r3, [r0, #0]
	uart_struct.baud_rate = 115200;
1a000818:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
1a00081c:	6043      	str	r3, [r0, #4]
	uart_struct.byte_ring = 'R';
1a00081e:	2352      	movs	r3, #82	; 0x52
1a000820:	7403      	strb	r3, [r0, #16]

	uart_cofig( &uart_struct );
1a000822:	f7ff fe01 	bl	1a000428 <uart_cofig>

	/* Configuracion de interrupciones */
	IRQ_handler_Init();
1a000826:	f7ff fe4d 	bl	1a0004c4 <IRQ_handler_Init>

	_task_init( tec_config );
1a00082a:	4804      	ldr	r0, [pc, #16]	; (1a00083c <main+0x30>)
1a00082c:	f000 f8fc 	bl	1a000a28 <_task_init>

	vTaskStartScheduler(); // Initialize scheduler
1a000830:	f001 fb10 	bl	1a001e54 <vTaskStartScheduler>

	while( true ); // If reach heare it means that the scheduler could not start
1a000834:	e7fe      	b.n	1a000834 <main+0x28>
1a000836:	bf00      	nop
1a000838:	10002be8 	.word	0x10002be8
1a00083c:	10002bcc 	.word	0x10002bcc

1a000840 <tecla_task>:
	printf("Sistema iniciado\r\n");

}


void tecla_task(void* taskParmPt){
1a000840:	b510      	push	{r4, lr}
1a000842:	b082      	sub	sp, #8
1a000844:	4604      	mov	r4, r0

	button_str_t* tecla_select; //Me preparo para recibir la direcciÃ³n de la estructura y copiarla en una varibale local
	tecla_select = (button_str_t*) taskParmPt;
	tecla_select->state_button = UP;
1a000846:	2301      	movs	r3, #1
1a000848:	7043      	strb	r3, [r0, #1]

	read_tecla tec_saved;
	tec_saved.str_button = tecla_select->str_button;
1a00084a:	7803      	ldrb	r3, [r0, #0]
1a00084c:	f88d 3004 	strb.w	r3, [sp, #4]
1a000850:	e003      	b.n	1a00085a <tecla_task+0x1a>
			if (xQueueReceive(tecla_select->queue_button, &button_pressed, portMAX_DELAY)){

				switch (tecla_select->state_button){

				case UP:
					if(button_pressed.flank == FALLING){ //AcÃ¡ adentro estÃ¡ el pseudo estado Falling
1a000852:	f89d 3000 	ldrb.w	r3, [sp]
1a000856:	2b02      	cmp	r3, #2
1a000858:	d013      	beq.n	1a000882 <tecla_task+0x42>
		if(system_access.system_flag == TRUE){
1a00085a:	4b32      	ldr	r3, [pc, #200]	; (1a000924 <tecla_task+0xe4>)
1a00085c:	791b      	ldrb	r3, [r3, #4]
1a00085e:	2b01      	cmp	r3, #1
1a000860:	d1fb      	bne.n	1a00085a <tecla_task+0x1a>
			if (xQueueReceive(tecla_select->queue_button, &button_pressed, portMAX_DELAY)){
1a000862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000866:	4669      	mov	r1, sp
1a000868:	6860      	ldr	r0, [r4, #4]
1a00086a:	f000 fe59 	bl	1a001520 <xQueueReceive>
1a00086e:	2800      	cmp	r0, #0
1a000870:	d0f3      	beq.n	1a00085a <tecla_task+0x1a>
				switch (tecla_select->state_button){
1a000872:	7863      	ldrb	r3, [r4, #1]
1a000874:	2b01      	cmp	r3, #1
1a000876:	d0ec      	beq.n	1a000852 <tecla_task+0x12>
1a000878:	2b03      	cmp	r3, #3
1a00087a:	d01e      	beq.n	1a0008ba <tecla_task+0x7a>
						}
					}
					break;

				default:
					tecla_select->state_button = UP;
1a00087c:	2301      	movs	r3, #1
1a00087e:	7063      	strb	r3, [r4, #1]
					break;
1a000880:	e7eb      	b.n	1a00085a <tecla_task+0x1a>
						if (pdFALSE == (xQueueReceive(tecla_select->queue_button, &button_pressed, (ANTIREBOTE_MS / portTICK_RATE_MS)))){
1a000882:	2214      	movs	r2, #20
1a000884:	4669      	mov	r1, sp
1a000886:	6860      	ldr	r0, [r4, #4]
1a000888:	f000 fe4a 	bl	1a001520 <xQueueReceive>
1a00088c:	2800      	cmp	r0, #0
1a00088e:	d1e4      	bne.n	1a00085a <tecla_task+0x1a>
							tecla_select->state_button = DOWN;
1a000890:	2303      	movs	r3, #3
1a000892:	7063      	strb	r3, [r4, #1]
							if (pdTRUE == xSemaphoreTake( uart_struct.uart_mutex, portMAX_DELAY)){
1a000894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000898:	4b23      	ldr	r3, [pc, #140]	; (1a000928 <tecla_task+0xe8>)
1a00089a:	6898      	ldr	r0, [r3, #8]
1a00089c:	f000 feee 	bl	1a00167c <xQueueSemaphoreTake>
1a0008a0:	2801      	cmp	r0, #1
1a0008a2:	d1da      	bne.n	1a00085a <tecla_task+0x1a>
								printf("Se capturo una pulsacion\r\n");
1a0008a4:	4821      	ldr	r0, [pc, #132]	; (1a00092c <tecla_task+0xec>)
1a0008a6:	f005 f893 	bl	1a0059d0 <puts>
								xSemaphoreGive( uart_struct.uart_mutex );
1a0008aa:	2300      	movs	r3, #0
1a0008ac:	461a      	mov	r2, r3
1a0008ae:	4619      	mov	r1, r3
1a0008b0:	481d      	ldr	r0, [pc, #116]	; (1a000928 <tecla_task+0xe8>)
1a0008b2:	6880      	ldr	r0, [r0, #8]
1a0008b4:	f000 fc9c 	bl	1a0011f0 <xQueueGenericSend>
1a0008b8:	e7cf      	b.n	1a00085a <tecla_task+0x1a>
					if(button_pressed.flank == RISING){ //AcÃ¡ adentro estÃ¡ el pseudo estado Rising
1a0008ba:	f89d 3000 	ldrb.w	r3, [sp]
1a0008be:	2b04      	cmp	r3, #4
1a0008c0:	d1cb      	bne.n	1a00085a <tecla_task+0x1a>
						if (pdFALSE == (xQueueReceive(tecla_select->queue_button, &button_pressed, (ANTIREBOTE_MS / portTICK_RATE_MS)))){
1a0008c2:	2214      	movs	r2, #20
1a0008c4:	4669      	mov	r1, sp
1a0008c6:	6860      	ldr	r0, [r4, #4]
1a0008c8:	f000 fe2a 	bl	1a001520 <xQueueReceive>
1a0008cc:	2800      	cmp	r0, #0
1a0008ce:	d1c4      	bne.n	1a00085a <tecla_task+0x1a>
							tecla_select->state_button = UP;
1a0008d0:	2301      	movs	r3, #1
1a0008d2:	7063      	strb	r3, [r4, #1]
							if (pdTRUE == xSemaphoreTake( uart_struct.uart_mutex, portMAX_DELAY)){
1a0008d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0008d8:	4b13      	ldr	r3, [pc, #76]	; (1a000928 <tecla_task+0xe8>)
1a0008da:	6898      	ldr	r0, [r3, #8]
1a0008dc:	f000 fece 	bl	1a00167c <xQueueSemaphoreTake>
1a0008e0:	2801      	cmp	r0, #1
1a0008e2:	d010      	beq.n	1a000906 <tecla_task+0xc6>
							xQueueSend(led_queue, &tec_saved, portMAX_DELAY);
1a0008e4:	2300      	movs	r3, #0
1a0008e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0008ea:	a901      	add	r1, sp, #4
1a0008ec:	4810      	ldr	r0, [pc, #64]	; (1a000930 <tecla_task+0xf0>)
1a0008ee:	6800      	ldr	r0, [r0, #0]
1a0008f0:	f000 fc7e 	bl	1a0011f0 <xQueueGenericSend>
							xQueueSend(lcd_queue, &tec_saved, portMAX_DELAY);
1a0008f4:	2300      	movs	r3, #0
1a0008f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0008fa:	a901      	add	r1, sp, #4
1a0008fc:	480d      	ldr	r0, [pc, #52]	; (1a000934 <tecla_task+0xf4>)
1a0008fe:	6800      	ldr	r0, [r0, #0]
1a000900:	f000 fc76 	bl	1a0011f0 <xQueueGenericSend>
1a000904:	e7a9      	b.n	1a00085a <tecla_task+0x1a>
								printf("Lectura completada en la tecla %d\r\n", tec_saved.str_button+1);
1a000906:	f89d 1004 	ldrb.w	r1, [sp, #4]
1a00090a:	3101      	adds	r1, #1
1a00090c:	480a      	ldr	r0, [pc, #40]	; (1a000938 <tecla_task+0xf8>)
1a00090e:	f004 ffd9 	bl	1a0058c4 <iprintf>
								xSemaphoreGive( uart_struct.uart_mutex );
1a000912:	2300      	movs	r3, #0
1a000914:	461a      	mov	r2, r3
1a000916:	4619      	mov	r1, r3
1a000918:	4803      	ldr	r0, [pc, #12]	; (1a000928 <tecla_task+0xe8>)
1a00091a:	6880      	ldr	r0, [r0, #8]
1a00091c:	f000 fc68 	bl	1a0011f0 <xQueueGenericSend>
1a000920:	e7e0      	b.n	1a0008e4 <tecla_task+0xa4>
1a000922:	bf00      	nop
1a000924:	10002c00 	.word	0x10002c00
1a000928:	10002be8 	.word	0x10002be8
1a00092c:	1a006004 	.word	0x1a006004
1a000930:	10002bfc 	.word	0x10002bfc
1a000934:	10002c08 	.word	0x10002c08
1a000938:	1a006020 	.word	0x1a006020

1a00093c <lcd_task>:
	}

}

// Implementacion de funcion de la tarea LCD 16x2
void lcd_task( void* taskParmPtr ){
1a00093c:	b500      	push	{lr}
1a00093e:	b083      	sub	sp, #12

	i2cInit( I2C0, 100000 );
1a000940:	4923      	ldr	r1, [pc, #140]	; (1a0009d0 <lcd_task+0x94>)
1a000942:	2000      	movs	r0, #0
1a000944:	f003 fce8 	bl	1a004318 <i2cInit>

	// Inicializar LCD de 16x2 (caracteres x lineas) con cada caracter de 5x8 pixeles
	lcdInit( 16, 2, 5, 8 );
1a000948:	2308      	movs	r3, #8
1a00094a:	2205      	movs	r2, #5
1a00094c:	2102      	movs	r1, #2
1a00094e:	2010      	movs	r0, #16
1a000950:	f004 f870 	bl	1a004a34 <lcdInit>

	lcdCursorSet( LCD_CURSOR_OFF );
1a000954:	2000      	movs	r0, #0
1a000956:	f004 f850 	bl	1a0049fa <lcdCursorSet>
	lcdClear();
1a00095a:	f004 f845 	bl	1a0049e8 <lcdClear>
	gpioMap_t Led_Map[CANT_LEDS] = {LEDR,LED1,LED2,LED3};

	while (TRUE){

		//Espero evento de Lectura completada
		if (xQueueReceive(lcd_queue, &tec_save, portMAX_DELAY)){
1a00095e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000962:	491c      	ldr	r1, [pc, #112]	; (1a0009d4 <lcd_task+0x98>)
1a000964:	4b1c      	ldr	r3, [pc, #112]	; (1a0009d8 <lcd_task+0x9c>)
1a000966:	6818      	ldr	r0, [r3, #0]
1a000968:	f000 fdda 	bl	1a001520 <xQueueReceive>
1a00096c:	2800      	cmp	r0, #0
1a00096e:	d0f6      	beq.n	1a00095e <lcd_task+0x22>

			/* Seccion critica para imprimir en LCD */
			if (pdTRUE == xSemaphoreTake( uart_struct.uart_mutex, portMAX_DELAY)){
1a000970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000974:	4b19      	ldr	r3, [pc, #100]	; (1a0009dc <lcd_task+0xa0>)
1a000976:	6898      	ldr	r0, [r3, #8]
1a000978:	f000 fe80 	bl	1a00167c <xQueueSemaphoreTake>
1a00097c:	2801      	cmp	r0, #1
1a00097e:	d1ee      	bne.n	1a00095e <lcd_task+0x22>

				char lcd2[] = "acceso ";
1a000980:	4b17      	ldr	r3, [pc, #92]	; (1a0009e0 <lcd_task+0xa4>)
1a000982:	466c      	mov	r4, sp
1a000984:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000988:	e884 0003 	stmia.w	r4, {r0, r1}

				strcat(lcd2, rele_state_t[tec_save.str_button]);
1a00098c:	4b11      	ldr	r3, [pc, #68]	; (1a0009d4 <lcd_task+0x98>)
1a00098e:	781b      	ldrb	r3, [r3, #0]
1a000990:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000994:	005a      	lsls	r2, r3, #1
1a000996:	4913      	ldr	r1, [pc, #76]	; (1a0009e4 <lcd_task+0xa8>)
1a000998:	4411      	add	r1, r2
1a00099a:	4620      	mov	r0, r4
1a00099c:	f005 f863 	bl	1a005a66 <strcat>

				lcdClear();
1a0009a0:	f004 f822 	bl	1a0049e8 <lcdClear>
				lcdGoToXY( 0, 0 ); // Poner cursor en 0, 0
1a0009a4:	2100      	movs	r1, #0
1a0009a6:	4608      	mov	r0, r1
1a0009a8:	f003 fff6 	bl	1a004998 <lcdGoToXY>
				lcdSendStringRaw( lcd_text_t );
1a0009ac:	480e      	ldr	r0, [pc, #56]	; (1a0009e8 <lcd_task+0xac>)
1a0009ae:	f004 f82e 	bl	1a004a0e <lcdSendStringRaw>
				lcdGoToXY( 0, 1 );
1a0009b2:	2101      	movs	r1, #1
1a0009b4:	2000      	movs	r0, #0
1a0009b6:	f003 ffef 	bl	1a004998 <lcdGoToXY>
				lcdSendStringRaw( lcd2 );
1a0009ba:	4620      	mov	r0, r4
1a0009bc:	f004 f827 	bl	1a004a0e <lcdSendStringRaw>

				xSemaphoreGive( uart_struct.uart_mutex );
1a0009c0:	2300      	movs	r3, #0
1a0009c2:	461a      	mov	r2, r3
1a0009c4:	4619      	mov	r1, r3
1a0009c6:	4805      	ldr	r0, [pc, #20]	; (1a0009dc <lcd_task+0xa0>)
1a0009c8:	6880      	ldr	r0, [r0, #8]
1a0009ca:	f000 fc11 	bl	1a0011f0 <xQueueGenericSend>
1a0009ce:	e7c6      	b.n	1a00095e <lcd_task+0x22>
1a0009d0:	000186a0 	.word	0x000186a0
1a0009d4:	10002be4 	.word	0x10002be4
1a0009d8:	10002c08 	.word	0x10002c08
1a0009dc:	10002be8 	.word	0x10002be8
1a0009e0:	1a005fd4 	.word	0x1a005fd4
1a0009e4:	1000002c 	.word	0x1000002c
1a0009e8:	10000000 	.word	0x10000000

1a0009ec <first_init>:
void first_init(void){
1a0009ec:	b510      	push	{r4, lr}
1a0009ee:	b082      	sub	sp, #8
	_init_state.str_button = Tecla2;
1a0009f0:	2401      	movs	r4, #1
1a0009f2:	f88d 4004 	strb.w	r4, [sp, #4]
	gpioWrite(LED1, ON);
1a0009f6:	4621      	mov	r1, r4
1a0009f8:	202b      	movs	r0, #43	; 0x2b
1a0009fa:	f003 fe17 	bl	1a00462c <gpioWrite>
	gpioWrite(GPIO8, ON);
1a0009fe:	4621      	mov	r1, r4
1a000a00:	200b      	movs	r0, #11
1a000a02:	f003 fe13 	bl	1a00462c <gpioWrite>
	xQueueSend(lcd_queue, &_init_state, portMAX_DELAY);
1a000a06:	2300      	movs	r3, #0
1a000a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000a0c:	a901      	add	r1, sp, #4
1a000a0e:	4804      	ldr	r0, [pc, #16]	; (1a000a20 <first_init+0x34>)
1a000a10:	6800      	ldr	r0, [r0, #0]
1a000a12:	f000 fbed 	bl	1a0011f0 <xQueueGenericSend>
	printf("Sistema iniciado\r\n");
1a000a16:	4803      	ldr	r0, [pc, #12]	; (1a000a24 <first_init+0x38>)
1a000a18:	f004 ffda 	bl	1a0059d0 <puts>
}
1a000a1c:	b002      	add	sp, #8
1a000a1e:	bd10      	pop	{r4, pc}
1a000a20:	10002c08 	.word	0x10002c08
1a000a24:	1a005fc0 	.word	0x1a005fc0

1a000a28 <_task_init>:
void _task_init( button_str_t * tec_str_config ){
1a000a28:	b570      	push	{r4, r5, r6, lr}
1a000a2a:	b082      	sub	sp, #8
1a000a2c:	4606      	mov	r6, r0
	gpioInit(GPIO8, GPIO_OUTPUT);
1a000a2e:	2101      	movs	r1, #1
1a000a30:	200b      	movs	r0, #11
1a000a32:	f003 fd25 	bl	1a004480 <gpioInit>
	for (i = CANT_TECLAS ; i-- ; i >= 0) {
1a000a36:	2203      	movs	r2, #3
1a000a38:	e000      	b.n	1a000a3c <_task_init+0x14>
void _task_init( button_str_t * tec_str_config ){
1a000a3a:	4622      	mov	r2, r4
	for (i = CANT_TECLAS ; i-- ; i >= 0) {
1a000a3c:	1e53      	subs	r3, r2, #1
1a000a3e:	b2db      	uxtb	r3, r3
1a000a40:	b25c      	sxtb	r4, r3
1a000a42:	b17a      	cbz	r2, 1a000a64 <_task_init+0x3c>
		tec_str_config[i].str_button = i;
1a000a44:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
1a000a48:	f806 3034 	strb.w	r3, [r6, r4, lsl #3]
		if (NULL == (tec_str_config[i].queue_button = xQueueCreate(5,sizeof(tec_str_config)))){
1a000a4c:	2200      	movs	r2, #0
1a000a4e:	2104      	movs	r1, #4
1a000a50:	2005      	movs	r0, #5
1a000a52:	f000 fba5 	bl	1a0011a0 <xQueueGenericCreate>
1a000a56:	6068      	str	r0, [r5, #4]
1a000a58:	2800      	cmp	r0, #0
1a000a5a:	d1ee      	bne.n	1a000a3a <_task_init+0x12>
			printf("No se crearon queue para teclas\r\n");
1a000a5c:	483d      	ldr	r0, [pc, #244]	; (1a000b54 <_task_init+0x12c>)
1a000a5e:	f004 ffb7 	bl	1a0059d0 <puts>
1a000a62:	e7ea      	b.n	1a000a3a <_task_init+0x12>
	for(uint8_t i = 0; i < CANT_TECLAS; i++){
1a000a64:	2400      	movs	r4, #0
1a000a66:	e005      	b.n	1a000a74 <_task_init+0x4c>
			printf("Tarea TEC%d  creada\r\n", i+1);
1a000a68:	1c61      	adds	r1, r4, #1
1a000a6a:	483b      	ldr	r0, [pc, #236]	; (1a000b58 <_task_init+0x130>)
1a000a6c:	f004 ff2a 	bl	1a0058c4 <iprintf>
	for(uint8_t i = 0; i < CANT_TECLAS; i++){
1a000a70:	3401      	adds	r4, #1
1a000a72:	b2e4      	uxtb	r4, r4
1a000a74:	2c02      	cmp	r4, #2
1a000a76:	d80d      	bhi.n	1a000a94 <_task_init+0x6c>
		xErrorHandler = xTaskCreate(tecla_task,
1a000a78:	2300      	movs	r3, #0
1a000a7a:	9301      	str	r3, [sp, #4]
1a000a7c:	2301      	movs	r3, #1
1a000a7e:	9300      	str	r3, [sp, #0]
1a000a80:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
1a000a84:	22b4      	movs	r2, #180	; 0xb4
1a000a86:	4935      	ldr	r1, [pc, #212]	; (1a000b5c <_task_init+0x134>)
1a000a88:	4835      	ldr	r0, [pc, #212]	; (1a000b60 <_task_init+0x138>)
1a000a8a:	f001 f9b0 	bl	1a001dee <xTaskCreate>
		if(xErrorHandler == pdPASS){
1a000a8e:	2801      	cmp	r0, #1
1a000a90:	d1ee      	bne.n	1a000a70 <_task_init+0x48>
1a000a92:	e7e9      	b.n	1a000a68 <_task_init+0x40>
	xErrorHandler = xTaskCreate(led_task,
1a000a94:	2300      	movs	r3, #0
1a000a96:	9301      	str	r3, [sp, #4]
1a000a98:	2201      	movs	r2, #1
1a000a9a:	9200      	str	r2, [sp, #0]
1a000a9c:	22b4      	movs	r2, #180	; 0xb4
1a000a9e:	4931      	ldr	r1, [pc, #196]	; (1a000b64 <_task_init+0x13c>)
1a000aa0:	4831      	ldr	r0, [pc, #196]	; (1a000b68 <_task_init+0x140>)
1a000aa2:	f001 f9a4 	bl	1a001dee <xTaskCreate>
	if(xErrorHandler == pdPASS){
1a000aa6:	2801      	cmp	r0, #1
1a000aa8:	d037      	beq.n	1a000b1a <_task_init+0xf2>
	xErrorHandler = xTaskCreate(system_task,
1a000aaa:	2300      	movs	r3, #0
1a000aac:	9301      	str	r3, [sp, #4]
1a000aae:	2201      	movs	r2, #1
1a000ab0:	9200      	str	r2, [sp, #0]
1a000ab2:	22b4      	movs	r2, #180	; 0xb4
1a000ab4:	492d      	ldr	r1, [pc, #180]	; (1a000b6c <_task_init+0x144>)
1a000ab6:	482e      	ldr	r0, [pc, #184]	; (1a000b70 <_task_init+0x148>)
1a000ab8:	f001 f999 	bl	1a001dee <xTaskCreate>
	if(xErrorHandler == pdPASS){
1a000abc:	2801      	cmp	r0, #1
1a000abe:	d030      	beq.n	1a000b22 <_task_init+0xfa>
	xErrorHandler = xTaskCreate(lcd_task,
1a000ac0:	2300      	movs	r3, #0
1a000ac2:	9301      	str	r3, [sp, #4]
1a000ac4:	2201      	movs	r2, #1
1a000ac6:	9200      	str	r2, [sp, #0]
1a000ac8:	22b4      	movs	r2, #180	; 0xb4
1a000aca:	492a      	ldr	r1, [pc, #168]	; (1a000b74 <_task_init+0x14c>)
1a000acc:	482a      	ldr	r0, [pc, #168]	; (1a000b78 <_task_init+0x150>)
1a000ace:	f001 f98e 	bl	1a001dee <xTaskCreate>
	if(xErrorHandler == pdPASS){
1a000ad2:	2801      	cmp	r0, #1
1a000ad4:	d029      	beq.n	1a000b2a <_task_init+0x102>
	if (NULL == (lcd_queue = xQueueCreate(3,sizeof(read_tecla)))){
1a000ad6:	2200      	movs	r2, #0
1a000ad8:	2101      	movs	r1, #1
1a000ada:	2003      	movs	r0, #3
1a000adc:	f000 fb60 	bl	1a0011a0 <xQueueGenericCreate>
1a000ae0:	4b26      	ldr	r3, [pc, #152]	; (1a000b7c <_task_init+0x154>)
1a000ae2:	6018      	str	r0, [r3, #0]
1a000ae4:	b328      	cbz	r0, 1a000b32 <_task_init+0x10a>
	if (NULL == (led_queue = xQueueCreate(3,sizeof(read_tecla)))){
1a000ae6:	2200      	movs	r2, #0
1a000ae8:	2101      	movs	r1, #1
1a000aea:	2003      	movs	r0, #3
1a000aec:	f000 fb58 	bl	1a0011a0 <xQueueGenericCreate>
1a000af0:	4b23      	ldr	r3, [pc, #140]	; (1a000b80 <_task_init+0x158>)
1a000af2:	6018      	str	r0, [r3, #0]
1a000af4:	b308      	cbz	r0, 1a000b3a <_task_init+0x112>
	if (NULL == (system_access.sem_system = xSemaphoreCreateBinary())){
1a000af6:	2203      	movs	r2, #3
1a000af8:	2100      	movs	r1, #0
1a000afa:	2001      	movs	r0, #1
1a000afc:	f000 fb50 	bl	1a0011a0 <xQueueGenericCreate>
1a000b00:	4b20      	ldr	r3, [pc, #128]	; (1a000b84 <_task_init+0x15c>)
1a000b02:	6018      	str	r0, [r3, #0]
1a000b04:	b1e8      	cbz	r0, 1a000b42 <_task_init+0x11a>
	if (NULL == (uart_struct.uart_mutex = xSemaphoreCreateMutex())){
1a000b06:	2001      	movs	r0, #1
1a000b08:	f000 fc3e 	bl	1a001388 <xQueueCreateMutex>
1a000b0c:	4b1e      	ldr	r3, [pc, #120]	; (1a000b88 <_task_init+0x160>)
1a000b0e:	6098      	str	r0, [r3, #8]
1a000b10:	b1d8      	cbz	r0, 1a000b4a <_task_init+0x122>
	first_init();
1a000b12:	f7ff ff6b 	bl	1a0009ec <first_init>
}
1a000b16:	b002      	add	sp, #8
1a000b18:	bd70      	pop	{r4, r5, r6, pc}
		printf("Tarea led creada\r\n");
1a000b1a:	481c      	ldr	r0, [pc, #112]	; (1a000b8c <_task_init+0x164>)
1a000b1c:	f004 ff58 	bl	1a0059d0 <puts>
1a000b20:	e7c3      	b.n	1a000aaa <_task_init+0x82>
		printf("Tarea system creada\r\n");
1a000b22:	481b      	ldr	r0, [pc, #108]	; (1a000b90 <_task_init+0x168>)
1a000b24:	f004 ff54 	bl	1a0059d0 <puts>
1a000b28:	e7ca      	b.n	1a000ac0 <_task_init+0x98>
		printf("Tarea lcd creada\r\n");
1a000b2a:	481a      	ldr	r0, [pc, #104]	; (1a000b94 <_task_init+0x16c>)
1a000b2c:	f004 ff50 	bl	1a0059d0 <puts>
1a000b30:	e7d1      	b.n	1a000ad6 <_task_init+0xae>
		printf("Error al crear queue LCD\r\n");
1a000b32:	4819      	ldr	r0, [pc, #100]	; (1a000b98 <_task_init+0x170>)
1a000b34:	f004 ff4c 	bl	1a0059d0 <puts>
1a000b38:	e7d5      	b.n	1a000ae6 <_task_init+0xbe>
		printf("Error al crear queue led\r\n");
1a000b3a:	4818      	ldr	r0, [pc, #96]	; (1a000b9c <_task_init+0x174>)
1a000b3c:	f004 ff48 	bl	1a0059d0 <puts>
1a000b40:	e7d9      	b.n	1a000af6 <_task_init+0xce>
		printf("Error al crear semaforo led\r\n");
1a000b42:	4817      	ldr	r0, [pc, #92]	; (1a000ba0 <_task_init+0x178>)
1a000b44:	f004 ff44 	bl	1a0059d0 <puts>
1a000b48:	e7dd      	b.n	1a000b06 <_task_init+0xde>
		printf("Error al crear mutex\r\n");
1a000b4a:	4816      	ldr	r0, [pc, #88]	; (1a000ba4 <_task_init+0x17c>)
1a000b4c:	f004 ff40 	bl	1a0059d0 <puts>
1a000b50:	e7df      	b.n	1a000b12 <_task_init+0xea>
1a000b52:	bf00      	nop
1a000b54:	1a005ea4 	.word	0x1a005ea4
1a000b58:	1a005ed4 	.word	0x1a005ed4
1a000b5c:	1a005ec8 	.word	0x1a005ec8
1a000b60:	1a000841 	.word	0x1a000841
1a000b64:	1a005eec 	.word	0x1a005eec
1a000b68:	1a000c51 	.word	0x1a000c51
1a000b6c:	1a005f0c 	.word	0x1a005f0c
1a000b70:	1a000cf1 	.word	0x1a000cf1
1a000b74:	1a005f30 	.word	0x1a005f30
1a000b78:	1a00093d 	.word	0x1a00093d
1a000b7c:	10002c08 	.word	0x10002c08
1a000b80:	10002bfc 	.word	0x10002bfc
1a000b84:	10002c00 	.word	0x10002c00
1a000b88:	10002be8 	.word	0x10002be8
1a000b8c:	1a005ef8 	.word	0x1a005ef8
1a000b90:	1a005f18 	.word	0x1a005f18
1a000b94:	1a005f3c 	.word	0x1a005f3c
1a000b98:	1a005f50 	.word	0x1a005f50
1a000b9c:	1a005f6c 	.word	0x1a005f6c
1a000ba0:	1a005f88 	.word	0x1a005f88
1a000ba4:	1a005fa8 	.word	0x1a005fa8

1a000ba8 <system_status>:
			/* Fin seccion critica para imprimir en LCD */
		}
	}
}

void system_status(system_control_t *system_access){
1a000ba8:	b510      	push	{r4, lr}
1a000baa:	4604      	mov	r4, r0

	switch(system_access->system_status){
1a000bac:	7943      	ldrb	r3, [r0, #5]
1a000bae:	2b03      	cmp	r3, #3
1a000bb0:	d809      	bhi.n	1a000bc6 <system_status+0x1e>
1a000bb2:	e8df f003 	tbb	[pc, r3]
1a000bb6:	0902      	.short	0x0902
1a000bb8:	2e16      	.short	0x2e16
	case ACTIVATED:
		gpioWrite(LED3, ON);
1a000bba:	2101      	movs	r1, #1
1a000bbc:	202d      	movs	r0, #45	; 0x2d
1a000bbe:	f003 fd35 	bl	1a00462c <gpioWrite>
		/* Habilita interrupciones de teclas */
		enable_buttons_interrupt();
1a000bc2:	f7ff fcdb 	bl	1a00057c <enable_buttons_interrupt>
		disable_buttons_interrupt();
		break;
	default:
		break;
	}
}
1a000bc6:	bd10      	pop	{r4, pc}
		gpioWrite(LEDB, ON);
1a000bc8:	2101      	movs	r1, #1
1a000bca:	202a      	movs	r0, #42	; 0x2a
1a000bcc:	f003 fd2e 	bl	1a00462c <gpioWrite>
		gpioWrite(LED1, OFF);
1a000bd0:	2100      	movs	r1, #0
1a000bd2:	202b      	movs	r0, #43	; 0x2b
1a000bd4:	f003 fd2a 	bl	1a00462c <gpioWrite>
		gpioWrite(GPIO8, OFF);
1a000bd8:	2100      	movs	r1, #0
1a000bda:	200b      	movs	r0, #11
1a000bdc:	f003 fd26 	bl	1a00462c <gpioWrite>
		break;
1a000be0:	e7f1      	b.n	1a000bc6 <system_status+0x1e>
		gpioWrite(LEDB, OFF);
1a000be2:	2100      	movs	r1, #0
1a000be4:	202a      	movs	r0, #42	; 0x2a
1a000be6:	f003 fd21 	bl	1a00462c <gpioWrite>
		gpioWrite(LED1, ON);
1a000bea:	2101      	movs	r1, #1
1a000bec:	202b      	movs	r0, #43	; 0x2b
1a000bee:	f003 fd1d 	bl	1a00462c <gpioWrite>
		gpioWrite(LED3, OFF);
1a000bf2:	2100      	movs	r1, #0
1a000bf4:	202d      	movs	r0, #45	; 0x2d
1a000bf6:	f003 fd19 	bl	1a00462c <gpioWrite>
		gpioWrite(GPIO8, ON);
1a000bfa:	2101      	movs	r1, #1
1a000bfc:	200b      	movs	r0, #11
1a000bfe:	f003 fd15 	bl	1a00462c <gpioWrite>
		system_access->system_flag = FALSE;
1a000c02:	2300      	movs	r3, #0
1a000c04:	7123      	strb	r3, [r4, #4]
		uart_struct.byte_ring = 'R';
1a000c06:	4b11      	ldr	r3, [pc, #68]	; (1a000c4c <system_status+0xa4>)
1a000c08:	2252      	movs	r2, #82	; 0x52
1a000c0a:	741a      	strb	r2, [r3, #16]
		disable_buttons_interrupt();
1a000c0c:	f7ff fcd4 	bl	1a0005b8 <disable_buttons_interrupt>
		break;
1a000c10:	e7d9      	b.n	1a000bc6 <system_status+0x1e>
		gpioWrite(LED1, OFF);
1a000c12:	2100      	movs	r1, #0
1a000c14:	202b      	movs	r0, #43	; 0x2b
1a000c16:	f003 fd09 	bl	1a00462c <gpioWrite>
		gpioWrite(LEDB, OFF);
1a000c1a:	2100      	movs	r1, #0
1a000c1c:	202a      	movs	r0, #42	; 0x2a
1a000c1e:	f003 fd05 	bl	1a00462c <gpioWrite>
		gpioWrite(LED2, ON);
1a000c22:	2101      	movs	r1, #1
1a000c24:	202c      	movs	r0, #44	; 0x2c
1a000c26:	f003 fd01 	bl	1a00462c <gpioWrite>
		gpioWrite(LED3, OFF);
1a000c2a:	2100      	movs	r1, #0
1a000c2c:	202d      	movs	r0, #45	; 0x2d
1a000c2e:	f003 fcfd 	bl	1a00462c <gpioWrite>
		gpioWrite(GPIO8, ON);
1a000c32:	2101      	movs	r1, #1
1a000c34:	200b      	movs	r0, #11
1a000c36:	f003 fcf9 	bl	1a00462c <gpioWrite>
		system_access->system_flag = FALSE;
1a000c3a:	2300      	movs	r3, #0
1a000c3c:	7123      	strb	r3, [r4, #4]
		uart_struct.byte_ring = 'R';
1a000c3e:	4b03      	ldr	r3, [pc, #12]	; (1a000c4c <system_status+0xa4>)
1a000c40:	2252      	movs	r2, #82	; 0x52
1a000c42:	741a      	strb	r2, [r3, #16]
		disable_buttons_interrupt();
1a000c44:	f7ff fcb8 	bl	1a0005b8 <disable_buttons_interrupt>
}
1a000c48:	e7bd      	b.n	1a000bc6 <system_status+0x1e>
1a000c4a:	bf00      	nop
1a000c4c:	10002be8 	.word	0x10002be8

1a000c50 <led_task>:
void led_task(void* taskParmPt){
1a000c50:	b500      	push	{lr}
1a000c52:	b083      	sub	sp, #12
1a000c54:	e019      	b.n	1a000c8a <led_task+0x3a>
				printf("El codigo de acceso es %s. Sistema %s\r\n", rele_code_t[read_led.str_button], rele_state_t[read_led.str_button]);
1a000c56:	f89d 2004 	ldrb.w	r2, [sp, #4]
1a000c5a:	0093      	lsls	r3, r2, #2
1a000c5c:	1898      	adds	r0, r3, r2
1a000c5e:	0041      	lsls	r1, r0, #1
1a000c60:	460a      	mov	r2, r1
1a000c62:	4b1d      	ldr	r3, [pc, #116]	; (1a000cd8 <led_task+0x88>)
1a000c64:	441a      	add	r2, r3
1a000c66:	4b1d      	ldr	r3, [pc, #116]	; (1a000cdc <led_task+0x8c>)
1a000c68:	4419      	add	r1, r3
1a000c6a:	481d      	ldr	r0, [pc, #116]	; (1a000ce0 <led_task+0x90>)
1a000c6c:	f004 fe2a 	bl	1a0058c4 <iprintf>
				xSemaphoreGive( uart_struct.uart_mutex );
1a000c70:	2300      	movs	r3, #0
1a000c72:	461a      	mov	r2, r3
1a000c74:	4619      	mov	r1, r3
1a000c76:	481b      	ldr	r0, [pc, #108]	; (1a000ce4 <led_task+0x94>)
1a000c78:	6880      	ldr	r0, [r0, #8]
1a000c7a:	f000 fab9 	bl	1a0011f0 <xQueueGenericSend>
1a000c7e:	e015      	b.n	1a000cac <led_task+0x5c>
				system_access.system_status = OPEN;
1a000c80:	4819      	ldr	r0, [pc, #100]	; (1a000ce8 <led_task+0x98>)
1a000c82:	2301      	movs	r3, #1
1a000c84:	7143      	strb	r3, [r0, #5]
				system_status(&system_access);
1a000c86:	f7ff ff8f 	bl	1a000ba8 <system_status>
		if (xQueueReceive(led_queue, &read_led, portMAX_DELAY)){
1a000c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c8e:	a901      	add	r1, sp, #4
1a000c90:	4b16      	ldr	r3, [pc, #88]	; (1a000cec <led_task+0x9c>)
1a000c92:	6818      	ldr	r0, [r3, #0]
1a000c94:	f000 fc44 	bl	1a001520 <xQueueReceive>
1a000c98:	2800      	cmp	r0, #0
1a000c9a:	d0f6      	beq.n	1a000c8a <led_task+0x3a>
			if (pdTRUE == xSemaphoreTake( uart_struct.uart_mutex , portMAX_DELAY)){
1a000c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000ca0:	4b10      	ldr	r3, [pc, #64]	; (1a000ce4 <led_task+0x94>)
1a000ca2:	6898      	ldr	r0, [r3, #8]
1a000ca4:	f000 fcea 	bl	1a00167c <xQueueSemaphoreTake>
1a000ca8:	2801      	cmp	r0, #1
1a000caa:	d0d4      	beq.n	1a000c56 <led_task+0x6>
			switch(read_led.str_button){
1a000cac:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a000cb0:	2b01      	cmp	r3, #1
1a000cb2:	d00a      	beq.n	1a000cca <led_task+0x7a>
1a000cb4:	b25a      	sxtb	r2, r3
1a000cb6:	2a00      	cmp	r2, #0
1a000cb8:	d0e2      	beq.n	1a000c80 <led_task+0x30>
1a000cba:	2b02      	cmp	r3, #2
1a000cbc:	d1e5      	bne.n	1a000c8a <led_task+0x3a>
				system_access.system_status = WRONG;
1a000cbe:	480a      	ldr	r0, [pc, #40]	; (1a000ce8 <led_task+0x98>)
1a000cc0:	2303      	movs	r3, #3
1a000cc2:	7143      	strb	r3, [r0, #5]
				system_status(&system_access);
1a000cc4:	f7ff ff70 	bl	1a000ba8 <system_status>
				break;
1a000cc8:	e7df      	b.n	1a000c8a <led_task+0x3a>
				system_access.system_status = CLOSED;
1a000cca:	4807      	ldr	r0, [pc, #28]	; (1a000ce8 <led_task+0x98>)
1a000ccc:	2302      	movs	r3, #2
1a000cce:	7143      	strb	r3, [r0, #5]
				system_status(&system_access);
1a000cd0:	f7ff ff6a 	bl	1a000ba8 <system_status>
				break;
1a000cd4:	e7d9      	b.n	1a000c8a <led_task+0x3a>
1a000cd6:	bf00      	nop
1a000cd8:	1000002c 	.word	0x1000002c
1a000cdc:	1000000c 	.word	0x1000000c
1a000ce0:	1a005fdc 	.word	0x1a005fdc
1a000ce4:	10002be8 	.word	0x10002be8
1a000ce8:	10002c00 	.word	0x10002c00
1a000cec:	10002bfc 	.word	0x10002bfc

1a000cf0 <system_task>:
void system_task(void* taskParmPt){
1a000cf0:	b500      	push	{lr}
1a000cf2:	b083      	sub	sp, #12
		xSemaphoreTake( system_access.sem_system, portMAX_DELAY );
1a000cf4:	4c0e      	ldr	r4, [pc, #56]	; (1a000d30 <system_task+0x40>)
1a000cf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000cfa:	6820      	ldr	r0, [r4, #0]
1a000cfc:	f000 fcbe 	bl	1a00167c <xQueueSemaphoreTake>
		tec_init.str_button = 3;
1a000d00:	2303      	movs	r3, #3
1a000d02:	f88d 3004 	strb.w	r3, [sp, #4]
		xQueueSend(lcd_queue, &tec_init, portMAX_DELAY);
1a000d06:	2300      	movs	r3, #0
1a000d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000d0c:	a901      	add	r1, sp, #4
1a000d0e:	4809      	ldr	r0, [pc, #36]	; (1a000d34 <system_task+0x44>)
1a000d10:	6800      	ldr	r0, [r0, #0]
1a000d12:	f000 fa6d 	bl	1a0011f0 <xQueueGenericSend>
		system_access.system_flag = TRUE;
1a000d16:	2301      	movs	r3, #1
1a000d18:	7123      	strb	r3, [r4, #4]
		system_access.system_status = ACTIVATED;
1a000d1a:	2300      	movs	r3, #0
1a000d1c:	7163      	strb	r3, [r4, #5]
		system_status(&system_access);
1a000d1e:	4620      	mov	r0, r4
1a000d20:	f7ff ff42 	bl	1a000ba8 <system_status>
		vTaskDelay(1000/portTICK_RATE_MS);
1a000d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000d28:	f001 f9f6 	bl	1a002118 <vTaskDelay>
1a000d2c:	e7e2      	b.n	1a000cf4 <system_task+0x4>
1a000d2e:	bf00      	nop
1a000d30:	10002c00 	.word	0x10002c00
1a000d34:	10002c08 	.word	0x10002c08

1a000d38 <initialise_monitor_handles>:
}
1a000d38:	4770      	bx	lr
1a000d3a:	Address 0x000000001a000d3a is out of bounds.


1a000d3c <Reset_Handler>:
void Reset_Handler(void) {
1a000d3c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000d3e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000d40:	4b19      	ldr	r3, [pc, #100]	; (1a000da8 <Reset_Handler+0x6c>)
1a000d42:	4a1a      	ldr	r2, [pc, #104]	; (1a000dac <Reset_Handler+0x70>)
1a000d44:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000d46:	3304      	adds	r3, #4
1a000d48:	4a19      	ldr	r2, [pc, #100]	; (1a000db0 <Reset_Handler+0x74>)
1a000d4a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000d4c:	2300      	movs	r3, #0
1a000d4e:	e005      	b.n	1a000d5c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000d50:	4a18      	ldr	r2, [pc, #96]	; (1a000db4 <Reset_Handler+0x78>)
1a000d52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000d56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000d5a:	3301      	adds	r3, #1
1a000d5c:	2b07      	cmp	r3, #7
1a000d5e:	d9f7      	bls.n	1a000d50 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000d60:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000d62:	4b15      	ldr	r3, [pc, #84]	; (1a000db8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000d64:	e007      	b.n	1a000d76 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000d66:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000d6a:	689a      	ldr	r2, [r3, #8]
1a000d6c:	6859      	ldr	r1, [r3, #4]
1a000d6e:	6818      	ldr	r0, [r3, #0]
1a000d70:	f7ff fa0b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000d74:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000d76:	4a11      	ldr	r2, [pc, #68]	; (1a000dbc <Reset_Handler+0x80>)
1a000d78:	4293      	cmp	r3, r2
1a000d7a:	d3f4      	bcc.n	1a000d66 <Reset_Handler+0x2a>
1a000d7c:	e006      	b.n	1a000d8c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000d7e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000d80:	6859      	ldr	r1, [r3, #4]
1a000d82:	f854 0b08 	ldr.w	r0, [r4], #8
1a000d86:	f7ff fa0f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000d8a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000d8c:	4a0c      	ldr	r2, [pc, #48]	; (1a000dc0 <Reset_Handler+0x84>)
1a000d8e:	4293      	cmp	r3, r2
1a000d90:	d3f5      	bcc.n	1a000d7e <Reset_Handler+0x42>
    SystemInit();
1a000d92:	f003 f857 	bl	1a003e44 <SystemInit>
    __libc_init_array();
1a000d96:	f004 f9d3 	bl	1a005140 <__libc_init_array>
    initialise_monitor_handles();
1a000d9a:	f7ff ffcd 	bl	1a000d38 <initialise_monitor_handles>
    main();
1a000d9e:	f7ff fd35 	bl	1a00080c <main>
        __asm__ volatile("wfi");
1a000da2:	bf30      	wfi
1a000da4:	e7fd      	b.n	1a000da2 <Reset_Handler+0x66>
1a000da6:	bf00      	nop
1a000da8:	40053100 	.word	0x40053100
1a000dac:	10df1000 	.word	0x10df1000
1a000db0:	01dff7ff 	.word	0x01dff7ff
1a000db4:	e000e280 	.word	0xe000e280
1a000db8:	1a000114 	.word	0x1a000114
1a000dbc:	1a000150 	.word	0x1a000150
1a000dc0:	1a000178 	.word	0x1a000178

1a000dc4 <_fini>:
void _fini(void) {}
1a000dc4:	4770      	bx	lr

1a000dc6 <_init>:
void _init(void) {}
1a000dc6:	4770      	bx	lr

1a000dc8 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000dc8:	2309      	movs	r3, #9
1a000dca:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000dd0:	4770      	bx	lr

1a000dd2 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000dd2:	2358      	movs	r3, #88	; 0x58
1a000dd4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000dda:	4770      	bx	lr

1a000ddc <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000ddc:	2902      	cmp	r1, #2
1a000dde:	d904      	bls.n	1a000dea <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000de0:	2309      	movs	r3, #9
1a000de2:	6003      	str	r3, [r0, #0]
       return -1;
1a000de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000de8:	4770      	bx	lr
       return 1;
1a000dea:	2001      	movs	r0, #1
   }
}
1a000dec:	4770      	bx	lr

1a000dee <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000dee:	2358      	movs	r3, #88	; 0x58
1a000df0:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000df6:	4770      	bx	lr

1a000df8 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000df8:	2902      	cmp	r1, #2
1a000dfa:	d81f      	bhi.n	1a000e3c <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e00:	461d      	mov	r5, r3
1a000e02:	4617      	mov	r7, r2
1a000e04:	4606      	mov	r6, r0
  size_t i = 0;
1a000e06:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000e08:	42ac      	cmp	r4, r5
1a000e0a:	d211      	bcs.n	1a000e30 <_read_r+0x38>
         int c = __stdio_getchar();
1a000e0c:	f002 f8f1 	bl	1a002ff2 <__stdio_getchar>
         if( c != -1 ){
1a000e10:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000e14:	d0f8      	beq.n	1a000e08 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000e16:	f104 0801 	add.w	r8, r4, #1
1a000e1a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000e1c:	280d      	cmp	r0, #13
1a000e1e:	d003      	beq.n	1a000e28 <_read_r+0x30>
1a000e20:	280a      	cmp	r0, #10
1a000e22:	d001      	beq.n	1a000e28 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000e24:	4644      	mov	r4, r8
1a000e26:	e7ef      	b.n	1a000e08 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000e28:	f002 f8e3 	bl	1a002ff2 <__stdio_getchar>
               return i;
1a000e2c:	4640      	mov	r0, r8
1a000e2e:	e003      	b.n	1a000e38 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000e30:	2313      	movs	r3, #19
1a000e32:	6033      	str	r3, [r6, #0]
      return -1;
1a000e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000e3c:	2313      	movs	r3, #19
1a000e3e:	6003      	str	r3, [r0, #0]
      return -1;
1a000e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000e44:	4770      	bx	lr

1a000e46 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000e46:	2902      	cmp	r1, #2
1a000e48:	d80c      	bhi.n	1a000e64 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000e4a:	b570      	push	{r4, r5, r6, lr}
1a000e4c:	461d      	mov	r5, r3
1a000e4e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000e50:	2400      	movs	r4, #0
1a000e52:	42ac      	cmp	r4, r5
1a000e54:	d204      	bcs.n	1a000e60 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000e56:	5d30      	ldrb	r0, [r6, r4]
1a000e58:	f002 f8c6 	bl	1a002fe8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000e5c:	3401      	adds	r4, #1
1a000e5e:	e7f8      	b.n	1a000e52 <_write_r+0xc>
       return n;
1a000e60:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000e62:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000e64:	2313      	movs	r3, #19
1a000e66:	6003      	str	r3, [r0, #0]
       return -1;
1a000e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000e6c:	4770      	bx	lr
1a000e6e:	Address 0x000000001a000e6e is out of bounds.


1a000e70 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000e70:	4b05      	ldr	r3, [pc, #20]	; (1a000e88 <_sbrk_r+0x18>)
1a000e72:	681b      	ldr	r3, [r3, #0]
1a000e74:	b123      	cbz	r3, 1a000e80 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000e76:	4b04      	ldr	r3, [pc, #16]	; (1a000e88 <_sbrk_r+0x18>)
1a000e78:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000e7a:	4401      	add	r1, r0
1a000e7c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000e7e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000e80:	4b01      	ldr	r3, [pc, #4]	; (1a000e88 <_sbrk_r+0x18>)
1a000e82:	4a02      	ldr	r2, [pc, #8]	; (1a000e8c <_sbrk_r+0x1c>)
1a000e84:	601a      	str	r2, [r3, #0]
1a000e86:	e7f6      	b.n	1a000e76 <_sbrk_r+0x6>
1a000e88:	10000148 	.word	0x10000148
1a000e8c:	10002c64 	.word	0x10002c64

1a000e90 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000e90:	b538      	push	{r3, r4, r5, lr}
1a000e92:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000e94:	f010 0f07 	tst.w	r0, #7
1a000e98:	d002      	beq.n	1a000ea0 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000e9a:	f020 0407 	bic.w	r4, r0, #7
1a000e9e:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000ea0:	f001 f822 	bl	1a001ee8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000ea4:	4b13      	ldr	r3, [pc, #76]	; (1a000ef4 <pvPortMalloc+0x64>)
1a000ea6:	681b      	ldr	r3, [r3, #0]
1a000ea8:	b17b      	cbz	r3, 1a000eca <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a000eaa:	4b13      	ldr	r3, [pc, #76]	; (1a000ef8 <pvPortMalloc+0x68>)
1a000eac:	681b      	ldr	r3, [r3, #0]
1a000eae:	441c      	add	r4, r3
1a000eb0:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000eb4:	4294      	cmp	r4, r2
1a000eb6:	d80e      	bhi.n	1a000ed6 <pvPortMalloc+0x46>
1a000eb8:	42a3      	cmp	r3, r4
1a000eba:	d310      	bcc.n	1a000ede <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000ebc:	f001 f8ae 	bl	1a00201c <xTaskResumeAll>
void *pvReturn = NULL;
1a000ec0:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000ec2:	f000 fdb5 	bl	1a001a30 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a000ec6:	4628      	mov	r0, r5
1a000ec8:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000eca:	4b0c      	ldr	r3, [pc, #48]	; (1a000efc <pvPortMalloc+0x6c>)
1a000ecc:	f023 0307 	bic.w	r3, r3, #7
1a000ed0:	4a08      	ldr	r2, [pc, #32]	; (1a000ef4 <pvPortMalloc+0x64>)
1a000ed2:	6013      	str	r3, [r2, #0]
1a000ed4:	e7e9      	b.n	1a000eaa <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a000ed6:	f001 f8a1 	bl	1a00201c <xTaskResumeAll>
void *pvReturn = NULL;
1a000eda:	2500      	movs	r5, #0
1a000edc:	e7f1      	b.n	1a000ec2 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a000ede:	4a05      	ldr	r2, [pc, #20]	; (1a000ef4 <pvPortMalloc+0x64>)
1a000ee0:	6815      	ldr	r5, [r2, #0]
1a000ee2:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000ee4:	4b04      	ldr	r3, [pc, #16]	; (1a000ef8 <pvPortMalloc+0x68>)
1a000ee6:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a000ee8:	f001 f898 	bl	1a00201c <xTaskResumeAll>
		if( pvReturn == NULL )
1a000eec:	2d00      	cmp	r5, #0
1a000eee:	d1ea      	bne.n	1a000ec6 <pvPortMalloc+0x36>
1a000ef0:	e7e7      	b.n	1a000ec2 <pvPortMalloc+0x32>
1a000ef2:	bf00      	nop
1a000ef4:	1000014c 	.word	0x1000014c
1a000ef8:	10002150 	.word	0x10002150
1a000efc:	10000158 	.word	0x10000158

1a000f00 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000f00:	b140      	cbz	r0, 1a000f14 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000f02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f06:	f383 8811 	msr	BASEPRI, r3
1a000f0a:	f3bf 8f6f 	isb	sy
1a000f0e:	f3bf 8f4f 	dsb	sy
1a000f12:	e7fe      	b.n	1a000f12 <vPortFree+0x12>
}
1a000f14:	4770      	bx	lr

1a000f16 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000f16:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000f18:	b123      	cbz	r3, 1a000f24 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000f1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000f1c:	6818      	ldr	r0, [r3, #0]
1a000f1e:	f1c0 0007 	rsb	r0, r0, #7
1a000f22:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000f24:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000f26:	4770      	bx	lr

1a000f28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000f28:	b510      	push	{r4, lr}
1a000f2a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000f2c:	f001 fe0a 	bl	1a002b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000f30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000f32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000f34:	429a      	cmp	r2, r3
1a000f36:	d004      	beq.n	1a000f42 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000f38:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000f3a:	f001 fe25 	bl	1a002b88 <vPortExitCritical>

	return xReturn;
}
1a000f3e:	4620      	mov	r0, r4
1a000f40:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000f42:	2401      	movs	r4, #1
1a000f44:	e7f9      	b.n	1a000f3a <prvIsQueueFull+0x12>

1a000f46 <prvIsQueueEmpty>:
{
1a000f46:	b510      	push	{r4, lr}
1a000f48:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000f4a:	f001 fdfb 	bl	1a002b44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000f50:	b923      	cbnz	r3, 1a000f5c <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a000f52:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a000f54:	f001 fe18 	bl	1a002b88 <vPortExitCritical>
}
1a000f58:	4620      	mov	r0, r4
1a000f5a:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a000f5c:	2400      	movs	r4, #0
1a000f5e:	e7f9      	b.n	1a000f54 <prvIsQueueEmpty+0xe>

1a000f60 <prvCopyDataToQueue>:
{
1a000f60:	b570      	push	{r4, r5, r6, lr}
1a000f62:	4604      	mov	r4, r0
1a000f64:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000f66:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000f68:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000f6a:	b95a      	cbnz	r2, 1a000f84 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000f6c:	6803      	ldr	r3, [r0, #0]
1a000f6e:	b11b      	cbz	r3, 1a000f78 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000f70:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000f72:	3501      	adds	r5, #1
1a000f74:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000f76:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000f78:	6840      	ldr	r0, [r0, #4]
1a000f7a:	f001 fa95 	bl	1a0024a8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000f7e:	2300      	movs	r3, #0
1a000f80:	6063      	str	r3, [r4, #4]
1a000f82:	e7f6      	b.n	1a000f72 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000f84:	b96e      	cbnz	r6, 1a000fa2 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000f86:	6880      	ldr	r0, [r0, #8]
1a000f88:	f004 f901 	bl	1a00518e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000f8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000f8e:	68a3      	ldr	r3, [r4, #8]
1a000f90:	4413      	add	r3, r2
1a000f92:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000f94:	6862      	ldr	r2, [r4, #4]
1a000f96:	4293      	cmp	r3, r2
1a000f98:	d319      	bcc.n	1a000fce <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000f9a:	6823      	ldr	r3, [r4, #0]
1a000f9c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000f9e:	2000      	movs	r0, #0
1a000fa0:	e7e7      	b.n	1a000f72 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000fa2:	68c0      	ldr	r0, [r0, #12]
1a000fa4:	f004 f8f3 	bl	1a00518e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000fa8:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000faa:	4252      	negs	r2, r2
1a000fac:	68e3      	ldr	r3, [r4, #12]
1a000fae:	4413      	add	r3, r2
1a000fb0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000fb2:	6821      	ldr	r1, [r4, #0]
1a000fb4:	428b      	cmp	r3, r1
1a000fb6:	d202      	bcs.n	1a000fbe <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000fb8:	6863      	ldr	r3, [r4, #4]
1a000fba:	441a      	add	r2, r3
1a000fbc:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000fbe:	2e02      	cmp	r6, #2
1a000fc0:	d001      	beq.n	1a000fc6 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000fc2:	2000      	movs	r0, #0
1a000fc4:	e7d5      	b.n	1a000f72 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000fc6:	b125      	cbz	r5, 1a000fd2 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000fc8:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000fca:	2000      	movs	r0, #0
1a000fcc:	e7d1      	b.n	1a000f72 <prvCopyDataToQueue+0x12>
1a000fce:	2000      	movs	r0, #0
1a000fd0:	e7cf      	b.n	1a000f72 <prvCopyDataToQueue+0x12>
1a000fd2:	2000      	movs	r0, #0
1a000fd4:	e7cd      	b.n	1a000f72 <prvCopyDataToQueue+0x12>

1a000fd6 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000fd6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000fd8:	b172      	cbz	r2, 1a000ff8 <prvCopyDataFromQueue+0x22>
{
1a000fda:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000fdc:	68c3      	ldr	r3, [r0, #12]
1a000fde:	4413      	add	r3, r2
1a000fe0:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000fe2:	6844      	ldr	r4, [r0, #4]
1a000fe4:	42a3      	cmp	r3, r4
1a000fe6:	d301      	bcc.n	1a000fec <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000fe8:	6803      	ldr	r3, [r0, #0]
1a000fea:	60c3      	str	r3, [r0, #12]
1a000fec:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000fee:	68c1      	ldr	r1, [r0, #12]
1a000ff0:	4620      	mov	r0, r4
1a000ff2:	f004 f8cc 	bl	1a00518e <memcpy>
}
1a000ff6:	bd10      	pop	{r4, pc}
1a000ff8:	4770      	bx	lr

1a000ffa <prvUnlockQueue>:
{
1a000ffa:	b538      	push	{r3, r4, r5, lr}
1a000ffc:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000ffe:	f001 fda1 	bl	1a002b44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a001002:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a001006:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001008:	e003      	b.n	1a001012 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a00100a:	f001 f9d9 	bl	1a0023c0 <vTaskMissedYield>
			--cTxLock;
1a00100e:	3c01      	subs	r4, #1
1a001010:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001012:	2c00      	cmp	r4, #0
1a001014:	dd08      	ble.n	1a001028 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001018:	b133      	cbz	r3, 1a001028 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00101a:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00101e:	f001 f93b 	bl	1a002298 <xTaskRemoveFromEventList>
1a001022:	2800      	cmp	r0, #0
1a001024:	d0f3      	beq.n	1a00100e <prvUnlockQueue+0x14>
1a001026:	e7f0      	b.n	1a00100a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001028:	23ff      	movs	r3, #255	; 0xff
1a00102a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00102e:	f001 fdab 	bl	1a002b88 <vPortExitCritical>
	taskENTER_CRITICAL();
1a001032:	f001 fd87 	bl	1a002b44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a001036:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a00103a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00103c:	e003      	b.n	1a001046 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00103e:	f001 f9bf 	bl	1a0023c0 <vTaskMissedYield>
				--cRxLock;
1a001042:	3c01      	subs	r4, #1
1a001044:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001046:	2c00      	cmp	r4, #0
1a001048:	dd08      	ble.n	1a00105c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00104a:	692b      	ldr	r3, [r5, #16]
1a00104c:	b133      	cbz	r3, 1a00105c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00104e:	f105 0010 	add.w	r0, r5, #16
1a001052:	f001 f921 	bl	1a002298 <xTaskRemoveFromEventList>
1a001056:	2800      	cmp	r0, #0
1a001058:	d0f3      	beq.n	1a001042 <prvUnlockQueue+0x48>
1a00105a:	e7f0      	b.n	1a00103e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a00105c:	23ff      	movs	r3, #255	; 0xff
1a00105e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a001062:	f001 fd91 	bl	1a002b88 <vPortExitCritical>
}
1a001066:	bd38      	pop	{r3, r4, r5, pc}

1a001068 <xQueueGenericReset>:
{
1a001068:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00106a:	b1e0      	cbz	r0, 1a0010a6 <xQueueGenericReset+0x3e>
1a00106c:	4604      	mov	r4, r0
1a00106e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a001070:	f001 fd68 	bl	1a002b44 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a001074:	6821      	ldr	r1, [r4, #0]
1a001076:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001078:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00107a:	fb03 1002 	mla	r0, r3, r2, r1
1a00107e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a001080:	2000      	movs	r0, #0
1a001082:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a001084:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a001086:	3a01      	subs	r2, #1
1a001088:	fb02 1303 	mla	r3, r2, r3, r1
1a00108c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a00108e:	23ff      	movs	r3, #255	; 0xff
1a001090:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a001094:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a001098:	b9ed      	cbnz	r5, 1a0010d6 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00109a:	6923      	ldr	r3, [r4, #16]
1a00109c:	b963      	cbnz	r3, 1a0010b8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a00109e:	f001 fd73 	bl	1a002b88 <vPortExitCritical>
}
1a0010a2:	2001      	movs	r0, #1
1a0010a4:	bd38      	pop	{r3, r4, r5, pc}
1a0010a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010aa:	f383 8811 	msr	BASEPRI, r3
1a0010ae:	f3bf 8f6f 	isb	sy
1a0010b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0010b6:	e7fe      	b.n	1a0010b6 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0010b8:	f104 0010 	add.w	r0, r4, #16
1a0010bc:	f001 f8ec 	bl	1a002298 <xTaskRemoveFromEventList>
1a0010c0:	2800      	cmp	r0, #0
1a0010c2:	d0ec      	beq.n	1a00109e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a0010c4:	4b08      	ldr	r3, [pc, #32]	; (1a0010e8 <xQueueGenericReset+0x80>)
1a0010c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010ca:	601a      	str	r2, [r3, #0]
1a0010cc:	f3bf 8f4f 	dsb	sy
1a0010d0:	f3bf 8f6f 	isb	sy
1a0010d4:	e7e3      	b.n	1a00109e <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0010d6:	f104 0010 	add.w	r0, r4, #16
1a0010da:	f000 fc34 	bl	1a001946 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0010de:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010e2:	f000 fc30 	bl	1a001946 <vListInitialise>
1a0010e6:	e7da      	b.n	1a00109e <xQueueGenericReset+0x36>
1a0010e8:	e000ed04 	.word	0xe000ed04

1a0010ec <prvInitialiseNewQueue>:
{
1a0010ec:	b538      	push	{r3, r4, r5, lr}
1a0010ee:	461d      	mov	r5, r3
1a0010f0:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0010f2:	460b      	mov	r3, r1
1a0010f4:	b949      	cbnz	r1, 1a00110a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0010f6:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0010f8:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0010fa:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0010fc:	2101      	movs	r1, #1
1a0010fe:	4620      	mov	r0, r4
1a001100:	f7ff ffb2 	bl	1a001068 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a001104:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001108:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a00110a:	6022      	str	r2, [r4, #0]
1a00110c:	e7f4      	b.n	1a0010f8 <prvInitialiseNewQueue+0xc>

1a00110e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00110e:	b940      	cbnz	r0, 1a001122 <xQueueGenericCreateStatic+0x14>
1a001110:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001114:	f383 8811 	msr	BASEPRI, r3
1a001118:	f3bf 8f6f 	isb	sy
1a00111c:	f3bf 8f4f 	dsb	sy
1a001120:	e7fe      	b.n	1a001120 <xQueueGenericCreateStatic+0x12>
	{
1a001122:	b510      	push	{r4, lr}
1a001124:	b084      	sub	sp, #16
1a001126:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001128:	b153      	cbz	r3, 1a001140 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00112a:	b192      	cbz	r2, 1a001152 <xQueueGenericCreateStatic+0x44>
1a00112c:	b989      	cbnz	r1, 1a001152 <xQueueGenericCreateStatic+0x44>
1a00112e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001132:	f383 8811 	msr	BASEPRI, r3
1a001136:	f3bf 8f6f 	isb	sy
1a00113a:	f3bf 8f4f 	dsb	sy
1a00113e:	e7fe      	b.n	1a00113e <xQueueGenericCreateStatic+0x30>
1a001140:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001144:	f383 8811 	msr	BASEPRI, r3
1a001148:	f3bf 8f6f 	isb	sy
1a00114c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a001150:	e7fe      	b.n	1a001150 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a001152:	b16a      	cbz	r2, 1a001170 <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a001154:	2050      	movs	r0, #80	; 0x50
1a001156:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a001158:	9803      	ldr	r0, [sp, #12]
1a00115a:	2850      	cmp	r0, #80	; 0x50
1a00115c:	d013      	beq.n	1a001186 <xQueueGenericCreateStatic+0x78>
1a00115e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001162:	f383 8811 	msr	BASEPRI, r3
1a001166:	f3bf 8f6f 	isb	sy
1a00116a:	f3bf 8f4f 	dsb	sy
1a00116e:	e7fe      	b.n	1a00116e <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a001170:	2900      	cmp	r1, #0
1a001172:	d0ef      	beq.n	1a001154 <xQueueGenericCreateStatic+0x46>
1a001174:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001178:	f383 8811 	msr	BASEPRI, r3
1a00117c:	f3bf 8f6f 	isb	sy
1a001180:	f3bf 8f4f 	dsb	sy
1a001184:	e7fe      	b.n	1a001184 <xQueueGenericCreateStatic+0x76>
1a001186:	4620      	mov	r0, r4
1a001188:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a00118a:	2301      	movs	r3, #1
1a00118c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001190:	9400      	str	r4, [sp, #0]
1a001192:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a001196:	f7ff ffa9 	bl	1a0010ec <prvInitialiseNewQueue>
	}
1a00119a:	4620      	mov	r0, r4
1a00119c:	b004      	add	sp, #16
1a00119e:	bd10      	pop	{r4, pc}

1a0011a0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0011a0:	b940      	cbnz	r0, 1a0011b4 <xQueueGenericCreate+0x14>
1a0011a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011a6:	f383 8811 	msr	BASEPRI, r3
1a0011aa:	f3bf 8f6f 	isb	sy
1a0011ae:	f3bf 8f4f 	dsb	sy
1a0011b2:	e7fe      	b.n	1a0011b2 <xQueueGenericCreate+0x12>
	{
1a0011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011b6:	b083      	sub	sp, #12
1a0011b8:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0011ba:	b1b1      	cbz	r1, 1a0011ea <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0011bc:	fb01 f000 	mul.w	r0, r1, r0
1a0011c0:	4617      	mov	r7, r2
1a0011c2:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a0011c4:	3050      	adds	r0, #80	; 0x50
1a0011c6:	f7ff fe63 	bl	1a000e90 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a0011ca:	4605      	mov	r5, r0
1a0011cc:	b150      	cbz	r0, 1a0011e4 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a0011ce:	2300      	movs	r3, #0
1a0011d0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0011d4:	9000      	str	r0, [sp, #0]
1a0011d6:	463b      	mov	r3, r7
1a0011d8:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a0011dc:	4621      	mov	r1, r4
1a0011de:	4630      	mov	r0, r6
1a0011e0:	f7ff ff84 	bl	1a0010ec <prvInitialiseNewQueue>
	}
1a0011e4:	4628      	mov	r0, r5
1a0011e6:	b003      	add	sp, #12
1a0011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a0011ea:	2000      	movs	r0, #0
1a0011ec:	e7e8      	b.n	1a0011c0 <xQueueGenericCreate+0x20>
1a0011ee:	Address 0x000000001a0011ee is out of bounds.


1a0011f0 <xQueueGenericSend>:
{
1a0011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011f2:	b085      	sub	sp, #20
1a0011f4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0011f6:	b178      	cbz	r0, 1a001218 <xQueueGenericSend+0x28>
1a0011f8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0011fa:	b1b1      	cbz	r1, 1a00122a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0011fc:	2b02      	cmp	r3, #2
1a0011fe:	d120      	bne.n	1a001242 <xQueueGenericSend+0x52>
1a001200:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001202:	2a01      	cmp	r2, #1
1a001204:	d01d      	beq.n	1a001242 <xQueueGenericSend+0x52>
1a001206:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00120a:	f383 8811 	msr	BASEPRI, r3
1a00120e:	f3bf 8f6f 	isb	sy
1a001212:	f3bf 8f4f 	dsb	sy
1a001216:	e7fe      	b.n	1a001216 <xQueueGenericSend+0x26>
1a001218:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00121c:	f383 8811 	msr	BASEPRI, r3
1a001220:	f3bf 8f6f 	isb	sy
1a001224:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001228:	e7fe      	b.n	1a001228 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00122a:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00122c:	2a00      	cmp	r2, #0
1a00122e:	d0e5      	beq.n	1a0011fc <xQueueGenericSend+0xc>
1a001230:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001234:	f383 8811 	msr	BASEPRI, r3
1a001238:	f3bf 8f6f 	isb	sy
1a00123c:	f3bf 8f4f 	dsb	sy
1a001240:	e7fe      	b.n	1a001240 <xQueueGenericSend+0x50>
1a001242:	461e      	mov	r6, r3
1a001244:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001246:	f001 f8c1 	bl	1a0023cc <xTaskGetSchedulerState>
1a00124a:	b950      	cbnz	r0, 1a001262 <xQueueGenericSend+0x72>
1a00124c:	9b01      	ldr	r3, [sp, #4]
1a00124e:	b153      	cbz	r3, 1a001266 <xQueueGenericSend+0x76>
1a001250:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001254:	f383 8811 	msr	BASEPRI, r3
1a001258:	f3bf 8f6f 	isb	sy
1a00125c:	f3bf 8f4f 	dsb	sy
1a001260:	e7fe      	b.n	1a001260 <xQueueGenericSend+0x70>
1a001262:	2500      	movs	r5, #0
1a001264:	e03b      	b.n	1a0012de <xQueueGenericSend+0xee>
1a001266:	2500      	movs	r5, #0
1a001268:	e039      	b.n	1a0012de <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00126a:	4632      	mov	r2, r6
1a00126c:	4639      	mov	r1, r7
1a00126e:	4620      	mov	r0, r4
1a001270:	f7ff fe76 	bl	1a000f60 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001274:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001276:	b96b      	cbnz	r3, 1a001294 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a001278:	b138      	cbz	r0, 1a00128a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a00127a:	4b3c      	ldr	r3, [pc, #240]	; (1a00136c <xQueueGenericSend+0x17c>)
1a00127c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001280:	601a      	str	r2, [r3, #0]
1a001282:	f3bf 8f4f 	dsb	sy
1a001286:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a00128a:	f001 fc7d 	bl	1a002b88 <vPortExitCritical>
				return pdPASS;
1a00128e:	2001      	movs	r0, #1
}
1a001290:	b005      	add	sp, #20
1a001292:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001294:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001298:	f000 fffe 	bl	1a002298 <xTaskRemoveFromEventList>
1a00129c:	2800      	cmp	r0, #0
1a00129e:	d0f4      	beq.n	1a00128a <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a0012a0:	4b32      	ldr	r3, [pc, #200]	; (1a00136c <xQueueGenericSend+0x17c>)
1a0012a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012a6:	601a      	str	r2, [r3, #0]
1a0012a8:	f3bf 8f4f 	dsb	sy
1a0012ac:	f3bf 8f6f 	isb	sy
1a0012b0:	e7eb      	b.n	1a00128a <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a0012b2:	f001 fc69 	bl	1a002b88 <vPortExitCritical>
					return errQUEUE_FULL;
1a0012b6:	2000      	movs	r0, #0
1a0012b8:	e7ea      	b.n	1a001290 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0012ba:	a802      	add	r0, sp, #8
1a0012bc:	f001 f832 	bl	1a002324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0012c0:	2501      	movs	r5, #1
1a0012c2:	e019      	b.n	1a0012f8 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a0012c4:	2300      	movs	r3, #0
1a0012c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0012ca:	e021      	b.n	1a001310 <xQueueGenericSend+0x120>
1a0012cc:	2300      	movs	r3, #0
1a0012ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0012d2:	e023      	b.n	1a00131c <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a0012d4:	4620      	mov	r0, r4
1a0012d6:	f7ff fe90 	bl	1a000ffa <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0012da:	f000 fe9f 	bl	1a00201c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a0012de:	f001 fc31 	bl	1a002b44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0012e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0012e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0012e6:	429a      	cmp	r2, r3
1a0012e8:	d3bf      	bcc.n	1a00126a <xQueueGenericSend+0x7a>
1a0012ea:	2e02      	cmp	r6, #2
1a0012ec:	d0bd      	beq.n	1a00126a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0012ee:	9b01      	ldr	r3, [sp, #4]
1a0012f0:	2b00      	cmp	r3, #0
1a0012f2:	d0de      	beq.n	1a0012b2 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a0012f4:	2d00      	cmp	r5, #0
1a0012f6:	d0e0      	beq.n	1a0012ba <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a0012f8:	f001 fc46 	bl	1a002b88 <vPortExitCritical>
		vTaskSuspendAll();
1a0012fc:	f000 fdf4 	bl	1a001ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001300:	f001 fc20 	bl	1a002b44 <vPortEnterCritical>
1a001304:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001308:	b25b      	sxtb	r3, r3
1a00130a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00130e:	d0d9      	beq.n	1a0012c4 <xQueueGenericSend+0xd4>
1a001310:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001314:	b25b      	sxtb	r3, r3
1a001316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00131a:	d0d7      	beq.n	1a0012cc <xQueueGenericSend+0xdc>
1a00131c:	f001 fc34 	bl	1a002b88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001320:	a901      	add	r1, sp, #4
1a001322:	a802      	add	r0, sp, #8
1a001324:	f001 f80a 	bl	1a00233c <xTaskCheckForTimeOut>
1a001328:	b9c8      	cbnz	r0, 1a00135e <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00132a:	4620      	mov	r0, r4
1a00132c:	f7ff fdfc 	bl	1a000f28 <prvIsQueueFull>
1a001330:	2800      	cmp	r0, #0
1a001332:	d0cf      	beq.n	1a0012d4 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001334:	9901      	ldr	r1, [sp, #4]
1a001336:	f104 0010 	add.w	r0, r4, #16
1a00133a:	f000 ff79 	bl	1a002230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00133e:	4620      	mov	r0, r4
1a001340:	f7ff fe5b 	bl	1a000ffa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001344:	f000 fe6a 	bl	1a00201c <xTaskResumeAll>
1a001348:	2800      	cmp	r0, #0
1a00134a:	d1c8      	bne.n	1a0012de <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a00134c:	4b07      	ldr	r3, [pc, #28]	; (1a00136c <xQueueGenericSend+0x17c>)
1a00134e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001352:	601a      	str	r2, [r3, #0]
1a001354:	f3bf 8f4f 	dsb	sy
1a001358:	f3bf 8f6f 	isb	sy
1a00135c:	e7bf      	b.n	1a0012de <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a00135e:	4620      	mov	r0, r4
1a001360:	f7ff fe4b 	bl	1a000ffa <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001364:	f000 fe5a 	bl	1a00201c <xTaskResumeAll>
			return errQUEUE_FULL;
1a001368:	2000      	movs	r0, #0
1a00136a:	e791      	b.n	1a001290 <xQueueGenericSend+0xa0>
1a00136c:	e000ed04 	.word	0xe000ed04

1a001370 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a001370:	b148      	cbz	r0, 1a001386 <prvInitialiseMutex+0x16>
	{
1a001372:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a001374:	2100      	movs	r1, #0
1a001376:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a001378:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a00137a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a00137c:	460b      	mov	r3, r1
1a00137e:	460a      	mov	r2, r1
1a001380:	f7ff ff36 	bl	1a0011f0 <xQueueGenericSend>
	}
1a001384:	bd08      	pop	{r3, pc}
1a001386:	4770      	bx	lr

1a001388 <xQueueCreateMutex>:
	{
1a001388:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a00138a:	4602      	mov	r2, r0
1a00138c:	2100      	movs	r1, #0
1a00138e:	2001      	movs	r0, #1
1a001390:	f7ff ff06 	bl	1a0011a0 <xQueueGenericCreate>
1a001394:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a001396:	f7ff ffeb 	bl	1a001370 <prvInitialiseMutex>
	}
1a00139a:	4620      	mov	r0, r4
1a00139c:	bd10      	pop	{r4, pc}

1a00139e <xQueueGenericSendFromISR>:
{
1a00139e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0013a2:	b178      	cbz	r0, 1a0013c4 <xQueueGenericSendFromISR+0x26>
1a0013a4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0013a6:	b1b1      	cbz	r1, 1a0013d6 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0013a8:	2b02      	cmp	r3, #2
1a0013aa:	d120      	bne.n	1a0013ee <xQueueGenericSendFromISR+0x50>
1a0013ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0013ae:	2801      	cmp	r0, #1
1a0013b0:	d01d      	beq.n	1a0013ee <xQueueGenericSendFromISR+0x50>
1a0013b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013b6:	f383 8811 	msr	BASEPRI, r3
1a0013ba:	f3bf 8f6f 	isb	sy
1a0013be:	f3bf 8f4f 	dsb	sy
1a0013c2:	e7fe      	b.n	1a0013c2 <xQueueGenericSendFromISR+0x24>
1a0013c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013c8:	f383 8811 	msr	BASEPRI, r3
1a0013cc:	f3bf 8f6f 	isb	sy
1a0013d0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0013d4:	e7fe      	b.n	1a0013d4 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0013d6:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0013d8:	2800      	cmp	r0, #0
1a0013da:	d0e5      	beq.n	1a0013a8 <xQueueGenericSendFromISR+0xa>
1a0013dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013e0:	f383 8811 	msr	BASEPRI, r3
1a0013e4:	f3bf 8f6f 	isb	sy
1a0013e8:	f3bf 8f4f 	dsb	sy
1a0013ec:	e7fe      	b.n	1a0013ec <xQueueGenericSendFromISR+0x4e>
1a0013ee:	461f      	mov	r7, r3
1a0013f0:	4690      	mov	r8, r2
1a0013f2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0013f4:	f001 fcd0 	bl	1a002d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0013f8:	f3ef 8611 	mrs	r6, BASEPRI
1a0013fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001400:	f383 8811 	msr	BASEPRI, r3
1a001404:	f3bf 8f6f 	isb	sy
1a001408:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00140c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00140e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001410:	429a      	cmp	r2, r3
1a001412:	d306      	bcc.n	1a001422 <xQueueGenericSendFromISR+0x84>
1a001414:	2f02      	cmp	r7, #2
1a001416:	d004      	beq.n	1a001422 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a001418:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00141a:	f386 8811 	msr	BASEPRI, r6
}
1a00141e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a001422:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001426:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001428:	463a      	mov	r2, r7
1a00142a:	4649      	mov	r1, r9
1a00142c:	4620      	mov	r0, r4
1a00142e:	f7ff fd97 	bl	1a000f60 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001432:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001436:	d005      	beq.n	1a001444 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001438:	1c6b      	adds	r3, r5, #1
1a00143a:	b25b      	sxtb	r3, r3
1a00143c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001440:	2001      	movs	r0, #1
1a001442:	e7ea      	b.n	1a00141a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001444:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001446:	b90b      	cbnz	r3, 1a00144c <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a001448:	2001      	movs	r0, #1
1a00144a:	e7e6      	b.n	1a00141a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00144c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001450:	f000 ff22 	bl	1a002298 <xTaskRemoveFromEventList>
1a001454:	b130      	cbz	r0, 1a001464 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a001456:	f1b8 0f00 	cmp.w	r8, #0
1a00145a:	d005      	beq.n	1a001468 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00145c:	2001      	movs	r0, #1
1a00145e:	f8c8 0000 	str.w	r0, [r8]
1a001462:	e7da      	b.n	1a00141a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a001464:	2001      	movs	r0, #1
1a001466:	e7d8      	b.n	1a00141a <xQueueGenericSendFromISR+0x7c>
1a001468:	2001      	movs	r0, #1
1a00146a:	e7d6      	b.n	1a00141a <xQueueGenericSendFromISR+0x7c>

1a00146c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
1a00146c:	b160      	cbz	r0, 1a001488 <xQueueGiveFromISR+0x1c>
{
1a00146e:	b570      	push	{r4, r5, r6, lr}
1a001470:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001472:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001474:	b18b      	cbz	r3, 1a00149a <xQueueGiveFromISR+0x2e>
	__asm volatile
1a001476:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00147a:	f383 8811 	msr	BASEPRI, r3
1a00147e:	f3bf 8f6f 	isb	sy
1a001482:	f3bf 8f4f 	dsb	sy
1a001486:	e7fe      	b.n	1a001486 <xQueueGiveFromISR+0x1a>
1a001488:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00148c:	f383 8811 	msr	BASEPRI, r3
1a001490:	f3bf 8f6f 	isb	sy
1a001494:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001498:	e7fe      	b.n	1a001498 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a00149a:	6803      	ldr	r3, [r0, #0]
1a00149c:	b1f3      	cbz	r3, 1a0014dc <xQueueGiveFromISR+0x70>
1a00149e:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0014a0:	f001 fc7a 	bl	1a002d98 <vPortValidateInterruptPriority>
	__asm volatile
1a0014a4:	f3ef 8511 	mrs	r5, BASEPRI
1a0014a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ac:	f383 8811 	msr	BASEPRI, r3
1a0014b0:	f3bf 8f6f 	isb	sy
1a0014b4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0014b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
1a0014ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0014bc:	4293      	cmp	r3, r2
1a0014be:	d926      	bls.n	1a00150e <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
1a0014c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0014c4:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0014c6:	3201      	adds	r2, #1
1a0014c8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
1a0014ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0014ce:	d011      	beq.n	1a0014f4 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0014d0:	3301      	adds	r3, #1
1a0014d2:	b25b      	sxtb	r3, r3
1a0014d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0014d8:	2001      	movs	r0, #1
1a0014da:	e019      	b.n	1a001510 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a0014dc:	6843      	ldr	r3, [r0, #4]
1a0014de:	2b00      	cmp	r3, #0
1a0014e0:	d0dd      	beq.n	1a00149e <xQueueGiveFromISR+0x32>
	__asm volatile
1a0014e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014e6:	f383 8811 	msr	BASEPRI, r3
1a0014ea:	f3bf 8f6f 	isb	sy
1a0014ee:	f3bf 8f4f 	dsb	sy
1a0014f2:	e7fe      	b.n	1a0014f2 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0014f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0014f6:	b90b      	cbnz	r3, 1a0014fc <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
1a0014f8:	2001      	movs	r0, #1
1a0014fa:	e009      	b.n	1a001510 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0014fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001500:	f000 feca 	bl	1a002298 <xTaskRemoveFromEventList>
1a001504:	b138      	cbz	r0, 1a001516 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
1a001506:	b146      	cbz	r6, 1a00151a <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001508:	2001      	movs	r0, #1
1a00150a:	6030      	str	r0, [r6, #0]
1a00150c:	e000      	b.n	1a001510 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
1a00150e:	2000      	movs	r0, #0
	__asm volatile
1a001510:	f385 8811 	msr	BASEPRI, r5
}
1a001514:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
1a001516:	2001      	movs	r0, #1
1a001518:	e7fa      	b.n	1a001510 <xQueueGiveFromISR+0xa4>
1a00151a:	2001      	movs	r0, #1
1a00151c:	e7f8      	b.n	1a001510 <xQueueGiveFromISR+0xa4>
1a00151e:	Address 0x000000001a00151e is out of bounds.


1a001520 <xQueueReceive>:
{
1a001520:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001522:	b085      	sub	sp, #20
1a001524:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001526:	b180      	cbz	r0, 1a00154a <xQueueReceive+0x2a>
1a001528:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00152a:	b1b9      	cbz	r1, 1a00155c <xQueueReceive+0x3c>
1a00152c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00152e:	f000 ff4d 	bl	1a0023cc <xTaskGetSchedulerState>
1a001532:	b9f8      	cbnz	r0, 1a001574 <xQueueReceive+0x54>
1a001534:	9b01      	ldr	r3, [sp, #4]
1a001536:	b1fb      	cbz	r3, 1a001578 <xQueueReceive+0x58>
	__asm volatile
1a001538:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00153c:	f383 8811 	msr	BASEPRI, r3
1a001540:	f3bf 8f6f 	isb	sy
1a001544:	f3bf 8f4f 	dsb	sy
1a001548:	e7fe      	b.n	1a001548 <xQueueReceive+0x28>
1a00154a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00154e:	f383 8811 	msr	BASEPRI, r3
1a001552:	f3bf 8f6f 	isb	sy
1a001556:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a00155a:	e7fe      	b.n	1a00155a <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00155c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00155e:	2b00      	cmp	r3, #0
1a001560:	d0e4      	beq.n	1a00152c <xQueueReceive+0xc>
1a001562:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001566:	f383 8811 	msr	BASEPRI, r3
1a00156a:	f3bf 8f6f 	isb	sy
1a00156e:	f3bf 8f4f 	dsb	sy
1a001572:	e7fe      	b.n	1a001572 <xQueueReceive+0x52>
1a001574:	2600      	movs	r6, #0
1a001576:	e03e      	b.n	1a0015f6 <xQueueReceive+0xd6>
1a001578:	2600      	movs	r6, #0
1a00157a:	e03c      	b.n	1a0015f6 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00157c:	4639      	mov	r1, r7
1a00157e:	4620      	mov	r0, r4
1a001580:	f7ff fd29 	bl	1a000fd6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001584:	3d01      	subs	r5, #1
1a001586:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001588:	6923      	ldr	r3, [r4, #16]
1a00158a:	b923      	cbnz	r3, 1a001596 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a00158c:	f001 fafc 	bl	1a002b88 <vPortExitCritical>
				return pdPASS;
1a001590:	2001      	movs	r0, #1
}
1a001592:	b005      	add	sp, #20
1a001594:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001596:	f104 0010 	add.w	r0, r4, #16
1a00159a:	f000 fe7d 	bl	1a002298 <xTaskRemoveFromEventList>
1a00159e:	2800      	cmp	r0, #0
1a0015a0:	d0f4      	beq.n	1a00158c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a0015a2:	4b35      	ldr	r3, [pc, #212]	; (1a001678 <xQueueReceive+0x158>)
1a0015a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015a8:	601a      	str	r2, [r3, #0]
1a0015aa:	f3bf 8f4f 	dsb	sy
1a0015ae:	f3bf 8f6f 	isb	sy
1a0015b2:	e7eb      	b.n	1a00158c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a0015b4:	f001 fae8 	bl	1a002b88 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0015b8:	2000      	movs	r0, #0
1a0015ba:	e7ea      	b.n	1a001592 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0015bc:	a802      	add	r0, sp, #8
1a0015be:	f000 feb1 	bl	1a002324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0015c2:	2601      	movs	r6, #1
1a0015c4:	e021      	b.n	1a00160a <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a0015c6:	2300      	movs	r3, #0
1a0015c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0015cc:	e029      	b.n	1a001622 <xQueueReceive+0x102>
1a0015ce:	2300      	movs	r3, #0
1a0015d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0015d4:	e02b      	b.n	1a00162e <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a0015d6:	4620      	mov	r0, r4
1a0015d8:	f7ff fd0f 	bl	1a000ffa <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0015dc:	f000 fd1e 	bl	1a00201c <xTaskResumeAll>
1a0015e0:	e009      	b.n	1a0015f6 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a0015e2:	4620      	mov	r0, r4
1a0015e4:	f7ff fd09 	bl	1a000ffa <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0015e8:	f000 fd18 	bl	1a00201c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0015ec:	4620      	mov	r0, r4
1a0015ee:	f7ff fcaa 	bl	1a000f46 <prvIsQueueEmpty>
1a0015f2:	2800      	cmp	r0, #0
1a0015f4:	d13d      	bne.n	1a001672 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a0015f6:	f001 faa5 	bl	1a002b44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0015fa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0015fc:	2d00      	cmp	r5, #0
1a0015fe:	d1bd      	bne.n	1a00157c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001600:	9b01      	ldr	r3, [sp, #4]
1a001602:	2b00      	cmp	r3, #0
1a001604:	d0d6      	beq.n	1a0015b4 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a001606:	2e00      	cmp	r6, #0
1a001608:	d0d8      	beq.n	1a0015bc <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a00160a:	f001 fabd 	bl	1a002b88 <vPortExitCritical>
		vTaskSuspendAll();
1a00160e:	f000 fc6b 	bl	1a001ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001612:	f001 fa97 	bl	1a002b44 <vPortEnterCritical>
1a001616:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00161a:	b25b      	sxtb	r3, r3
1a00161c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001620:	d0d1      	beq.n	1a0015c6 <xQueueReceive+0xa6>
1a001622:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001626:	b25b      	sxtb	r3, r3
1a001628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00162c:	d0cf      	beq.n	1a0015ce <xQueueReceive+0xae>
1a00162e:	f001 faab 	bl	1a002b88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001632:	a901      	add	r1, sp, #4
1a001634:	a802      	add	r0, sp, #8
1a001636:	f000 fe81 	bl	1a00233c <xTaskCheckForTimeOut>
1a00163a:	2800      	cmp	r0, #0
1a00163c:	d1d1      	bne.n	1a0015e2 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00163e:	4620      	mov	r0, r4
1a001640:	f7ff fc81 	bl	1a000f46 <prvIsQueueEmpty>
1a001644:	2800      	cmp	r0, #0
1a001646:	d0c6      	beq.n	1a0015d6 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001648:	9901      	ldr	r1, [sp, #4]
1a00164a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00164e:	f000 fdef 	bl	1a002230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001652:	4620      	mov	r0, r4
1a001654:	f7ff fcd1 	bl	1a000ffa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001658:	f000 fce0 	bl	1a00201c <xTaskResumeAll>
1a00165c:	2800      	cmp	r0, #0
1a00165e:	d1ca      	bne.n	1a0015f6 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a001660:	4b05      	ldr	r3, [pc, #20]	; (1a001678 <xQueueReceive+0x158>)
1a001662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001666:	601a      	str	r2, [r3, #0]
1a001668:	f3bf 8f4f 	dsb	sy
1a00166c:	f3bf 8f6f 	isb	sy
1a001670:	e7c1      	b.n	1a0015f6 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a001672:	2000      	movs	r0, #0
1a001674:	e78d      	b.n	1a001592 <xQueueReceive+0x72>
1a001676:	bf00      	nop
1a001678:	e000ed04 	.word	0xe000ed04

1a00167c <xQueueSemaphoreTake>:
{
1a00167c:	b570      	push	{r4, r5, r6, lr}
1a00167e:	b084      	sub	sp, #16
1a001680:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001682:	b158      	cbz	r0, 1a00169c <xQueueSemaphoreTake+0x20>
1a001684:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001686:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001688:	b18b      	cbz	r3, 1a0016ae <xQueueSemaphoreTake+0x32>
1a00168a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00168e:	f383 8811 	msr	BASEPRI, r3
1a001692:	f3bf 8f6f 	isb	sy
1a001696:	f3bf 8f4f 	dsb	sy
1a00169a:	e7fe      	b.n	1a00169a <xQueueSemaphoreTake+0x1e>
1a00169c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016a0:	f383 8811 	msr	BASEPRI, r3
1a0016a4:	f3bf 8f6f 	isb	sy
1a0016a8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a0016ac:	e7fe      	b.n	1a0016ac <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0016ae:	f000 fe8d 	bl	1a0023cc <xTaskGetSchedulerState>
1a0016b2:	b950      	cbnz	r0, 1a0016ca <xQueueSemaphoreTake+0x4e>
1a0016b4:	9b01      	ldr	r3, [sp, #4]
1a0016b6:	b15b      	cbz	r3, 1a0016d0 <xQueueSemaphoreTake+0x54>
1a0016b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016bc:	f383 8811 	msr	BASEPRI, r3
1a0016c0:	f3bf 8f6f 	isb	sy
1a0016c4:	f3bf 8f4f 	dsb	sy
1a0016c8:	e7fe      	b.n	1a0016c8 <xQueueSemaphoreTake+0x4c>
1a0016ca:	2500      	movs	r5, #0
1a0016cc:	462e      	mov	r6, r5
1a0016ce:	e054      	b.n	1a00177a <xQueueSemaphoreTake+0xfe>
1a0016d0:	2500      	movs	r5, #0
1a0016d2:	462e      	mov	r6, r5
1a0016d4:	e051      	b.n	1a00177a <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a0016d6:	3b01      	subs	r3, #1
1a0016d8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0016da:	6823      	ldr	r3, [r4, #0]
1a0016dc:	b13b      	cbz	r3, 1a0016ee <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0016de:	6923      	ldr	r3, [r4, #16]
1a0016e0:	b94b      	cbnz	r3, 1a0016f6 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
1a0016e2:	f001 fa51 	bl	1a002b88 <vPortExitCritical>
				return pdPASS;
1a0016e6:	2501      	movs	r5, #1
}
1a0016e8:	4628      	mov	r0, r5
1a0016ea:	b004      	add	sp, #16
1a0016ec:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a0016ee:	f000 ff95 	bl	1a00261c <pvTaskIncrementMutexHeldCount>
1a0016f2:	6060      	str	r0, [r4, #4]
1a0016f4:	e7f3      	b.n	1a0016de <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0016f6:	f104 0010 	add.w	r0, r4, #16
1a0016fa:	f000 fdcd 	bl	1a002298 <xTaskRemoveFromEventList>
1a0016fe:	2800      	cmp	r0, #0
1a001700:	d0ef      	beq.n	1a0016e2 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
1a001702:	4b46      	ldr	r3, [pc, #280]	; (1a00181c <xQueueSemaphoreTake+0x1a0>)
1a001704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001708:	601a      	str	r2, [r3, #0]
1a00170a:	f3bf 8f4f 	dsb	sy
1a00170e:	f3bf 8f6f 	isb	sy
1a001712:	e7e6      	b.n	1a0016e2 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001714:	b145      	cbz	r5, 1a001728 <xQueueSemaphoreTake+0xac>
1a001716:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00171a:	f383 8811 	msr	BASEPRI, r3
1a00171e:	f3bf 8f6f 	isb	sy
1a001722:	f3bf 8f4f 	dsb	sy
1a001726:	e7fe      	b.n	1a001726 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
1a001728:	f001 fa2e 	bl	1a002b88 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00172c:	e7dc      	b.n	1a0016e8 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00172e:	a802      	add	r0, sp, #8
1a001730:	f000 fdf8 	bl	1a002324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001734:	2601      	movs	r6, #1
1a001736:	e02a      	b.n	1a00178e <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
1a001738:	2300      	movs	r3, #0
1a00173a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00173e:	e032      	b.n	1a0017a6 <xQueueSemaphoreTake+0x12a>
1a001740:	2300      	movs	r3, #0
1a001742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001746:	e034      	b.n	1a0017b2 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
1a001748:	f001 f9fc 	bl	1a002b44 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a00174c:	6860      	ldr	r0, [r4, #4]
1a00174e:	f000 fe4d 	bl	1a0023ec <xTaskPriorityInherit>
1a001752:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001754:	f001 fa18 	bl	1a002b88 <vPortExitCritical>
1a001758:	e03b      	b.n	1a0017d2 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
1a00175a:	4620      	mov	r0, r4
1a00175c:	f7ff fc4d 	bl	1a000ffa <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001760:	f000 fc5c 	bl	1a00201c <xTaskResumeAll>
1a001764:	e009      	b.n	1a00177a <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
1a001766:	4620      	mov	r0, r4
1a001768:	f7ff fc47 	bl	1a000ffa <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00176c:	f000 fc56 	bl	1a00201c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001770:	4620      	mov	r0, r4
1a001772:	f7ff fbe8 	bl	1a000f46 <prvIsQueueEmpty>
1a001776:	2800      	cmp	r0, #0
1a001778:	d140      	bne.n	1a0017fc <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
1a00177a:	f001 f9e3 	bl	1a002b44 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a00177e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001780:	2b00      	cmp	r3, #0
1a001782:	d1a8      	bne.n	1a0016d6 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001784:	9b01      	ldr	r3, [sp, #4]
1a001786:	2b00      	cmp	r3, #0
1a001788:	d0c4      	beq.n	1a001714 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
1a00178a:	2e00      	cmp	r6, #0
1a00178c:	d0cf      	beq.n	1a00172e <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
1a00178e:	f001 f9fb 	bl	1a002b88 <vPortExitCritical>
		vTaskSuspendAll();
1a001792:	f000 fba9 	bl	1a001ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001796:	f001 f9d5 	bl	1a002b44 <vPortEnterCritical>
1a00179a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00179e:	b25b      	sxtb	r3, r3
1a0017a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0017a4:	d0c8      	beq.n	1a001738 <xQueueSemaphoreTake+0xbc>
1a0017a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0017aa:	b25b      	sxtb	r3, r3
1a0017ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0017b0:	d0c6      	beq.n	1a001740 <xQueueSemaphoreTake+0xc4>
1a0017b2:	f001 f9e9 	bl	1a002b88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0017b6:	a901      	add	r1, sp, #4
1a0017b8:	a802      	add	r0, sp, #8
1a0017ba:	f000 fdbf 	bl	1a00233c <xTaskCheckForTimeOut>
1a0017be:	2800      	cmp	r0, #0
1a0017c0:	d1d1      	bne.n	1a001766 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0017c2:	4620      	mov	r0, r4
1a0017c4:	f7ff fbbf 	bl	1a000f46 <prvIsQueueEmpty>
1a0017c8:	2800      	cmp	r0, #0
1a0017ca:	d0c6      	beq.n	1a00175a <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0017cc:	6823      	ldr	r3, [r4, #0]
1a0017ce:	2b00      	cmp	r3, #0
1a0017d0:	d0ba      	beq.n	1a001748 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0017d2:	9901      	ldr	r1, [sp, #4]
1a0017d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0017d8:	f000 fd2a 	bl	1a002230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0017dc:	4620      	mov	r0, r4
1a0017de:	f7ff fc0c 	bl	1a000ffa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0017e2:	f000 fc1b 	bl	1a00201c <xTaskResumeAll>
1a0017e6:	2800      	cmp	r0, #0
1a0017e8:	d1c7      	bne.n	1a00177a <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
1a0017ea:	4b0c      	ldr	r3, [pc, #48]	; (1a00181c <xQueueSemaphoreTake+0x1a0>)
1a0017ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017f0:	601a      	str	r2, [r3, #0]
1a0017f2:	f3bf 8f4f 	dsb	sy
1a0017f6:	f3bf 8f6f 	isb	sy
1a0017fa:	e7be      	b.n	1a00177a <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
1a0017fc:	b90d      	cbnz	r5, 1a001802 <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
1a0017fe:	2500      	movs	r5, #0
1a001800:	e772      	b.n	1a0016e8 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
1a001802:	f001 f99f 	bl	1a002b44 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001806:	4620      	mov	r0, r4
1a001808:	f7ff fb85 	bl	1a000f16 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a00180c:	4601      	mov	r1, r0
1a00180e:	6860      	ldr	r0, [r4, #4]
1a001810:	f000 fea4 	bl	1a00255c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a001814:	f001 f9b8 	bl	1a002b88 <vPortExitCritical>
1a001818:	e7f1      	b.n	1a0017fe <xQueueSemaphoreTake+0x182>
1a00181a:	bf00      	nop
1a00181c:	e000ed04 	.word	0xe000ed04

1a001820 <xQueueReceiveFromISR>:
{
1a001820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001824:	b1c8      	cbz	r0, 1a00185a <xQueueReceiveFromISR+0x3a>
1a001826:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001828:	b301      	cbz	r1, 1a00186c <xQueueReceiveFromISR+0x4c>
1a00182a:	4617      	mov	r7, r2
1a00182c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00182e:	f001 fab3 	bl	1a002d98 <vPortValidateInterruptPriority>
	__asm volatile
1a001832:	f3ef 8611 	mrs	r6, BASEPRI
1a001836:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00183a:	f383 8811 	msr	BASEPRI, r3
1a00183e:	f3bf 8f6f 	isb	sy
1a001842:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001846:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00184a:	f1b8 0f00 	cmp.w	r8, #0
1a00184e:	d119      	bne.n	1a001884 <xQueueReceiveFromISR+0x64>
			xReturn = pdFAIL;
1a001850:	2000      	movs	r0, #0
	__asm volatile
1a001852:	f386 8811 	msr	BASEPRI, r6
}
1a001856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
1a00185a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00185e:	f383 8811 	msr	BASEPRI, r3
1a001862:	f3bf 8f6f 	isb	sy
1a001866:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a00186a:	e7fe      	b.n	1a00186a <xQueueReceiveFromISR+0x4a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00186c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00186e:	2b00      	cmp	r3, #0
1a001870:	d0db      	beq.n	1a00182a <xQueueReceiveFromISR+0xa>
1a001872:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001876:	f383 8811 	msr	BASEPRI, r3
1a00187a:	f3bf 8f6f 	isb	sy
1a00187e:	f3bf 8f4f 	dsb	sy
1a001882:	e7fe      	b.n	1a001882 <xQueueReceiveFromISR+0x62>
			const int8_t cRxLock = pxQueue->cRxLock;
1a001884:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
1a001888:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00188a:	4649      	mov	r1, r9
1a00188c:	4620      	mov	r0, r4
1a00188e:	f7ff fba2 	bl	1a000fd6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001892:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a001896:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
1a001898:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00189c:	d005      	beq.n	1a0018aa <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1a00189e:	1c6b      	adds	r3, r5, #1
1a0018a0:	b25b      	sxtb	r3, r3
1a0018a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
1a0018a6:	2001      	movs	r0, #1
1a0018a8:	e7d3      	b.n	1a001852 <xQueueReceiveFromISR+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0018aa:	6923      	ldr	r3, [r4, #16]
1a0018ac:	b90b      	cbnz	r3, 1a0018b2 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
1a0018ae:	2001      	movs	r0, #1
1a0018b0:	e7cf      	b.n	1a001852 <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0018b2:	f104 0010 	add.w	r0, r4, #16
1a0018b6:	f000 fcef 	bl	1a002298 <xTaskRemoveFromEventList>
1a0018ba:	b118      	cbz	r0, 1a0018c4 <xQueueReceiveFromISR+0xa4>
						if( pxHigherPriorityTaskWoken != NULL )
1a0018bc:	b127      	cbz	r7, 1a0018c8 <xQueueReceiveFromISR+0xa8>
							*pxHigherPriorityTaskWoken = pdTRUE;
1a0018be:	2001      	movs	r0, #1
1a0018c0:	6038      	str	r0, [r7, #0]
1a0018c2:	e7c6      	b.n	1a001852 <xQueueReceiveFromISR+0x32>
			xReturn = pdPASS;
1a0018c4:	2001      	movs	r0, #1
1a0018c6:	e7c4      	b.n	1a001852 <xQueueReceiveFromISR+0x32>
1a0018c8:	2001      	movs	r0, #1
1a0018ca:	e7c2      	b.n	1a001852 <xQueueReceiveFromISR+0x32>

1a0018cc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0018cc:	2300      	movs	r3, #0
1a0018ce:	2b07      	cmp	r3, #7
1a0018d0:	d80c      	bhi.n	1a0018ec <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0018d2:	4a07      	ldr	r2, [pc, #28]	; (1a0018f0 <vQueueAddToRegistry+0x24>)
1a0018d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0018d8:	b10a      	cbz	r2, 1a0018de <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0018da:	3301      	adds	r3, #1
1a0018dc:	e7f7      	b.n	1a0018ce <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0018de:	4a04      	ldr	r2, [pc, #16]	; (1a0018f0 <vQueueAddToRegistry+0x24>)
1a0018e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0018e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0018e8:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0018ea:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0018ec:	4770      	bx	lr
1a0018ee:	bf00      	nop
1a0018f0:	10002c10 	.word	0x10002c10

1a0018f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0018f4:	b570      	push	{r4, r5, r6, lr}
1a0018f6:	4604      	mov	r4, r0
1a0018f8:	460d      	mov	r5, r1
1a0018fa:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0018fc:	f001 f922 	bl	1a002b44 <vPortEnterCritical>
1a001900:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001904:	b25b      	sxtb	r3, r3
1a001906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00190a:	d00d      	beq.n	1a001928 <vQueueWaitForMessageRestricted+0x34>
1a00190c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001910:	b25b      	sxtb	r3, r3
1a001912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001916:	d00b      	beq.n	1a001930 <vQueueWaitForMessageRestricted+0x3c>
1a001918:	f001 f936 	bl	1a002b88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a00191c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00191e:	b15b      	cbz	r3, 1a001938 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001920:	4620      	mov	r0, r4
1a001922:	f7ff fb6a 	bl	1a000ffa <prvUnlockQueue>
	}
1a001926:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001928:	2300      	movs	r3, #0
1a00192a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00192e:	e7ed      	b.n	1a00190c <vQueueWaitForMessageRestricted+0x18>
1a001930:	2300      	movs	r3, #0
1a001932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001936:	e7ef      	b.n	1a001918 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001938:	4632      	mov	r2, r6
1a00193a:	4629      	mov	r1, r5
1a00193c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001940:	f000 fc8e 	bl	1a002260 <vTaskPlaceOnEventListRestricted>
1a001944:	e7ec      	b.n	1a001920 <vQueueWaitForMessageRestricted+0x2c>

1a001946 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001946:	f100 0308 	add.w	r3, r0, #8
1a00194a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00194c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001950:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001952:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001954:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001956:	2300      	movs	r3, #0
1a001958:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00195a:	4770      	bx	lr

1a00195c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00195c:	2300      	movs	r3, #0
1a00195e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001960:	4770      	bx	lr

1a001962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001962:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001964:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001966:	689a      	ldr	r2, [r3, #8]
1a001968:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00196a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00196c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00196e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001970:	6803      	ldr	r3, [r0, #0]
1a001972:	3301      	adds	r3, #1
1a001974:	6003      	str	r3, [r0, #0]
}
1a001976:	4770      	bx	lr

1a001978 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001978:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a00197a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00197c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001980:	d002      	beq.n	1a001988 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001982:	f100 0208 	add.w	r2, r0, #8
1a001986:	e002      	b.n	1a00198e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001988:	6902      	ldr	r2, [r0, #16]
1a00198a:	e004      	b.n	1a001996 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00198c:	461a      	mov	r2, r3
1a00198e:	6853      	ldr	r3, [r2, #4]
1a001990:	681c      	ldr	r4, [r3, #0]
1a001992:	42ac      	cmp	r4, r5
1a001994:	d9fa      	bls.n	1a00198c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001996:	6853      	ldr	r3, [r2, #4]
1a001998:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a00199a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00199c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a00199e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0019a0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0019a2:	6803      	ldr	r3, [r0, #0]
1a0019a4:	3301      	adds	r3, #1
1a0019a6:	6003      	str	r3, [r0, #0]
}
1a0019a8:	bc30      	pop	{r4, r5}
1a0019aa:	4770      	bx	lr

1a0019ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0019ac:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0019ae:	6841      	ldr	r1, [r0, #4]
1a0019b0:	6882      	ldr	r2, [r0, #8]
1a0019b2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0019b4:	6841      	ldr	r1, [r0, #4]
1a0019b6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0019b8:	685a      	ldr	r2, [r3, #4]
1a0019ba:	4282      	cmp	r2, r0
1a0019bc:	d006      	beq.n	1a0019cc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0019be:	2200      	movs	r2, #0
1a0019c0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0019c2:	681a      	ldr	r2, [r3, #0]
1a0019c4:	3a01      	subs	r2, #1
1a0019c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0019c8:	6818      	ldr	r0, [r3, #0]
}
1a0019ca:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0019cc:	6882      	ldr	r2, [r0, #8]
1a0019ce:	605a      	str	r2, [r3, #4]
1a0019d0:	e7f5      	b.n	1a0019be <uxListRemove+0x12>
1a0019d2:	Address 0x000000001a0019d2 is out of bounds.


1a0019d4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0019d4:	4b03      	ldr	r3, [pc, #12]	; (1a0019e4 <vApplicationGetIdleTaskMemory+0x10>)
1a0019d6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0019d8:	4b03      	ldr	r3, [pc, #12]	; (1a0019e8 <vApplicationGetIdleTaskMemory+0x14>)
1a0019da:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0019dc:	235a      	movs	r3, #90	; 0x5a
1a0019de:	6013      	str	r3, [r2, #0]
}
1a0019e0:	4770      	bx	lr
1a0019e2:	bf00      	nop
1a0019e4:	1000285c 	.word	0x1000285c
1a0019e8:	10002154 	.word	0x10002154

1a0019ec <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0019ec:	4b03      	ldr	r3, [pc, #12]	; (1a0019fc <vApplicationGetTimerTaskMemory+0x10>)
1a0019ee:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0019f0:	4b03      	ldr	r3, [pc, #12]	; (1a001a00 <vApplicationGetTimerTaskMemory+0x14>)
1a0019f2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0019f4:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0019f8:	6013      	str	r3, [r2, #0]
1a0019fa:	4770      	bx	lr
1a0019fc:	100028bc 	.word	0x100028bc
1a001a00:	100022bc 	.word	0x100022bc

1a001a04 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001a04:	b510      	push	{r4, lr}
1a001a06:	b082      	sub	sp, #8
1a001a08:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001a0a:	9001      	str	r0, [sp, #4]
1a001a0c:	2300      	movs	r3, #0
1a001a0e:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001a10:	f001 f898 	bl	1a002b44 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001a14:	9901      	ldr	r1, [sp, #4]
1a001a16:	4622      	mov	r2, r4
1a001a18:	4804      	ldr	r0, [pc, #16]	; (1a001a2c <vAssertCalled+0x28>)
1a001a1a:	f003 ff53 	bl	1a0058c4 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001a1e:	9b00      	ldr	r3, [sp, #0]
1a001a20:	2b00      	cmp	r3, #0
1a001a22:	d0fc      	beq.n	1a001a1e <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001a24:	f001 f8b0 	bl	1a002b88 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001a28:	b002      	add	sp, #8
1a001a2a:	bd10      	pop	{r4, pc}
1a001a2c:	1a0060b8 	.word	0x1a0060b8

1a001a30 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001a30:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001a32:	4804      	ldr	r0, [pc, #16]	; (1a001a44 <vApplicationMallocFailedHook+0x14>)
1a001a34:	f003 ffcc 	bl	1a0059d0 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001a38:	4903      	ldr	r1, [pc, #12]	; (1a001a48 <vApplicationMallocFailedHook+0x18>)
1a001a3a:	202c      	movs	r0, #44	; 0x2c
1a001a3c:	f7ff ffe2 	bl	1a001a04 <vAssertCalled>
}
1a001a40:	bd08      	pop	{r3, pc}
1a001a42:	bf00      	nop
1a001a44:	1a006044 	.word	0x1a006044
1a001a48:	1a006068 	.word	0x1a006068

1a001a4c <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001a4c:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001a4e:	4804      	ldr	r0, [pc, #16]	; (1a001a60 <vApplicationStackOverflowHook+0x14>)
1a001a50:	f003 ff38 	bl	1a0058c4 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001a54:	4903      	ldr	r1, [pc, #12]	; (1a001a64 <vApplicationStackOverflowHook+0x18>)
1a001a56:	2050      	movs	r0, #80	; 0x50
1a001a58:	f7ff ffd4 	bl	1a001a04 <vAssertCalled>
}
1a001a5c:	bd08      	pop	{r3, pc}
1a001a5e:	bf00      	nop
1a001a60:	1a006088 	.word	0x1a006088
1a001a64:	1a006068 	.word	0x1a006068

1a001a68 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001a68:	4b08      	ldr	r3, [pc, #32]	; (1a001a8c <prvResetNextTaskUnblockTime+0x24>)
1a001a6a:	681b      	ldr	r3, [r3, #0]
1a001a6c:	681b      	ldr	r3, [r3, #0]
1a001a6e:	b923      	cbnz	r3, 1a001a7a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001a70:	4b07      	ldr	r3, [pc, #28]	; (1a001a90 <prvResetNextTaskUnblockTime+0x28>)
1a001a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001a76:	601a      	str	r2, [r3, #0]
1a001a78:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001a7a:	4b04      	ldr	r3, [pc, #16]	; (1a001a8c <prvResetNextTaskUnblockTime+0x24>)
1a001a7c:	681b      	ldr	r3, [r3, #0]
1a001a7e:	68db      	ldr	r3, [r3, #12]
1a001a80:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001a82:	685a      	ldr	r2, [r3, #4]
1a001a84:	4b02      	ldr	r3, [pc, #8]	; (1a001a90 <prvResetNextTaskUnblockTime+0x28>)
1a001a86:	601a      	str	r2, [r3, #0]
	}
}
1a001a88:	4770      	bx	lr
1a001a8a:	bf00      	nop
1a001a8c:	10002920 	.word	0x10002920
1a001a90:	100029f4 	.word	0x100029f4

1a001a94 <prvInitialiseNewTask>:
{
1a001a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001a98:	4681      	mov	r9, r0
1a001a9a:	460d      	mov	r5, r1
1a001a9c:	4617      	mov	r7, r2
1a001a9e:	469a      	mov	sl, r3
1a001aa0:	9e08      	ldr	r6, [sp, #32]
1a001aa2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001aa6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001aa8:	0092      	lsls	r2, r2, #2
1a001aaa:	21a5      	movs	r1, #165	; 0xa5
1a001aac:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001aae:	f003 fb7c 	bl	1a0051aa <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001ab2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001ab4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001ab8:	3a01      	subs	r2, #1
1a001aba:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001abe:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001ac2:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001ac4:	2300      	movs	r3, #0
1a001ac6:	2b0f      	cmp	r3, #15
1a001ac8:	d806      	bhi.n	1a001ad8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001aca:	5cea      	ldrb	r2, [r5, r3]
1a001acc:	18e1      	adds	r1, r4, r3
1a001ace:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001ad2:	b10a      	cbz	r2, 1a001ad8 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001ad4:	3301      	adds	r3, #1
1a001ad6:	e7f6      	b.n	1a001ac6 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001ad8:	2300      	movs	r3, #0
1a001ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001ade:	2e06      	cmp	r6, #6
1a001ae0:	d900      	bls.n	1a001ae4 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001ae2:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001ae4:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001ae6:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001ae8:	2500      	movs	r5, #0
1a001aea:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001aec:	1d20      	adds	r0, r4, #4
1a001aee:	f7ff ff35 	bl	1a00195c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001af2:	f104 0018 	add.w	r0, r4, #24
1a001af6:	f7ff ff31 	bl	1a00195c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001afa:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001afc:	f1c6 0607 	rsb	r6, r6, #7
1a001b00:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001b02:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001b04:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001b06:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001b0a:	4652      	mov	r2, sl
1a001b0c:	4649      	mov	r1, r9
1a001b0e:	4638      	mov	r0, r7
1a001b10:	f000 ffea 	bl	1a002ae8 <pxPortInitialiseStack>
1a001b14:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001b16:	f1b8 0f00 	cmp.w	r8, #0
1a001b1a:	d001      	beq.n	1a001b20 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001b1c:	f8c8 4000 	str.w	r4, [r8]
}
1a001b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a001b24 <prvInitialiseTaskLists>:
{
1a001b24:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001b26:	2400      	movs	r4, #0
1a001b28:	2c06      	cmp	r4, #6
1a001b2a:	d808      	bhi.n	1a001b3e <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001b2c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001b30:	0093      	lsls	r3, r2, #2
1a001b32:	480e      	ldr	r0, [pc, #56]	; (1a001b6c <prvInitialiseTaskLists+0x48>)
1a001b34:	4418      	add	r0, r3
1a001b36:	f7ff ff06 	bl	1a001946 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001b3a:	3401      	adds	r4, #1
1a001b3c:	e7f4      	b.n	1a001b28 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a001b3e:	4d0c      	ldr	r5, [pc, #48]	; (1a001b70 <prvInitialiseTaskLists+0x4c>)
1a001b40:	4628      	mov	r0, r5
1a001b42:	f7ff ff00 	bl	1a001946 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001b46:	4c0b      	ldr	r4, [pc, #44]	; (1a001b74 <prvInitialiseTaskLists+0x50>)
1a001b48:	4620      	mov	r0, r4
1a001b4a:	f7ff fefc 	bl	1a001946 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001b4e:	480a      	ldr	r0, [pc, #40]	; (1a001b78 <prvInitialiseTaskLists+0x54>)
1a001b50:	f7ff fef9 	bl	1a001946 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001b54:	4809      	ldr	r0, [pc, #36]	; (1a001b7c <prvInitialiseTaskLists+0x58>)
1a001b56:	f7ff fef6 	bl	1a001946 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001b5a:	4809      	ldr	r0, [pc, #36]	; (1a001b80 <prvInitialiseTaskLists+0x5c>)
1a001b5c:	f7ff fef3 	bl	1a001946 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001b60:	4b08      	ldr	r3, [pc, #32]	; (1a001b84 <prvInitialiseTaskLists+0x60>)
1a001b62:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001b64:	4b08      	ldr	r3, [pc, #32]	; (1a001b88 <prvInitialiseTaskLists+0x64>)
1a001b66:	601c      	str	r4, [r3, #0]
}
1a001b68:	bd38      	pop	{r3, r4, r5, pc}
1a001b6a:	bf00      	nop
1a001b6c:	10002928 	.word	0x10002928
1a001b70:	100029cc 	.word	0x100029cc
1a001b74:	100029e0 	.word	0x100029e0
1a001b78:	100029fc 	.word	0x100029fc
1a001b7c:	10002a28 	.word	0x10002a28
1a001b80:	10002a14 	.word	0x10002a14
1a001b84:	10002920 	.word	0x10002920
1a001b88:	10002924 	.word	0x10002924

1a001b8c <prvAddNewTaskToReadyList>:
{
1a001b8c:	b510      	push	{r4, lr}
1a001b8e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001b90:	f000 ffd8 	bl	1a002b44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001b94:	4a21      	ldr	r2, [pc, #132]	; (1a001c1c <prvAddNewTaskToReadyList+0x90>)
1a001b96:	6813      	ldr	r3, [r2, #0]
1a001b98:	3301      	adds	r3, #1
1a001b9a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001b9c:	4b20      	ldr	r3, [pc, #128]	; (1a001c20 <prvAddNewTaskToReadyList+0x94>)
1a001b9e:	681b      	ldr	r3, [r3, #0]
1a001ba0:	b15b      	cbz	r3, 1a001bba <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001ba2:	4b20      	ldr	r3, [pc, #128]	; (1a001c24 <prvAddNewTaskToReadyList+0x98>)
1a001ba4:	681b      	ldr	r3, [r3, #0]
1a001ba6:	b96b      	cbnz	r3, 1a001bc4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001ba8:	4b1d      	ldr	r3, [pc, #116]	; (1a001c20 <prvAddNewTaskToReadyList+0x94>)
1a001baa:	681b      	ldr	r3, [r3, #0]
1a001bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001bae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001bb0:	429a      	cmp	r2, r3
1a001bb2:	d807      	bhi.n	1a001bc4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001bb4:	4b1a      	ldr	r3, [pc, #104]	; (1a001c20 <prvAddNewTaskToReadyList+0x94>)
1a001bb6:	601c      	str	r4, [r3, #0]
1a001bb8:	e004      	b.n	1a001bc4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001bba:	4b19      	ldr	r3, [pc, #100]	; (1a001c20 <prvAddNewTaskToReadyList+0x94>)
1a001bbc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001bbe:	6813      	ldr	r3, [r2, #0]
1a001bc0:	2b01      	cmp	r3, #1
1a001bc2:	d027      	beq.n	1a001c14 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001bc4:	4a18      	ldr	r2, [pc, #96]	; (1a001c28 <prvAddNewTaskToReadyList+0x9c>)
1a001bc6:	6813      	ldr	r3, [r2, #0]
1a001bc8:	3301      	adds	r3, #1
1a001bca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001bcc:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001bce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001bd0:	2201      	movs	r2, #1
1a001bd2:	409a      	lsls	r2, r3
1a001bd4:	4915      	ldr	r1, [pc, #84]	; (1a001c2c <prvAddNewTaskToReadyList+0xa0>)
1a001bd6:	6808      	ldr	r0, [r1, #0]
1a001bd8:	4302      	orrs	r2, r0
1a001bda:	600a      	str	r2, [r1, #0]
1a001bdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001be0:	009a      	lsls	r2, r3, #2
1a001be2:	1d21      	adds	r1, r4, #4
1a001be4:	4812      	ldr	r0, [pc, #72]	; (1a001c30 <prvAddNewTaskToReadyList+0xa4>)
1a001be6:	4410      	add	r0, r2
1a001be8:	f7ff febb 	bl	1a001962 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001bec:	f000 ffcc 	bl	1a002b88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001bf0:	4b0c      	ldr	r3, [pc, #48]	; (1a001c24 <prvAddNewTaskToReadyList+0x98>)
1a001bf2:	681b      	ldr	r3, [r3, #0]
1a001bf4:	b16b      	cbz	r3, 1a001c12 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001bf6:	4b0a      	ldr	r3, [pc, #40]	; (1a001c20 <prvAddNewTaskToReadyList+0x94>)
1a001bf8:	681b      	ldr	r3, [r3, #0]
1a001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001bfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001bfe:	429a      	cmp	r2, r3
1a001c00:	d207      	bcs.n	1a001c12 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001c02:	4b0c      	ldr	r3, [pc, #48]	; (1a001c34 <prvAddNewTaskToReadyList+0xa8>)
1a001c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c08:	601a      	str	r2, [r3, #0]
1a001c0a:	f3bf 8f4f 	dsb	sy
1a001c0e:	f3bf 8f6f 	isb	sy
}
1a001c12:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001c14:	f7ff ff86 	bl	1a001b24 <prvInitialiseTaskLists>
1a001c18:	e7d4      	b.n	1a001bc4 <prvAddNewTaskToReadyList+0x38>
1a001c1a:	bf00      	nop
1a001c1c:	100029b4 	.word	0x100029b4
1a001c20:	1000291c 	.word	0x1000291c
1a001c24:	10002a10 	.word	0x10002a10
1a001c28:	100029c4 	.word	0x100029c4
1a001c2c:	100029c8 	.word	0x100029c8
1a001c30:	10002928 	.word	0x10002928
1a001c34:	e000ed04 	.word	0xe000ed04

1a001c38 <prvDeleteTCB>:
	{
1a001c38:	b510      	push	{r4, lr}
1a001c3a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001c3c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001c40:	b163      	cbz	r3, 1a001c5c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001c42:	2b01      	cmp	r3, #1
1a001c44:	d011      	beq.n	1a001c6a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001c46:	2b02      	cmp	r3, #2
1a001c48:	d00e      	beq.n	1a001c68 <prvDeleteTCB+0x30>
1a001c4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c4e:	f383 8811 	msr	BASEPRI, r3
1a001c52:	f3bf 8f6f 	isb	sy
1a001c56:	f3bf 8f4f 	dsb	sy
1a001c5a:	e7fe      	b.n	1a001c5a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a001c5c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001c5e:	f7ff f94f 	bl	1a000f00 <vPortFree>
				vPortFree( pxTCB );
1a001c62:	4620      	mov	r0, r4
1a001c64:	f7ff f94c 	bl	1a000f00 <vPortFree>
	}
1a001c68:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a001c6a:	f7ff f949 	bl	1a000f00 <vPortFree>
1a001c6e:	e7fb      	b.n	1a001c68 <prvDeleteTCB+0x30>

1a001c70 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001c70:	4b0f      	ldr	r3, [pc, #60]	; (1a001cb0 <prvCheckTasksWaitingTermination+0x40>)
1a001c72:	681b      	ldr	r3, [r3, #0]
1a001c74:	b1d3      	cbz	r3, 1a001cac <prvCheckTasksWaitingTermination+0x3c>
{
1a001c76:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001c78:	f000 ff64 	bl	1a002b44 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001c7c:	4b0d      	ldr	r3, [pc, #52]	; (1a001cb4 <prvCheckTasksWaitingTermination+0x44>)
1a001c7e:	68db      	ldr	r3, [r3, #12]
1a001c80:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001c82:	1d20      	adds	r0, r4, #4
1a001c84:	f7ff fe92 	bl	1a0019ac <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001c88:	4a0b      	ldr	r2, [pc, #44]	; (1a001cb8 <prvCheckTasksWaitingTermination+0x48>)
1a001c8a:	6813      	ldr	r3, [r2, #0]
1a001c8c:	3b01      	subs	r3, #1
1a001c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001c90:	4a07      	ldr	r2, [pc, #28]	; (1a001cb0 <prvCheckTasksWaitingTermination+0x40>)
1a001c92:	6813      	ldr	r3, [r2, #0]
1a001c94:	3b01      	subs	r3, #1
1a001c96:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001c98:	f000 ff76 	bl	1a002b88 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001c9c:	4620      	mov	r0, r4
1a001c9e:	f7ff ffcb 	bl	1a001c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001ca2:	4b03      	ldr	r3, [pc, #12]	; (1a001cb0 <prvCheckTasksWaitingTermination+0x40>)
1a001ca4:	681b      	ldr	r3, [r3, #0]
1a001ca6:	2b00      	cmp	r3, #0
1a001ca8:	d1e6      	bne.n	1a001c78 <prvCheckTasksWaitingTermination+0x8>
}
1a001caa:	bd10      	pop	{r4, pc}
1a001cac:	4770      	bx	lr
1a001cae:	bf00      	nop
1a001cb0:	100029b8 	.word	0x100029b8
1a001cb4:	10002a28 	.word	0x10002a28
1a001cb8:	100029b4 	.word	0x100029b4

1a001cbc <prvIdleTask>:
{
1a001cbc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001cbe:	f7ff ffd7 	bl	1a001c70 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001cc2:	4b06      	ldr	r3, [pc, #24]	; (1a001cdc <prvIdleTask+0x20>)
1a001cc4:	681b      	ldr	r3, [r3, #0]
1a001cc6:	2b01      	cmp	r3, #1
1a001cc8:	d9f9      	bls.n	1a001cbe <prvIdleTask+0x2>
				taskYIELD();
1a001cca:	4b05      	ldr	r3, [pc, #20]	; (1a001ce0 <prvIdleTask+0x24>)
1a001ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cd0:	601a      	str	r2, [r3, #0]
1a001cd2:	f3bf 8f4f 	dsb	sy
1a001cd6:	f3bf 8f6f 	isb	sy
1a001cda:	e7f0      	b.n	1a001cbe <prvIdleTask+0x2>
1a001cdc:	10002928 	.word	0x10002928
1a001ce0:	e000ed04 	.word	0xe000ed04

1a001ce4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001ce4:	b570      	push	{r4, r5, r6, lr}
1a001ce6:	4604      	mov	r4, r0
1a001ce8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001cea:	4b1d      	ldr	r3, [pc, #116]	; (1a001d60 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001cec:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001cee:	4b1d      	ldr	r3, [pc, #116]	; (1a001d64 <prvAddCurrentTaskToDelayedList+0x80>)
1a001cf0:	6818      	ldr	r0, [r3, #0]
1a001cf2:	3004      	adds	r0, #4
1a001cf4:	f7ff fe5a 	bl	1a0019ac <uxListRemove>
1a001cf8:	b950      	cbnz	r0, 1a001d10 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001cfa:	4b1a      	ldr	r3, [pc, #104]	; (1a001d64 <prvAddCurrentTaskToDelayedList+0x80>)
1a001cfc:	681b      	ldr	r3, [r3, #0]
1a001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001d00:	2301      	movs	r3, #1
1a001d02:	fa03 f202 	lsl.w	r2, r3, r2
1a001d06:	4918      	ldr	r1, [pc, #96]	; (1a001d68 <prvAddCurrentTaskToDelayedList+0x84>)
1a001d08:	680b      	ldr	r3, [r1, #0]
1a001d0a:	ea23 0302 	bic.w	r3, r3, r2
1a001d0e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001d10:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001d14:	d00d      	beq.n	1a001d32 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001d16:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001d18:	4b12      	ldr	r3, [pc, #72]	; (1a001d64 <prvAddCurrentTaskToDelayedList+0x80>)
1a001d1a:	681b      	ldr	r3, [r3, #0]
1a001d1c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001d1e:	42a5      	cmp	r5, r4
1a001d20:	d910      	bls.n	1a001d44 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001d22:	4b12      	ldr	r3, [pc, #72]	; (1a001d6c <prvAddCurrentTaskToDelayedList+0x88>)
1a001d24:	6818      	ldr	r0, [r3, #0]
1a001d26:	4b0f      	ldr	r3, [pc, #60]	; (1a001d64 <prvAddCurrentTaskToDelayedList+0x80>)
1a001d28:	6819      	ldr	r1, [r3, #0]
1a001d2a:	3104      	adds	r1, #4
1a001d2c:	f7ff fe24 	bl	1a001978 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001d30:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001d32:	2e00      	cmp	r6, #0
1a001d34:	d0ef      	beq.n	1a001d16 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001d36:	4b0b      	ldr	r3, [pc, #44]	; (1a001d64 <prvAddCurrentTaskToDelayedList+0x80>)
1a001d38:	6819      	ldr	r1, [r3, #0]
1a001d3a:	3104      	adds	r1, #4
1a001d3c:	480c      	ldr	r0, [pc, #48]	; (1a001d70 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001d3e:	f7ff fe10 	bl	1a001962 <vListInsertEnd>
1a001d42:	e7f5      	b.n	1a001d30 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001d44:	4b0b      	ldr	r3, [pc, #44]	; (1a001d74 <prvAddCurrentTaskToDelayedList+0x90>)
1a001d46:	6818      	ldr	r0, [r3, #0]
1a001d48:	4b06      	ldr	r3, [pc, #24]	; (1a001d64 <prvAddCurrentTaskToDelayedList+0x80>)
1a001d4a:	6819      	ldr	r1, [r3, #0]
1a001d4c:	3104      	adds	r1, #4
1a001d4e:	f7ff fe13 	bl	1a001978 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a001d52:	4b09      	ldr	r3, [pc, #36]	; (1a001d78 <prvAddCurrentTaskToDelayedList+0x94>)
1a001d54:	681b      	ldr	r3, [r3, #0]
1a001d56:	42a3      	cmp	r3, r4
1a001d58:	d9ea      	bls.n	1a001d30 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a001d5a:	4b07      	ldr	r3, [pc, #28]	; (1a001d78 <prvAddCurrentTaskToDelayedList+0x94>)
1a001d5c:	601c      	str	r4, [r3, #0]
}
1a001d5e:	e7e7      	b.n	1a001d30 <prvAddCurrentTaskToDelayedList+0x4c>
1a001d60:	10002a3c 	.word	0x10002a3c
1a001d64:	1000291c 	.word	0x1000291c
1a001d68:	100029c8 	.word	0x100029c8
1a001d6c:	10002924 	.word	0x10002924
1a001d70:	10002a14 	.word	0x10002a14
1a001d74:	10002920 	.word	0x10002920
1a001d78:	100029f4 	.word	0x100029f4

1a001d7c <xTaskCreateStatic>:
	{
1a001d7c:	b570      	push	{r4, r5, r6, lr}
1a001d7e:	b086      	sub	sp, #24
1a001d80:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001d82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001d84:	b175      	cbz	r5, 1a001da4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a001d86:	b1b4      	cbz	r4, 1a001db6 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001d88:	2660      	movs	r6, #96	; 0x60
1a001d8a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001d8c:	9e04      	ldr	r6, [sp, #16]
1a001d8e:	2e60      	cmp	r6, #96	; 0x60
1a001d90:	d01a      	beq.n	1a001dc8 <xTaskCreateStatic+0x4c>
1a001d92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d96:	f383 8811 	msr	BASEPRI, r3
1a001d9a:	f3bf 8f6f 	isb	sy
1a001d9e:	f3bf 8f4f 	dsb	sy
1a001da2:	e7fe      	b.n	1a001da2 <xTaskCreateStatic+0x26>
1a001da4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001da8:	f383 8811 	msr	BASEPRI, r3
1a001dac:	f3bf 8f6f 	isb	sy
1a001db0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a001db4:	e7fe      	b.n	1a001db4 <xTaskCreateStatic+0x38>
1a001db6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dba:	f383 8811 	msr	BASEPRI, r3
1a001dbe:	f3bf 8f6f 	isb	sy
1a001dc2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a001dc6:	e7fe      	b.n	1a001dc6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001dc8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001dca:	2502      	movs	r5, #2
1a001dcc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001dd0:	2500      	movs	r5, #0
1a001dd2:	9503      	str	r5, [sp, #12]
1a001dd4:	9402      	str	r4, [sp, #8]
1a001dd6:	ad05      	add	r5, sp, #20
1a001dd8:	9501      	str	r5, [sp, #4]
1a001dda:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001ddc:	9500      	str	r5, [sp, #0]
1a001dde:	f7ff fe59 	bl	1a001a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001de2:	4620      	mov	r0, r4
1a001de4:	f7ff fed2 	bl	1a001b8c <prvAddNewTaskToReadyList>
	}
1a001de8:	9805      	ldr	r0, [sp, #20]
1a001dea:	b006      	add	sp, #24
1a001dec:	bd70      	pop	{r4, r5, r6, pc}

1a001dee <xTaskCreate>:
	{
1a001dee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001df2:	b085      	sub	sp, #20
1a001df4:	4607      	mov	r7, r0
1a001df6:	4688      	mov	r8, r1
1a001df8:	4615      	mov	r5, r2
1a001dfa:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001dfc:	0090      	lsls	r0, r2, #2
1a001dfe:	f7ff f847 	bl	1a000e90 <pvPortMalloc>
			if( pxStack != NULL )
1a001e02:	b1f8      	cbz	r0, 1a001e44 <xTaskCreate+0x56>
1a001e04:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001e06:	2060      	movs	r0, #96	; 0x60
1a001e08:	f7ff f842 	bl	1a000e90 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001e0c:	4604      	mov	r4, r0
1a001e0e:	b1a8      	cbz	r0, 1a001e3c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a001e10:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001e12:	b1e4      	cbz	r4, 1a001e4e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001e14:	2300      	movs	r3, #0
1a001e16:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001e1a:	9303      	str	r3, [sp, #12]
1a001e1c:	9402      	str	r4, [sp, #8]
1a001e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001e20:	9301      	str	r3, [sp, #4]
1a001e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001e24:	9300      	str	r3, [sp, #0]
1a001e26:	464b      	mov	r3, r9
1a001e28:	462a      	mov	r2, r5
1a001e2a:	4641      	mov	r1, r8
1a001e2c:	4638      	mov	r0, r7
1a001e2e:	f7ff fe31 	bl	1a001a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001e32:	4620      	mov	r0, r4
1a001e34:	f7ff feaa 	bl	1a001b8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001e38:	2001      	movs	r0, #1
1a001e3a:	e005      	b.n	1a001e48 <xTaskCreate+0x5a>
					vPortFree( pxStack );
1a001e3c:	4630      	mov	r0, r6
1a001e3e:	f7ff f85f 	bl	1a000f00 <vPortFree>
1a001e42:	e7e6      	b.n	1a001e12 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a001e48:	b005      	add	sp, #20
1a001e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001e52:	e7f9      	b.n	1a001e48 <xTaskCreate+0x5a>

1a001e54 <vTaskStartScheduler>:
{
1a001e54:	b510      	push	{r4, lr}
1a001e56:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001e58:	2400      	movs	r4, #0
1a001e5a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001e5c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001e5e:	aa07      	add	r2, sp, #28
1a001e60:	a906      	add	r1, sp, #24
1a001e62:	a805      	add	r0, sp, #20
1a001e64:	f7ff fdb6 	bl	1a0019d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001e68:	9b05      	ldr	r3, [sp, #20]
1a001e6a:	9302      	str	r3, [sp, #8]
1a001e6c:	9b06      	ldr	r3, [sp, #24]
1a001e6e:	9301      	str	r3, [sp, #4]
1a001e70:	9400      	str	r4, [sp, #0]
1a001e72:	4623      	mov	r3, r4
1a001e74:	9a07      	ldr	r2, [sp, #28]
1a001e76:	4917      	ldr	r1, [pc, #92]	; (1a001ed4 <vTaskStartScheduler+0x80>)
1a001e78:	4817      	ldr	r0, [pc, #92]	; (1a001ed8 <vTaskStartScheduler+0x84>)
1a001e7a:	f7ff ff7f 	bl	1a001d7c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001e7e:	b140      	cbz	r0, 1a001e92 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001e80:	f000 fc46 	bl	1a002710 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001e84:	2801      	cmp	r0, #1
1a001e86:	d006      	beq.n	1a001e96 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001e88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001e8c:	d018      	beq.n	1a001ec0 <vTaskStartScheduler+0x6c>
}
1a001e8e:	b008      	add	sp, #32
1a001e90:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001e92:	2000      	movs	r0, #0
1a001e94:	e7f6      	b.n	1a001e84 <vTaskStartScheduler+0x30>
1a001e96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e9a:	f383 8811 	msr	BASEPRI, r3
1a001e9e:	f3bf 8f6f 	isb	sy
1a001ea2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001ea6:	4b0d      	ldr	r3, [pc, #52]	; (1a001edc <vTaskStartScheduler+0x88>)
1a001ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001eac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001eae:	4b0c      	ldr	r3, [pc, #48]	; (1a001ee0 <vTaskStartScheduler+0x8c>)
1a001eb0:	2201      	movs	r2, #1
1a001eb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001eb4:	4b0b      	ldr	r3, [pc, #44]	; (1a001ee4 <vTaskStartScheduler+0x90>)
1a001eb6:	2200      	movs	r2, #0
1a001eb8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001eba:	f000 fee5 	bl	1a002c88 <xPortStartScheduler>
1a001ebe:	e7e6      	b.n	1a001e8e <vTaskStartScheduler+0x3a>
1a001ec0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ec4:	f383 8811 	msr	BASEPRI, r3
1a001ec8:	f3bf 8f6f 	isb	sy
1a001ecc:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001ed0:	e7fe      	b.n	1a001ed0 <vTaskStartScheduler+0x7c>
1a001ed2:	bf00      	nop
1a001ed4:	1a0060f8 	.word	0x1a0060f8
1a001ed8:	1a001cbd 	.word	0x1a001cbd
1a001edc:	100029f4 	.word	0x100029f4
1a001ee0:	10002a10 	.word	0x10002a10
1a001ee4:	10002a3c 	.word	0x10002a3c

1a001ee8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001ee8:	4a02      	ldr	r2, [pc, #8]	; (1a001ef4 <vTaskSuspendAll+0xc>)
1a001eea:	6813      	ldr	r3, [r2, #0]
1a001eec:	3301      	adds	r3, #1
1a001eee:	6013      	str	r3, [r2, #0]
}
1a001ef0:	4770      	bx	lr
1a001ef2:	bf00      	nop
1a001ef4:	100029c0 	.word	0x100029c0

1a001ef8 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001ef8:	4b01      	ldr	r3, [pc, #4]	; (1a001f00 <xTaskGetTickCount+0x8>)
1a001efa:	6818      	ldr	r0, [r3, #0]
}
1a001efc:	4770      	bx	lr
1a001efe:	bf00      	nop
1a001f00:	10002a3c 	.word	0x10002a3c

1a001f04 <xTaskIncrementTick>:
{
1a001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001f06:	4b3a      	ldr	r3, [pc, #232]	; (1a001ff0 <xTaskIncrementTick+0xec>)
1a001f08:	681b      	ldr	r3, [r3, #0]
1a001f0a:	2b00      	cmp	r3, #0
1a001f0c:	d164      	bne.n	1a001fd8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001f0e:	4b39      	ldr	r3, [pc, #228]	; (1a001ff4 <xTaskIncrementTick+0xf0>)
1a001f10:	681d      	ldr	r5, [r3, #0]
1a001f12:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001f14:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001f16:	b9c5      	cbnz	r5, 1a001f4a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001f18:	4b37      	ldr	r3, [pc, #220]	; (1a001ff8 <xTaskIncrementTick+0xf4>)
1a001f1a:	681b      	ldr	r3, [r3, #0]
1a001f1c:	681b      	ldr	r3, [r3, #0]
1a001f1e:	b143      	cbz	r3, 1a001f32 <xTaskIncrementTick+0x2e>
1a001f20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f24:	f383 8811 	msr	BASEPRI, r3
1a001f28:	f3bf 8f6f 	isb	sy
1a001f2c:	f3bf 8f4f 	dsb	sy
1a001f30:	e7fe      	b.n	1a001f30 <xTaskIncrementTick+0x2c>
1a001f32:	4a31      	ldr	r2, [pc, #196]	; (1a001ff8 <xTaskIncrementTick+0xf4>)
1a001f34:	6811      	ldr	r1, [r2, #0]
1a001f36:	4b31      	ldr	r3, [pc, #196]	; (1a001ffc <xTaskIncrementTick+0xf8>)
1a001f38:	6818      	ldr	r0, [r3, #0]
1a001f3a:	6010      	str	r0, [r2, #0]
1a001f3c:	6019      	str	r1, [r3, #0]
1a001f3e:	4a30      	ldr	r2, [pc, #192]	; (1a002000 <xTaskIncrementTick+0xfc>)
1a001f40:	6813      	ldr	r3, [r2, #0]
1a001f42:	3301      	adds	r3, #1
1a001f44:	6013      	str	r3, [r2, #0]
1a001f46:	f7ff fd8f 	bl	1a001a68 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001f4a:	4b2e      	ldr	r3, [pc, #184]	; (1a002004 <xTaskIncrementTick+0x100>)
1a001f4c:	681b      	ldr	r3, [r3, #0]
1a001f4e:	42ab      	cmp	r3, r5
1a001f50:	d938      	bls.n	1a001fc4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001f52:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001f54:	4b2c      	ldr	r3, [pc, #176]	; (1a002008 <xTaskIncrementTick+0x104>)
1a001f56:	681b      	ldr	r3, [r3, #0]
1a001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f5e:	009a      	lsls	r2, r3, #2
1a001f60:	4b2a      	ldr	r3, [pc, #168]	; (1a00200c <xTaskIncrementTick+0x108>)
1a001f62:	589b      	ldr	r3, [r3, r2]
1a001f64:	2b01      	cmp	r3, #1
1a001f66:	d93c      	bls.n	1a001fe2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001f68:	2401      	movs	r4, #1
1a001f6a:	e03a      	b.n	1a001fe2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001f6c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001f6e:	4b22      	ldr	r3, [pc, #136]	; (1a001ff8 <xTaskIncrementTick+0xf4>)
1a001f70:	681b      	ldr	r3, [r3, #0]
1a001f72:	681b      	ldr	r3, [r3, #0]
1a001f74:	b343      	cbz	r3, 1a001fc8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001f76:	4b20      	ldr	r3, [pc, #128]	; (1a001ff8 <xTaskIncrementTick+0xf4>)
1a001f78:	681b      	ldr	r3, [r3, #0]
1a001f7a:	68db      	ldr	r3, [r3, #12]
1a001f7c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001f7e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001f80:	429d      	cmp	r5, r3
1a001f82:	d326      	bcc.n	1a001fd2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001f84:	1d37      	adds	r7, r6, #4
1a001f86:	4638      	mov	r0, r7
1a001f88:	f7ff fd10 	bl	1a0019ac <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001f8c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001f8e:	b11b      	cbz	r3, 1a001f98 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001f90:	f106 0018 	add.w	r0, r6, #24
1a001f94:	f7ff fd0a 	bl	1a0019ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001f98:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001f9a:	2201      	movs	r2, #1
1a001f9c:	409a      	lsls	r2, r3
1a001f9e:	491c      	ldr	r1, [pc, #112]	; (1a002010 <xTaskIncrementTick+0x10c>)
1a001fa0:	6808      	ldr	r0, [r1, #0]
1a001fa2:	4302      	orrs	r2, r0
1a001fa4:	600a      	str	r2, [r1, #0]
1a001fa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001faa:	009a      	lsls	r2, r3, #2
1a001fac:	4639      	mov	r1, r7
1a001fae:	4817      	ldr	r0, [pc, #92]	; (1a00200c <xTaskIncrementTick+0x108>)
1a001fb0:	4410      	add	r0, r2
1a001fb2:	f7ff fcd6 	bl	1a001962 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001fb6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001fb8:	4b13      	ldr	r3, [pc, #76]	; (1a002008 <xTaskIncrementTick+0x104>)
1a001fba:	681b      	ldr	r3, [r3, #0]
1a001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001fbe:	429a      	cmp	r2, r3
1a001fc0:	d2d4      	bcs.n	1a001f6c <xTaskIncrementTick+0x68>
1a001fc2:	e7d4      	b.n	1a001f6e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001fc4:	2400      	movs	r4, #0
1a001fc6:	e7d2      	b.n	1a001f6e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001fc8:	4b0e      	ldr	r3, [pc, #56]	; (1a002004 <xTaskIncrementTick+0x100>)
1a001fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001fce:	601a      	str	r2, [r3, #0]
					break;
1a001fd0:	e7c0      	b.n	1a001f54 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001fd2:	4a0c      	ldr	r2, [pc, #48]	; (1a002004 <xTaskIncrementTick+0x100>)
1a001fd4:	6013      	str	r3, [r2, #0]
						break;
1a001fd6:	e7bd      	b.n	1a001f54 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001fd8:	4a0e      	ldr	r2, [pc, #56]	; (1a002014 <xTaskIncrementTick+0x110>)
1a001fda:	6813      	ldr	r3, [r2, #0]
1a001fdc:	3301      	adds	r3, #1
1a001fde:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001fe0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001fe2:	4b0d      	ldr	r3, [pc, #52]	; (1a002018 <xTaskIncrementTick+0x114>)
1a001fe4:	681b      	ldr	r3, [r3, #0]
1a001fe6:	b103      	cbz	r3, 1a001fea <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001fe8:	2401      	movs	r4, #1
}
1a001fea:	4620      	mov	r0, r4
1a001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001fee:	bf00      	nop
1a001ff0:	100029c0 	.word	0x100029c0
1a001ff4:	10002a3c 	.word	0x10002a3c
1a001ff8:	10002920 	.word	0x10002920
1a001ffc:	10002924 	.word	0x10002924
1a002000:	100029f8 	.word	0x100029f8
1a002004:	100029f4 	.word	0x100029f4
1a002008:	1000291c 	.word	0x1000291c
1a00200c:	10002928 	.word	0x10002928
1a002010:	100029c8 	.word	0x100029c8
1a002014:	100029bc 	.word	0x100029bc
1a002018:	10002a40 	.word	0x10002a40

1a00201c <xTaskResumeAll>:
{
1a00201c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00201e:	4b35      	ldr	r3, [pc, #212]	; (1a0020f4 <xTaskResumeAll+0xd8>)
1a002020:	681b      	ldr	r3, [r3, #0]
1a002022:	b943      	cbnz	r3, 1a002036 <xTaskResumeAll+0x1a>
1a002024:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002028:	f383 8811 	msr	BASEPRI, r3
1a00202c:	f3bf 8f6f 	isb	sy
1a002030:	f3bf 8f4f 	dsb	sy
1a002034:	e7fe      	b.n	1a002034 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a002036:	f000 fd85 	bl	1a002b44 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00203a:	4b2e      	ldr	r3, [pc, #184]	; (1a0020f4 <xTaskResumeAll+0xd8>)
1a00203c:	681a      	ldr	r2, [r3, #0]
1a00203e:	3a01      	subs	r2, #1
1a002040:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002042:	681b      	ldr	r3, [r3, #0]
1a002044:	2b00      	cmp	r3, #0
1a002046:	d14d      	bne.n	1a0020e4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a002048:	4b2b      	ldr	r3, [pc, #172]	; (1a0020f8 <xTaskResumeAll+0xdc>)
1a00204a:	681b      	ldr	r3, [r3, #0]
1a00204c:	b90b      	cbnz	r3, 1a002052 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a00204e:	2400      	movs	r4, #0
1a002050:	e049      	b.n	1a0020e6 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a002052:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a002054:	4b29      	ldr	r3, [pc, #164]	; (1a0020fc <xTaskResumeAll+0xe0>)
1a002056:	681b      	ldr	r3, [r3, #0]
1a002058:	b31b      	cbz	r3, 1a0020a2 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00205a:	4b28      	ldr	r3, [pc, #160]	; (1a0020fc <xTaskResumeAll+0xe0>)
1a00205c:	68db      	ldr	r3, [r3, #12]
1a00205e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002060:	f104 0018 	add.w	r0, r4, #24
1a002064:	f7ff fca2 	bl	1a0019ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002068:	1d25      	adds	r5, r4, #4
1a00206a:	4628      	mov	r0, r5
1a00206c:	f7ff fc9e 	bl	1a0019ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002072:	2201      	movs	r2, #1
1a002074:	409a      	lsls	r2, r3
1a002076:	4922      	ldr	r1, [pc, #136]	; (1a002100 <xTaskResumeAll+0xe4>)
1a002078:	6808      	ldr	r0, [r1, #0]
1a00207a:	4302      	orrs	r2, r0
1a00207c:	600a      	str	r2, [r1, #0]
1a00207e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002082:	009a      	lsls	r2, r3, #2
1a002084:	4629      	mov	r1, r5
1a002086:	481f      	ldr	r0, [pc, #124]	; (1a002104 <xTaskResumeAll+0xe8>)
1a002088:	4410      	add	r0, r2
1a00208a:	f7ff fc6a 	bl	1a001962 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00208e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002090:	4b1d      	ldr	r3, [pc, #116]	; (1a002108 <xTaskResumeAll+0xec>)
1a002092:	681b      	ldr	r3, [r3, #0]
1a002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002096:	429a      	cmp	r2, r3
1a002098:	d3dc      	bcc.n	1a002054 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a00209a:	4b1c      	ldr	r3, [pc, #112]	; (1a00210c <xTaskResumeAll+0xf0>)
1a00209c:	2201      	movs	r2, #1
1a00209e:	601a      	str	r2, [r3, #0]
1a0020a0:	e7d8      	b.n	1a002054 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a0020a2:	b10c      	cbz	r4, 1a0020a8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a0020a4:	f7ff fce0 	bl	1a001a68 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0020a8:	4b19      	ldr	r3, [pc, #100]	; (1a002110 <xTaskResumeAll+0xf4>)
1a0020aa:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0020ac:	b974      	cbnz	r4, 1a0020cc <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a0020ae:	4b17      	ldr	r3, [pc, #92]	; (1a00210c <xTaskResumeAll+0xf0>)
1a0020b0:	681b      	ldr	r3, [r3, #0]
1a0020b2:	b1e3      	cbz	r3, 1a0020ee <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a0020b4:	4b17      	ldr	r3, [pc, #92]	; (1a002114 <xTaskResumeAll+0xf8>)
1a0020b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0020ba:	601a      	str	r2, [r3, #0]
1a0020bc:	f3bf 8f4f 	dsb	sy
1a0020c0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0020c4:	2401      	movs	r4, #1
1a0020c6:	e00e      	b.n	1a0020e6 <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0020c8:	3c01      	subs	r4, #1
1a0020ca:	d007      	beq.n	1a0020dc <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a0020cc:	f7ff ff1a 	bl	1a001f04 <xTaskIncrementTick>
1a0020d0:	2800      	cmp	r0, #0
1a0020d2:	d0f9      	beq.n	1a0020c8 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a0020d4:	4b0d      	ldr	r3, [pc, #52]	; (1a00210c <xTaskResumeAll+0xf0>)
1a0020d6:	2201      	movs	r2, #1
1a0020d8:	601a      	str	r2, [r3, #0]
1a0020da:	e7f5      	b.n	1a0020c8 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a0020dc:	4b0c      	ldr	r3, [pc, #48]	; (1a002110 <xTaskResumeAll+0xf4>)
1a0020de:	2200      	movs	r2, #0
1a0020e0:	601a      	str	r2, [r3, #0]
1a0020e2:	e7e4      	b.n	1a0020ae <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a0020e4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0020e6:	f000 fd4f 	bl	1a002b88 <vPortExitCritical>
}
1a0020ea:	4620      	mov	r0, r4
1a0020ec:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a0020ee:	2400      	movs	r4, #0
1a0020f0:	e7f9      	b.n	1a0020e6 <xTaskResumeAll+0xca>
1a0020f2:	bf00      	nop
1a0020f4:	100029c0 	.word	0x100029c0
1a0020f8:	100029b4 	.word	0x100029b4
1a0020fc:	100029fc 	.word	0x100029fc
1a002100:	100029c8 	.word	0x100029c8
1a002104:	10002928 	.word	0x10002928
1a002108:	1000291c 	.word	0x1000291c
1a00210c:	10002a40 	.word	0x10002a40
1a002110:	100029bc 	.word	0x100029bc
1a002114:	e000ed04 	.word	0xe000ed04

1a002118 <vTaskDelay>:
	{
1a002118:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00211a:	b1a8      	cbz	r0, 1a002148 <vTaskDelay+0x30>
1a00211c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a00211e:	4b0f      	ldr	r3, [pc, #60]	; (1a00215c <vTaskDelay+0x44>)
1a002120:	681b      	ldr	r3, [r3, #0]
1a002122:	b143      	cbz	r3, 1a002136 <vTaskDelay+0x1e>
1a002124:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002128:	f383 8811 	msr	BASEPRI, r3
1a00212c:	f3bf 8f6f 	isb	sy
1a002130:	f3bf 8f4f 	dsb	sy
1a002134:	e7fe      	b.n	1a002134 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a002136:	f7ff fed7 	bl	1a001ee8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00213a:	2100      	movs	r1, #0
1a00213c:	4620      	mov	r0, r4
1a00213e:	f7ff fdd1 	bl	1a001ce4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a002142:	f7ff ff6b 	bl	1a00201c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a002146:	b938      	cbnz	r0, 1a002158 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a002148:	4b05      	ldr	r3, [pc, #20]	; (1a002160 <vTaskDelay+0x48>)
1a00214a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00214e:	601a      	str	r2, [r3, #0]
1a002150:	f3bf 8f4f 	dsb	sy
1a002154:	f3bf 8f6f 	isb	sy
	}
1a002158:	bd10      	pop	{r4, pc}
1a00215a:	bf00      	nop
1a00215c:	100029c0 	.word	0x100029c0
1a002160:	e000ed04 	.word	0xe000ed04

1a002164 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a002164:	4b2d      	ldr	r3, [pc, #180]	; (1a00221c <vTaskSwitchContext+0xb8>)
1a002166:	681b      	ldr	r3, [r3, #0]
1a002168:	b11b      	cbz	r3, 1a002172 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a00216a:	4b2d      	ldr	r3, [pc, #180]	; (1a002220 <vTaskSwitchContext+0xbc>)
1a00216c:	2201      	movs	r2, #1
1a00216e:	601a      	str	r2, [r3, #0]
1a002170:	4770      	bx	lr
{
1a002172:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a002174:	4b2a      	ldr	r3, [pc, #168]	; (1a002220 <vTaskSwitchContext+0xbc>)
1a002176:	2200      	movs	r2, #0
1a002178:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a00217a:	4b2a      	ldr	r3, [pc, #168]	; (1a002224 <vTaskSwitchContext+0xc0>)
1a00217c:	681b      	ldr	r3, [r3, #0]
1a00217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a002180:	681a      	ldr	r2, [r3, #0]
1a002182:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002186:	d103      	bne.n	1a002190 <vTaskSwitchContext+0x2c>
1a002188:	685a      	ldr	r2, [r3, #4]
1a00218a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00218e:	d01b      	beq.n	1a0021c8 <vTaskSwitchContext+0x64>
1a002190:	4b24      	ldr	r3, [pc, #144]	; (1a002224 <vTaskSwitchContext+0xc0>)
1a002192:	6818      	ldr	r0, [r3, #0]
1a002194:	6819      	ldr	r1, [r3, #0]
1a002196:	3134      	adds	r1, #52	; 0x34
1a002198:	f7ff fc58 	bl	1a001a4c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00219c:	4b22      	ldr	r3, [pc, #136]	; (1a002228 <vTaskSwitchContext+0xc4>)
1a00219e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0021a0:	fab3 f383 	clz	r3, r3
1a0021a4:	b2db      	uxtb	r3, r3
1a0021a6:	f1c3 031f 	rsb	r3, r3, #31
1a0021aa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0021ae:	008a      	lsls	r2, r1, #2
1a0021b0:	491e      	ldr	r1, [pc, #120]	; (1a00222c <vTaskSwitchContext+0xc8>)
1a0021b2:	588a      	ldr	r2, [r1, r2]
1a0021b4:	b98a      	cbnz	r2, 1a0021da <vTaskSwitchContext+0x76>
	__asm volatile
1a0021b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ba:	f383 8811 	msr	BASEPRI, r3
1a0021be:	f3bf 8f6f 	isb	sy
1a0021c2:	f3bf 8f4f 	dsb	sy
1a0021c6:	e7fe      	b.n	1a0021c6 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0021c8:	689a      	ldr	r2, [r3, #8]
1a0021ca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0021ce:	d1df      	bne.n	1a002190 <vTaskSwitchContext+0x2c>
1a0021d0:	68db      	ldr	r3, [r3, #12]
1a0021d2:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0021d6:	d1db      	bne.n	1a002190 <vTaskSwitchContext+0x2c>
1a0021d8:	e7e0      	b.n	1a00219c <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0021da:	4814      	ldr	r0, [pc, #80]	; (1a00222c <vTaskSwitchContext+0xc8>)
1a0021dc:	009a      	lsls	r2, r3, #2
1a0021de:	18d4      	adds	r4, r2, r3
1a0021e0:	00a1      	lsls	r1, r4, #2
1a0021e2:	4401      	add	r1, r0
1a0021e4:	684c      	ldr	r4, [r1, #4]
1a0021e6:	6864      	ldr	r4, [r4, #4]
1a0021e8:	604c      	str	r4, [r1, #4]
1a0021ea:	441a      	add	r2, r3
1a0021ec:	0091      	lsls	r1, r2, #2
1a0021ee:	3108      	adds	r1, #8
1a0021f0:	4408      	add	r0, r1
1a0021f2:	4284      	cmp	r4, r0
1a0021f4:	d009      	beq.n	1a00220a <vTaskSwitchContext+0xa6>
1a0021f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0021fa:	009a      	lsls	r2, r3, #2
1a0021fc:	4b0b      	ldr	r3, [pc, #44]	; (1a00222c <vTaskSwitchContext+0xc8>)
1a0021fe:	4413      	add	r3, r2
1a002200:	685b      	ldr	r3, [r3, #4]
1a002202:	68da      	ldr	r2, [r3, #12]
1a002204:	4b07      	ldr	r3, [pc, #28]	; (1a002224 <vTaskSwitchContext+0xc0>)
1a002206:	601a      	str	r2, [r3, #0]
}
1a002208:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00220a:	6860      	ldr	r0, [r4, #4]
1a00220c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a002210:	0091      	lsls	r1, r2, #2
1a002212:	4a06      	ldr	r2, [pc, #24]	; (1a00222c <vTaskSwitchContext+0xc8>)
1a002214:	440a      	add	r2, r1
1a002216:	6050      	str	r0, [r2, #4]
1a002218:	e7ed      	b.n	1a0021f6 <vTaskSwitchContext+0x92>
1a00221a:	bf00      	nop
1a00221c:	100029c0 	.word	0x100029c0
1a002220:	10002a40 	.word	0x10002a40
1a002224:	1000291c 	.word	0x1000291c
1a002228:	100029c8 	.word	0x100029c8
1a00222c:	10002928 	.word	0x10002928

1a002230 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a002230:	b158      	cbz	r0, 1a00224a <vTaskPlaceOnEventList+0x1a>
{
1a002232:	b510      	push	{r4, lr}
1a002234:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002236:	4b09      	ldr	r3, [pc, #36]	; (1a00225c <vTaskPlaceOnEventList+0x2c>)
1a002238:	6819      	ldr	r1, [r3, #0]
1a00223a:	3118      	adds	r1, #24
1a00223c:	f7ff fb9c 	bl	1a001978 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a002240:	2101      	movs	r1, #1
1a002242:	4620      	mov	r0, r4
1a002244:	f7ff fd4e 	bl	1a001ce4 <prvAddCurrentTaskToDelayedList>
}
1a002248:	bd10      	pop	{r4, pc}
1a00224a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00224e:	f383 8811 	msr	BASEPRI, r3
1a002252:	f3bf 8f6f 	isb	sy
1a002256:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a00225a:	e7fe      	b.n	1a00225a <vTaskPlaceOnEventList+0x2a>
1a00225c:	1000291c 	.word	0x1000291c

1a002260 <vTaskPlaceOnEventListRestricted>:
	{
1a002260:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a002262:	b170      	cbz	r0, 1a002282 <vTaskPlaceOnEventListRestricted+0x22>
1a002264:	460c      	mov	r4, r1
1a002266:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002268:	4a0a      	ldr	r2, [pc, #40]	; (1a002294 <vTaskPlaceOnEventListRestricted+0x34>)
1a00226a:	6811      	ldr	r1, [r2, #0]
1a00226c:	3118      	adds	r1, #24
1a00226e:	f7ff fb78 	bl	1a001962 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a002272:	b10d      	cbz	r5, 1a002278 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a002274:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a002278:	4629      	mov	r1, r5
1a00227a:	4620      	mov	r0, r4
1a00227c:	f7ff fd32 	bl	1a001ce4 <prvAddCurrentTaskToDelayedList>
	}
1a002280:	bd38      	pop	{r3, r4, r5, pc}
1a002282:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002286:	f383 8811 	msr	BASEPRI, r3
1a00228a:	f3bf 8f6f 	isb	sy
1a00228e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a002292:	e7fe      	b.n	1a002292 <vTaskPlaceOnEventListRestricted+0x32>
1a002294:	1000291c 	.word	0x1000291c

1a002298 <xTaskRemoveFromEventList>:
{
1a002298:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00229a:	68c3      	ldr	r3, [r0, #12]
1a00229c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a00229e:	b324      	cbz	r4, 1a0022ea <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0022a0:	f104 0518 	add.w	r5, r4, #24
1a0022a4:	4628      	mov	r0, r5
1a0022a6:	f7ff fb81 	bl	1a0019ac <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0022aa:	4b18      	ldr	r3, [pc, #96]	; (1a00230c <xTaskRemoveFromEventList+0x74>)
1a0022ac:	681b      	ldr	r3, [r3, #0]
1a0022ae:	bb2b      	cbnz	r3, 1a0022fc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0022b0:	1d25      	adds	r5, r4, #4
1a0022b2:	4628      	mov	r0, r5
1a0022b4:	f7ff fb7a 	bl	1a0019ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0022b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0022ba:	2201      	movs	r2, #1
1a0022bc:	409a      	lsls	r2, r3
1a0022be:	4914      	ldr	r1, [pc, #80]	; (1a002310 <xTaskRemoveFromEventList+0x78>)
1a0022c0:	6808      	ldr	r0, [r1, #0]
1a0022c2:	4302      	orrs	r2, r0
1a0022c4:	600a      	str	r2, [r1, #0]
1a0022c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0022ca:	009a      	lsls	r2, r3, #2
1a0022cc:	4629      	mov	r1, r5
1a0022ce:	4811      	ldr	r0, [pc, #68]	; (1a002314 <xTaskRemoveFromEventList+0x7c>)
1a0022d0:	4410      	add	r0, r2
1a0022d2:	f7ff fb46 	bl	1a001962 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0022d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0022d8:	4b0f      	ldr	r3, [pc, #60]	; (1a002318 <xTaskRemoveFromEventList+0x80>)
1a0022da:	681b      	ldr	r3, [r3, #0]
1a0022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0022de:	429a      	cmp	r2, r3
1a0022e0:	d911      	bls.n	1a002306 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0022e2:	2001      	movs	r0, #1
1a0022e4:	4b0d      	ldr	r3, [pc, #52]	; (1a00231c <xTaskRemoveFromEventList+0x84>)
1a0022e6:	6018      	str	r0, [r3, #0]
1a0022e8:	e00e      	b.n	1a002308 <xTaskRemoveFromEventList+0x70>
1a0022ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022ee:	f383 8811 	msr	BASEPRI, r3
1a0022f2:	f3bf 8f6f 	isb	sy
1a0022f6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a0022fa:	e7fe      	b.n	1a0022fa <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0022fc:	4629      	mov	r1, r5
1a0022fe:	4808      	ldr	r0, [pc, #32]	; (1a002320 <xTaskRemoveFromEventList+0x88>)
1a002300:	f7ff fb2f 	bl	1a001962 <vListInsertEnd>
1a002304:	e7e7      	b.n	1a0022d6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a002306:	2000      	movs	r0, #0
}
1a002308:	bd38      	pop	{r3, r4, r5, pc}
1a00230a:	bf00      	nop
1a00230c:	100029c0 	.word	0x100029c0
1a002310:	100029c8 	.word	0x100029c8
1a002314:	10002928 	.word	0x10002928
1a002318:	1000291c 	.word	0x1000291c
1a00231c:	10002a40 	.word	0x10002a40
1a002320:	100029fc 	.word	0x100029fc

1a002324 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a002324:	4b03      	ldr	r3, [pc, #12]	; (1a002334 <vTaskInternalSetTimeOutState+0x10>)
1a002326:	681b      	ldr	r3, [r3, #0]
1a002328:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00232a:	4b03      	ldr	r3, [pc, #12]	; (1a002338 <vTaskInternalSetTimeOutState+0x14>)
1a00232c:	681b      	ldr	r3, [r3, #0]
1a00232e:	6043      	str	r3, [r0, #4]
}
1a002330:	4770      	bx	lr
1a002332:	bf00      	nop
1a002334:	100029f8 	.word	0x100029f8
1a002338:	10002a3c 	.word	0x10002a3c

1a00233c <xTaskCheckForTimeOut>:
{
1a00233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a00233e:	b1c8      	cbz	r0, 1a002374 <xTaskCheckForTimeOut+0x38>
1a002340:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a002342:	b301      	cbz	r1, 1a002386 <xTaskCheckForTimeOut+0x4a>
1a002344:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a002346:	f000 fbfd 	bl	1a002b44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a00234a:	4b1b      	ldr	r3, [pc, #108]	; (1a0023b8 <xTaskCheckForTimeOut+0x7c>)
1a00234c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00234e:	686b      	ldr	r3, [r5, #4]
1a002350:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a002352:	6822      	ldr	r2, [r4, #0]
1a002354:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a002358:	d026      	beq.n	1a0023a8 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a00235a:	682f      	ldr	r7, [r5, #0]
1a00235c:	4e17      	ldr	r6, [pc, #92]	; (1a0023bc <xTaskCheckForTimeOut+0x80>)
1a00235e:	6836      	ldr	r6, [r6, #0]
1a002360:	42b7      	cmp	r7, r6
1a002362:	d001      	beq.n	1a002368 <xTaskCheckForTimeOut+0x2c>
1a002364:	428b      	cmp	r3, r1
1a002366:	d924      	bls.n	1a0023b2 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002368:	4282      	cmp	r2, r0
1a00236a:	d815      	bhi.n	1a002398 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a00236c:	2300      	movs	r3, #0
1a00236e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002370:	2401      	movs	r4, #1
1a002372:	e01a      	b.n	1a0023aa <xTaskCheckForTimeOut+0x6e>
1a002374:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002378:	f383 8811 	msr	BASEPRI, r3
1a00237c:	f3bf 8f6f 	isb	sy
1a002380:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a002384:	e7fe      	b.n	1a002384 <xTaskCheckForTimeOut+0x48>
1a002386:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00238a:	f383 8811 	msr	BASEPRI, r3
1a00238e:	f3bf 8f6f 	isb	sy
1a002392:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a002396:	e7fe      	b.n	1a002396 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a002398:	1a5b      	subs	r3, r3, r1
1a00239a:	4413      	add	r3, r2
1a00239c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a00239e:	4628      	mov	r0, r5
1a0023a0:	f7ff ffc0 	bl	1a002324 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0023a4:	2400      	movs	r4, #0
1a0023a6:	e000      	b.n	1a0023aa <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a0023a8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0023aa:	f000 fbed 	bl	1a002b88 <vPortExitCritical>
}
1a0023ae:	4620      	mov	r0, r4
1a0023b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a0023b2:	2401      	movs	r4, #1
1a0023b4:	e7f9      	b.n	1a0023aa <xTaskCheckForTimeOut+0x6e>
1a0023b6:	bf00      	nop
1a0023b8:	10002a3c 	.word	0x10002a3c
1a0023bc:	100029f8 	.word	0x100029f8

1a0023c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0023c0:	4b01      	ldr	r3, [pc, #4]	; (1a0023c8 <vTaskMissedYield+0x8>)
1a0023c2:	2201      	movs	r2, #1
1a0023c4:	601a      	str	r2, [r3, #0]
}
1a0023c6:	4770      	bx	lr
1a0023c8:	10002a40 	.word	0x10002a40

1a0023cc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0023cc:	4b05      	ldr	r3, [pc, #20]	; (1a0023e4 <xTaskGetSchedulerState+0x18>)
1a0023ce:	681b      	ldr	r3, [r3, #0]
1a0023d0:	b133      	cbz	r3, 1a0023e0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0023d2:	4b05      	ldr	r3, [pc, #20]	; (1a0023e8 <xTaskGetSchedulerState+0x1c>)
1a0023d4:	681b      	ldr	r3, [r3, #0]
1a0023d6:	b10b      	cbz	r3, 1a0023dc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a0023d8:	2000      	movs	r0, #0
	}
1a0023da:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0023dc:	2002      	movs	r0, #2
1a0023de:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0023e0:	2001      	movs	r0, #1
1a0023e2:	4770      	bx	lr
1a0023e4:	10002a10 	.word	0x10002a10
1a0023e8:	100029c0 	.word	0x100029c0

1a0023ec <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a0023ec:	2800      	cmp	r0, #0
1a0023ee:	d050      	beq.n	1a002492 <xTaskPriorityInherit+0xa6>
	{
1a0023f0:	b538      	push	{r3, r4, r5, lr}
1a0023f2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a0023f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a0023f6:	4929      	ldr	r1, [pc, #164]	; (1a00249c <xTaskPriorityInherit+0xb0>)
1a0023f8:	6809      	ldr	r1, [r1, #0]
1a0023fa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0023fc:	428a      	cmp	r2, r1
1a0023fe:	d240      	bcs.n	1a002482 <xTaskPriorityInherit+0x96>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002400:	6981      	ldr	r1, [r0, #24]
1a002402:	2900      	cmp	r1, #0
1a002404:	db05      	blt.n	1a002412 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002406:	4925      	ldr	r1, [pc, #148]	; (1a00249c <xTaskPriorityInherit+0xb0>)
1a002408:	6809      	ldr	r1, [r1, #0]
1a00240a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a00240c:	f1c1 0107 	rsb	r1, r1, #7
1a002410:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a002412:	6960      	ldr	r0, [r4, #20]
1a002414:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a002418:	0091      	lsls	r1, r2, #2
1a00241a:	4a21      	ldr	r2, [pc, #132]	; (1a0024a0 <xTaskPriorityInherit+0xb4>)
1a00241c:	440a      	add	r2, r1
1a00241e:	4290      	cmp	r0, r2
1a002420:	d005      	beq.n	1a00242e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002422:	4a1e      	ldr	r2, [pc, #120]	; (1a00249c <xTaskPriorityInherit+0xb0>)
1a002424:	6812      	ldr	r2, [r2, #0]
1a002426:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a002428:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a00242a:	2001      	movs	r0, #1
	}
1a00242c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00242e:	1d25      	adds	r5, r4, #4
1a002430:	4628      	mov	r0, r5
1a002432:	f7ff fabb 	bl	1a0019ac <uxListRemove>
1a002436:	b1a0      	cbz	r0, 1a002462 <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002438:	4b18      	ldr	r3, [pc, #96]	; (1a00249c <xTaskPriorityInherit+0xb0>)
1a00243a:	681b      	ldr	r3, [r3, #0]
1a00243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00243e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002440:	2401      	movs	r4, #1
1a002442:	fa04 f203 	lsl.w	r2, r4, r3
1a002446:	4917      	ldr	r1, [pc, #92]	; (1a0024a4 <xTaskPriorityInherit+0xb8>)
1a002448:	6808      	ldr	r0, [r1, #0]
1a00244a:	4302      	orrs	r2, r0
1a00244c:	600a      	str	r2, [r1, #0]
1a00244e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002452:	009a      	lsls	r2, r3, #2
1a002454:	4629      	mov	r1, r5
1a002456:	4812      	ldr	r0, [pc, #72]	; (1a0024a0 <xTaskPriorityInherit+0xb4>)
1a002458:	4410      	add	r0, r2
1a00245a:	f7ff fa82 	bl	1a001962 <vListInsertEnd>
				xReturn = pdTRUE;
1a00245e:	4620      	mov	r0, r4
1a002460:	e7e4      	b.n	1a00242c <xTaskPriorityInherit+0x40>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a002462:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002464:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002468:	008a      	lsls	r2, r1, #2
1a00246a:	490d      	ldr	r1, [pc, #52]	; (1a0024a0 <xTaskPriorityInherit+0xb4>)
1a00246c:	588a      	ldr	r2, [r1, r2]
1a00246e:	2a00      	cmp	r2, #0
1a002470:	d1e2      	bne.n	1a002438 <xTaskPriorityInherit+0x4c>
1a002472:	2201      	movs	r2, #1
1a002474:	409a      	lsls	r2, r3
1a002476:	490b      	ldr	r1, [pc, #44]	; (1a0024a4 <xTaskPriorityInherit+0xb8>)
1a002478:	680b      	ldr	r3, [r1, #0]
1a00247a:	ea23 0302 	bic.w	r3, r3, r2
1a00247e:	600b      	str	r3, [r1, #0]
1a002480:	e7da      	b.n	1a002438 <xTaskPriorityInherit+0x4c>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a002482:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a002484:	4b05      	ldr	r3, [pc, #20]	; (1a00249c <xTaskPriorityInherit+0xb0>)
1a002486:	681b      	ldr	r3, [r3, #0]
1a002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00248a:	429a      	cmp	r2, r3
1a00248c:	d303      	bcc.n	1a002496 <xTaskPriorityInherit+0xaa>
	BaseType_t xReturn = pdFALSE;
1a00248e:	2000      	movs	r0, #0
1a002490:	e7cc      	b.n	1a00242c <xTaskPriorityInherit+0x40>
1a002492:	2000      	movs	r0, #0
	}
1a002494:	4770      	bx	lr
					xReturn = pdTRUE;
1a002496:	2001      	movs	r0, #1
		return xReturn;
1a002498:	e7c8      	b.n	1a00242c <xTaskPriorityInherit+0x40>
1a00249a:	bf00      	nop
1a00249c:	1000291c 	.word	0x1000291c
1a0024a0:	10002928 	.word	0x10002928
1a0024a4:	100029c8 	.word	0x100029c8

1a0024a8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a0024a8:	2800      	cmp	r0, #0
1a0024aa:	d04c      	beq.n	1a002546 <xTaskPriorityDisinherit+0x9e>
	{
1a0024ac:	b538      	push	{r3, r4, r5, lr}
1a0024ae:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0024b0:	4a27      	ldr	r2, [pc, #156]	; (1a002550 <xTaskPriorityDisinherit+0xa8>)
1a0024b2:	6812      	ldr	r2, [r2, #0]
1a0024b4:	4282      	cmp	r2, r0
1a0024b6:	d008      	beq.n	1a0024ca <xTaskPriorityDisinherit+0x22>
1a0024b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024bc:	f383 8811 	msr	BASEPRI, r3
1a0024c0:	f3bf 8f6f 	isb	sy
1a0024c4:	f3bf 8f4f 	dsb	sy
1a0024c8:	e7fe      	b.n	1a0024c8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0024ca:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0024cc:	b942      	cbnz	r2, 1a0024e0 <xTaskPriorityDisinherit+0x38>
1a0024ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024d2:	f383 8811 	msr	BASEPRI, r3
1a0024d6:	f3bf 8f6f 	isb	sy
1a0024da:	f3bf 8f4f 	dsb	sy
1a0024de:	e7fe      	b.n	1a0024de <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0024e0:	3a01      	subs	r2, #1
1a0024e2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0024e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0024e6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0024e8:	4288      	cmp	r0, r1
1a0024ea:	d02e      	beq.n	1a00254a <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0024ec:	b10a      	cbz	r2, 1a0024f2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a0024ee:	2000      	movs	r0, #0
	}
1a0024f0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0024f2:	1d25      	adds	r5, r4, #4
1a0024f4:	4628      	mov	r0, r5
1a0024f6:	f7ff fa59 	bl	1a0019ac <uxListRemove>
1a0024fa:	b970      	cbnz	r0, 1a00251a <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0024fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0024fe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a002502:	008b      	lsls	r3, r1, #2
1a002504:	4913      	ldr	r1, [pc, #76]	; (1a002554 <xTaskPriorityDisinherit+0xac>)
1a002506:	58cb      	ldr	r3, [r1, r3]
1a002508:	b93b      	cbnz	r3, 1a00251a <xTaskPriorityDisinherit+0x72>
1a00250a:	2301      	movs	r3, #1
1a00250c:	fa03 f202 	lsl.w	r2, r3, r2
1a002510:	4911      	ldr	r1, [pc, #68]	; (1a002558 <xTaskPriorityDisinherit+0xb0>)
1a002512:	680b      	ldr	r3, [r1, #0]
1a002514:	ea23 0302 	bic.w	r3, r3, r2
1a002518:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00251a:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00251c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00251e:	f1c3 0207 	rsb	r2, r3, #7
1a002522:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002524:	2401      	movs	r4, #1
1a002526:	fa04 f203 	lsl.w	r2, r4, r3
1a00252a:	490b      	ldr	r1, [pc, #44]	; (1a002558 <xTaskPriorityDisinherit+0xb0>)
1a00252c:	6808      	ldr	r0, [r1, #0]
1a00252e:	4302      	orrs	r2, r0
1a002530:	600a      	str	r2, [r1, #0]
1a002532:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002536:	009a      	lsls	r2, r3, #2
1a002538:	4629      	mov	r1, r5
1a00253a:	4806      	ldr	r0, [pc, #24]	; (1a002554 <xTaskPriorityDisinherit+0xac>)
1a00253c:	4410      	add	r0, r2
1a00253e:	f7ff fa10 	bl	1a001962 <vListInsertEnd>
					xReturn = pdTRUE;
1a002542:	4620      	mov	r0, r4
1a002544:	e7d4      	b.n	1a0024f0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a002546:	2000      	movs	r0, #0
	}
1a002548:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a00254a:	2000      	movs	r0, #0
1a00254c:	e7d0      	b.n	1a0024f0 <xTaskPriorityDisinherit+0x48>
1a00254e:	bf00      	nop
1a002550:	1000291c 	.word	0x1000291c
1a002554:	10002928 	.word	0x10002928
1a002558:	100029c8 	.word	0x100029c8

1a00255c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a00255c:	2800      	cmp	r0, #0
1a00255e:	d056      	beq.n	1a00260e <vTaskPriorityDisinheritAfterTimeout+0xb2>
	{
1a002560:	b538      	push	{r3, r4, r5, lr}
1a002562:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a002564:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a002566:	b940      	cbnz	r0, 1a00257a <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002568:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00256c:	f383 8811 	msr	BASEPRI, r3
1a002570:	f3bf 8f6f 	isb	sy
1a002574:	f3bf 8f4f 	dsb	sy
1a002578:	e7fe      	b.n	1a002578 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a00257a:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a00257c:	428a      	cmp	r2, r1
1a00257e:	d200      	bcs.n	1a002582 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a002580:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a002582:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a002584:	4291      	cmp	r1, r2
1a002586:	d001      	beq.n	1a00258c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002588:	2801      	cmp	r0, #1
1a00258a:	d000      	beq.n	1a00258e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a00258c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a00258e:	4820      	ldr	r0, [pc, #128]	; (1a002610 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a002590:	6800      	ldr	r0, [r0, #0]
1a002592:	42a0      	cmp	r0, r4
1a002594:	d032      	beq.n	1a0025fc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					pxTCB->uxPriority = uxPriorityToUse;
1a002596:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002598:	69a0      	ldr	r0, [r4, #24]
1a00259a:	2800      	cmp	r0, #0
1a00259c:	db02      	blt.n	1a0025a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00259e:	f1c2 0207 	rsb	r2, r2, #7
1a0025a2:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0025a4:	6963      	ldr	r3, [r4, #20]
1a0025a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a0025aa:	0088      	lsls	r0, r1, #2
1a0025ac:	4a19      	ldr	r2, [pc, #100]	; (1a002614 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0025ae:	4402      	add	r2, r0
1a0025b0:	4293      	cmp	r3, r2
1a0025b2:	d1eb      	bne.n	1a00258c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0025b4:	1d25      	adds	r5, r4, #4
1a0025b6:	4628      	mov	r0, r5
1a0025b8:	f7ff f9f8 	bl	1a0019ac <uxListRemove>
1a0025bc:	b970      	cbnz	r0, 1a0025dc <vTaskPriorityDisinheritAfterTimeout+0x80>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0025be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0025c0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0025c4:	008b      	lsls	r3, r1, #2
1a0025c6:	4913      	ldr	r1, [pc, #76]	; (1a002614 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0025c8:	58cb      	ldr	r3, [r1, r3]
1a0025ca:	b93b      	cbnz	r3, 1a0025dc <vTaskPriorityDisinheritAfterTimeout+0x80>
1a0025cc:	2301      	movs	r3, #1
1a0025ce:	fa03 f202 	lsl.w	r2, r3, r2
1a0025d2:	4911      	ldr	r1, [pc, #68]	; (1a002618 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0025d4:	680b      	ldr	r3, [r1, #0]
1a0025d6:	ea23 0302 	bic.w	r3, r3, r2
1a0025da:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a0025dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0025de:	2201      	movs	r2, #1
1a0025e0:	409a      	lsls	r2, r3
1a0025e2:	490d      	ldr	r1, [pc, #52]	; (1a002618 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0025e4:	6808      	ldr	r0, [r1, #0]
1a0025e6:	4302      	orrs	r2, r0
1a0025e8:	600a      	str	r2, [r1, #0]
1a0025ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0025ee:	009a      	lsls	r2, r3, #2
1a0025f0:	4629      	mov	r1, r5
1a0025f2:	4808      	ldr	r0, [pc, #32]	; (1a002614 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0025f4:	4410      	add	r0, r2
1a0025f6:	f7ff f9b4 	bl	1a001962 <vListInsertEnd>
	}
1a0025fa:	e7c7      	b.n	1a00258c <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0025fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002600:	f383 8811 	msr	BASEPRI, r3
1a002604:	f3bf 8f6f 	isb	sy
1a002608:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
1a00260c:	e7fe      	b.n	1a00260c <vTaskPriorityDisinheritAfterTimeout+0xb0>
1a00260e:	4770      	bx	lr
1a002610:	1000291c 	.word	0x1000291c
1a002614:	10002928 	.word	0x10002928
1a002618:	100029c8 	.word	0x100029c8

1a00261c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a00261c:	4b05      	ldr	r3, [pc, #20]	; (1a002634 <pvTaskIncrementMutexHeldCount+0x18>)
1a00261e:	681b      	ldr	r3, [r3, #0]
1a002620:	b123      	cbz	r3, 1a00262c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a002622:	4b04      	ldr	r3, [pc, #16]	; (1a002634 <pvTaskIncrementMutexHeldCount+0x18>)
1a002624:	681a      	ldr	r2, [r3, #0]
1a002626:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002628:	3301      	adds	r3, #1
1a00262a:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a00262c:	4b01      	ldr	r3, [pc, #4]	; (1a002634 <pvTaskIncrementMutexHeldCount+0x18>)
1a00262e:	6818      	ldr	r0, [r3, #0]
	}
1a002630:	4770      	bx	lr
1a002632:	bf00      	nop
1a002634:	1000291c 	.word	0x1000291c

1a002638 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002638:	4b06      	ldr	r3, [pc, #24]	; (1a002654 <prvGetNextExpireTime+0x1c>)
1a00263a:	681a      	ldr	r2, [r3, #0]
1a00263c:	6813      	ldr	r3, [r2, #0]
1a00263e:	fab3 f383 	clz	r3, r3
1a002642:	095b      	lsrs	r3, r3, #5
1a002644:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002646:	b913      	cbnz	r3, 1a00264e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002648:	68d3      	ldr	r3, [r2, #12]
1a00264a:	6818      	ldr	r0, [r3, #0]
1a00264c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00264e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002650:	4770      	bx	lr
1a002652:	bf00      	nop
1a002654:	10002a44 	.word	0x10002a44

1a002658 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002658:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00265a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00265c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00265e:	4291      	cmp	r1, r2
1a002660:	d80c      	bhi.n	1a00267c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002662:	1ad2      	subs	r2, r2, r3
1a002664:	6983      	ldr	r3, [r0, #24]
1a002666:	429a      	cmp	r2, r3
1a002668:	d301      	bcc.n	1a00266e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00266a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a00266c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00266e:	1d01      	adds	r1, r0, #4
1a002670:	4b09      	ldr	r3, [pc, #36]	; (1a002698 <prvInsertTimerInActiveList+0x40>)
1a002672:	6818      	ldr	r0, [r3, #0]
1a002674:	f7ff f980 	bl	1a001978 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002678:	2000      	movs	r0, #0
1a00267a:	e7f7      	b.n	1a00266c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00267c:	429a      	cmp	r2, r3
1a00267e:	d201      	bcs.n	1a002684 <prvInsertTimerInActiveList+0x2c>
1a002680:	4299      	cmp	r1, r3
1a002682:	d206      	bcs.n	1a002692 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002684:	1d01      	adds	r1, r0, #4
1a002686:	4b05      	ldr	r3, [pc, #20]	; (1a00269c <prvInsertTimerInActiveList+0x44>)
1a002688:	6818      	ldr	r0, [r3, #0]
1a00268a:	f7ff f975 	bl	1a001978 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00268e:	2000      	movs	r0, #0
1a002690:	e7ec      	b.n	1a00266c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a002692:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002694:	e7ea      	b.n	1a00266c <prvInsertTimerInActiveList+0x14>
1a002696:	bf00      	nop
1a002698:	10002a48 	.word	0x10002a48
1a00269c:	10002a44 	.word	0x10002a44

1a0026a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0026a0:	b530      	push	{r4, r5, lr}
1a0026a2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0026a4:	f000 fa4e 	bl	1a002b44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0026a8:	4b11      	ldr	r3, [pc, #68]	; (1a0026f0 <prvCheckForValidListAndQueue+0x50>)
1a0026aa:	681b      	ldr	r3, [r3, #0]
1a0026ac:	b11b      	cbz	r3, 1a0026b6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0026ae:	f000 fa6b 	bl	1a002b88 <vPortExitCritical>
}
1a0026b2:	b003      	add	sp, #12
1a0026b4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0026b6:	4d0f      	ldr	r5, [pc, #60]	; (1a0026f4 <prvCheckForValidListAndQueue+0x54>)
1a0026b8:	4628      	mov	r0, r5
1a0026ba:	f7ff f944 	bl	1a001946 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0026be:	4c0e      	ldr	r4, [pc, #56]	; (1a0026f8 <prvCheckForValidListAndQueue+0x58>)
1a0026c0:	4620      	mov	r0, r4
1a0026c2:	f7ff f940 	bl	1a001946 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0026c6:	4b0d      	ldr	r3, [pc, #52]	; (1a0026fc <prvCheckForValidListAndQueue+0x5c>)
1a0026c8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0026ca:	4b0d      	ldr	r3, [pc, #52]	; (1a002700 <prvCheckForValidListAndQueue+0x60>)
1a0026cc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0026ce:	2300      	movs	r3, #0
1a0026d0:	9300      	str	r3, [sp, #0]
1a0026d2:	4b0c      	ldr	r3, [pc, #48]	; (1a002704 <prvCheckForValidListAndQueue+0x64>)
1a0026d4:	4a0c      	ldr	r2, [pc, #48]	; (1a002708 <prvCheckForValidListAndQueue+0x68>)
1a0026d6:	2110      	movs	r1, #16
1a0026d8:	200a      	movs	r0, #10
1a0026da:	f7fe fd18 	bl	1a00110e <xQueueGenericCreateStatic>
1a0026de:	4b04      	ldr	r3, [pc, #16]	; (1a0026f0 <prvCheckForValidListAndQueue+0x50>)
1a0026e0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0026e2:	2800      	cmp	r0, #0
1a0026e4:	d0e3      	beq.n	1a0026ae <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0026e6:	4909      	ldr	r1, [pc, #36]	; (1a00270c <prvCheckForValidListAndQueue+0x6c>)
1a0026e8:	f7ff f8f0 	bl	1a0018cc <vQueueAddToRegistry>
1a0026ec:	e7df      	b.n	1a0026ae <prvCheckForValidListAndQueue+0xe>
1a0026ee:	bf00      	nop
1a0026f0:	10002b68 	.word	0x10002b68
1a0026f4:	10002aec 	.word	0x10002aec
1a0026f8:	10002b00 	.word	0x10002b00
1a0026fc:	10002a44 	.word	0x10002a44
1a002700:	10002a48 	.word	0x10002a48
1a002704:	10002b18 	.word	0x10002b18
1a002708:	10002a4c 	.word	0x10002a4c
1a00270c:	1a006100 	.word	0x1a006100

1a002710 <xTimerCreateTimerTask>:
{
1a002710:	b510      	push	{r4, lr}
1a002712:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002714:	f7ff ffc4 	bl	1a0026a0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002718:	4b12      	ldr	r3, [pc, #72]	; (1a002764 <xTimerCreateTimerTask+0x54>)
1a00271a:	681b      	ldr	r3, [r3, #0]
1a00271c:	b1cb      	cbz	r3, 1a002752 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00271e:	2400      	movs	r4, #0
1a002720:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002722:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002724:	aa07      	add	r2, sp, #28
1a002726:	a906      	add	r1, sp, #24
1a002728:	a805      	add	r0, sp, #20
1a00272a:	f7ff f95f 	bl	1a0019ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00272e:	9b05      	ldr	r3, [sp, #20]
1a002730:	9302      	str	r3, [sp, #8]
1a002732:	9b06      	ldr	r3, [sp, #24]
1a002734:	9301      	str	r3, [sp, #4]
1a002736:	2304      	movs	r3, #4
1a002738:	9300      	str	r3, [sp, #0]
1a00273a:	4623      	mov	r3, r4
1a00273c:	9a07      	ldr	r2, [sp, #28]
1a00273e:	490a      	ldr	r1, [pc, #40]	; (1a002768 <xTimerCreateTimerTask+0x58>)
1a002740:	480a      	ldr	r0, [pc, #40]	; (1a00276c <xTimerCreateTimerTask+0x5c>)
1a002742:	f7ff fb1b 	bl	1a001d7c <xTaskCreateStatic>
1a002746:	4b0a      	ldr	r3, [pc, #40]	; (1a002770 <xTimerCreateTimerTask+0x60>)
1a002748:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00274a:	b110      	cbz	r0, 1a002752 <xTimerCreateTimerTask+0x42>
}
1a00274c:	2001      	movs	r0, #1
1a00274e:	b008      	add	sp, #32
1a002750:	bd10      	pop	{r4, pc}
1a002752:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002756:	f383 8811 	msr	BASEPRI, r3
1a00275a:	f3bf 8f6f 	isb	sy
1a00275e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a002762:	e7fe      	b.n	1a002762 <xTimerCreateTimerTask+0x52>
1a002764:	10002b68 	.word	0x10002b68
1a002768:	1a006108 	.word	0x1a006108
1a00276c:	1a002a55 	.word	0x1a002a55
1a002770:	10002b6c 	.word	0x10002b6c

1a002774 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002774:	b1c0      	cbz	r0, 1a0027a8 <xTimerGenericCommand+0x34>
{
1a002776:	b530      	push	{r4, r5, lr}
1a002778:	b085      	sub	sp, #20
1a00277a:	4615      	mov	r5, r2
1a00277c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00277e:	4a17      	ldr	r2, [pc, #92]	; (1a0027dc <xTimerGenericCommand+0x68>)
1a002780:	6810      	ldr	r0, [r2, #0]
1a002782:	b340      	cbz	r0, 1a0027d6 <xTimerGenericCommand+0x62>
1a002784:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002786:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002788:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00278a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a00278c:	2905      	cmp	r1, #5
1a00278e:	dc1c      	bgt.n	1a0027ca <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002790:	f7ff fe1c 	bl	1a0023cc <xTaskGetSchedulerState>
1a002794:	2802      	cmp	r0, #2
1a002796:	d010      	beq.n	1a0027ba <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002798:	2300      	movs	r3, #0
1a00279a:	461a      	mov	r2, r3
1a00279c:	4669      	mov	r1, sp
1a00279e:	480f      	ldr	r0, [pc, #60]	; (1a0027dc <xTimerGenericCommand+0x68>)
1a0027a0:	6800      	ldr	r0, [r0, #0]
1a0027a2:	f7fe fd25 	bl	1a0011f0 <xQueueGenericSend>
1a0027a6:	e014      	b.n	1a0027d2 <xTimerGenericCommand+0x5e>
1a0027a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027ac:	f383 8811 	msr	BASEPRI, r3
1a0027b0:	f3bf 8f6f 	isb	sy
1a0027b4:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a0027b8:	e7fe      	b.n	1a0027b8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0027ba:	2300      	movs	r3, #0
1a0027bc:	9a08      	ldr	r2, [sp, #32]
1a0027be:	4669      	mov	r1, sp
1a0027c0:	4806      	ldr	r0, [pc, #24]	; (1a0027dc <xTimerGenericCommand+0x68>)
1a0027c2:	6800      	ldr	r0, [r0, #0]
1a0027c4:	f7fe fd14 	bl	1a0011f0 <xQueueGenericSend>
1a0027c8:	e003      	b.n	1a0027d2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0027ca:	2300      	movs	r3, #0
1a0027cc:	4669      	mov	r1, sp
1a0027ce:	f7fe fde6 	bl	1a00139e <xQueueGenericSendFromISR>
}
1a0027d2:	b005      	add	sp, #20
1a0027d4:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a0027d6:	2000      	movs	r0, #0
	return xReturn;
1a0027d8:	e7fb      	b.n	1a0027d2 <xTimerGenericCommand+0x5e>
1a0027da:	bf00      	nop
1a0027dc:	10002b68 	.word	0x10002b68

1a0027e0 <prvSwitchTimerLists>:
{
1a0027e0:	b570      	push	{r4, r5, r6, lr}
1a0027e2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0027e4:	4b1a      	ldr	r3, [pc, #104]	; (1a002850 <prvSwitchTimerLists+0x70>)
1a0027e6:	681b      	ldr	r3, [r3, #0]
1a0027e8:	681a      	ldr	r2, [r3, #0]
1a0027ea:	b352      	cbz	r2, 1a002842 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0027ec:	68db      	ldr	r3, [r3, #12]
1a0027ee:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0027f0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0027f2:	1d25      	adds	r5, r4, #4
1a0027f4:	4628      	mov	r0, r5
1a0027f6:	f7ff f8d9 	bl	1a0019ac <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0027fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0027fc:	4620      	mov	r0, r4
1a0027fe:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002800:	69e3      	ldr	r3, [r4, #28]
1a002802:	2b01      	cmp	r3, #1
1a002804:	d1ee      	bne.n	1a0027e4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002806:	69a3      	ldr	r3, [r4, #24]
1a002808:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00280a:	429e      	cmp	r6, r3
1a00280c:	d207      	bcs.n	1a00281e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00280e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002810:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002812:	4629      	mov	r1, r5
1a002814:	4b0e      	ldr	r3, [pc, #56]	; (1a002850 <prvSwitchTimerLists+0x70>)
1a002816:	6818      	ldr	r0, [r3, #0]
1a002818:	f7ff f8ae 	bl	1a001978 <vListInsert>
1a00281c:	e7e2      	b.n	1a0027e4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00281e:	2100      	movs	r1, #0
1a002820:	9100      	str	r1, [sp, #0]
1a002822:	460b      	mov	r3, r1
1a002824:	4632      	mov	r2, r6
1a002826:	4620      	mov	r0, r4
1a002828:	f7ff ffa4 	bl	1a002774 <xTimerGenericCommand>
				configASSERT( xResult );
1a00282c:	2800      	cmp	r0, #0
1a00282e:	d1d9      	bne.n	1a0027e4 <prvSwitchTimerLists+0x4>
1a002830:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002834:	f383 8811 	msr	BASEPRI, r3
1a002838:	f3bf 8f6f 	isb	sy
1a00283c:	f3bf 8f4f 	dsb	sy
1a002840:	e7fe      	b.n	1a002840 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002842:	4a04      	ldr	r2, [pc, #16]	; (1a002854 <prvSwitchTimerLists+0x74>)
1a002844:	6810      	ldr	r0, [r2, #0]
1a002846:	4902      	ldr	r1, [pc, #8]	; (1a002850 <prvSwitchTimerLists+0x70>)
1a002848:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00284a:	6013      	str	r3, [r2, #0]
}
1a00284c:	b002      	add	sp, #8
1a00284e:	bd70      	pop	{r4, r5, r6, pc}
1a002850:	10002a44 	.word	0x10002a44
1a002854:	10002a48 	.word	0x10002a48

1a002858 <prvSampleTimeNow>:
{
1a002858:	b538      	push	{r3, r4, r5, lr}
1a00285a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a00285c:	f7ff fb4c 	bl	1a001ef8 <xTaskGetTickCount>
1a002860:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002862:	4b07      	ldr	r3, [pc, #28]	; (1a002880 <prvSampleTimeNow+0x28>)
1a002864:	681b      	ldr	r3, [r3, #0]
1a002866:	4283      	cmp	r3, r0
1a002868:	d805      	bhi.n	1a002876 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00286a:	2300      	movs	r3, #0
1a00286c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00286e:	4b04      	ldr	r3, [pc, #16]	; (1a002880 <prvSampleTimeNow+0x28>)
1a002870:	601c      	str	r4, [r3, #0]
}
1a002872:	4620      	mov	r0, r4
1a002874:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002876:	f7ff ffb3 	bl	1a0027e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00287a:	2301      	movs	r3, #1
1a00287c:	602b      	str	r3, [r5, #0]
1a00287e:	e7f6      	b.n	1a00286e <prvSampleTimeNow+0x16>
1a002880:	10002b14 	.word	0x10002b14

1a002884 <prvProcessExpiredTimer>:
{
1a002884:	b570      	push	{r4, r5, r6, lr}
1a002886:	b082      	sub	sp, #8
1a002888:	4605      	mov	r5, r0
1a00288a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00288c:	4b14      	ldr	r3, [pc, #80]	; (1a0028e0 <prvProcessExpiredTimer+0x5c>)
1a00288e:	681b      	ldr	r3, [r3, #0]
1a002890:	68db      	ldr	r3, [r3, #12]
1a002892:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002894:	1d20      	adds	r0, r4, #4
1a002896:	f7ff f889 	bl	1a0019ac <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00289a:	69e3      	ldr	r3, [r4, #28]
1a00289c:	2b01      	cmp	r3, #1
1a00289e:	d004      	beq.n	1a0028aa <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0028a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0028a2:	4620      	mov	r0, r4
1a0028a4:	4798      	blx	r3
}
1a0028a6:	b002      	add	sp, #8
1a0028a8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0028aa:	69a1      	ldr	r1, [r4, #24]
1a0028ac:	462b      	mov	r3, r5
1a0028ae:	4632      	mov	r2, r6
1a0028b0:	4429      	add	r1, r5
1a0028b2:	4620      	mov	r0, r4
1a0028b4:	f7ff fed0 	bl	1a002658 <prvInsertTimerInActiveList>
1a0028b8:	2800      	cmp	r0, #0
1a0028ba:	d0f1      	beq.n	1a0028a0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0028bc:	2100      	movs	r1, #0
1a0028be:	9100      	str	r1, [sp, #0]
1a0028c0:	460b      	mov	r3, r1
1a0028c2:	462a      	mov	r2, r5
1a0028c4:	4620      	mov	r0, r4
1a0028c6:	f7ff ff55 	bl	1a002774 <xTimerGenericCommand>
			configASSERT( xResult );
1a0028ca:	2800      	cmp	r0, #0
1a0028cc:	d1e8      	bne.n	1a0028a0 <prvProcessExpiredTimer+0x1c>
1a0028ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028d2:	f383 8811 	msr	BASEPRI, r3
1a0028d6:	f3bf 8f6f 	isb	sy
1a0028da:	f3bf 8f4f 	dsb	sy
1a0028de:	e7fe      	b.n	1a0028de <prvProcessExpiredTimer+0x5a>
1a0028e0:	10002a44 	.word	0x10002a44

1a0028e4 <prvProcessTimerOrBlockTask>:
{
1a0028e4:	b570      	push	{r4, r5, r6, lr}
1a0028e6:	b082      	sub	sp, #8
1a0028e8:	4606      	mov	r6, r0
1a0028ea:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a0028ec:	f7ff fafc 	bl	1a001ee8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0028f0:	a801      	add	r0, sp, #4
1a0028f2:	f7ff ffb1 	bl	1a002858 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0028f6:	9b01      	ldr	r3, [sp, #4]
1a0028f8:	bb1b      	cbnz	r3, 1a002942 <prvProcessTimerOrBlockTask+0x5e>
1a0028fa:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0028fc:	b90c      	cbnz	r4, 1a002902 <prvProcessTimerOrBlockTask+0x1e>
1a0028fe:	42b0      	cmp	r0, r6
1a002900:	d218      	bcs.n	1a002934 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002902:	b12c      	cbz	r4, 1a002910 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002904:	4b11      	ldr	r3, [pc, #68]	; (1a00294c <prvProcessTimerOrBlockTask+0x68>)
1a002906:	681b      	ldr	r3, [r3, #0]
1a002908:	681c      	ldr	r4, [r3, #0]
1a00290a:	fab4 f484 	clz	r4, r4
1a00290e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002910:	4622      	mov	r2, r4
1a002912:	1b71      	subs	r1, r6, r5
1a002914:	4b0e      	ldr	r3, [pc, #56]	; (1a002950 <prvProcessTimerOrBlockTask+0x6c>)
1a002916:	6818      	ldr	r0, [r3, #0]
1a002918:	f7fe ffec 	bl	1a0018f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00291c:	f7ff fb7e 	bl	1a00201c <xTaskResumeAll>
1a002920:	b988      	cbnz	r0, 1a002946 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002922:	4b0c      	ldr	r3, [pc, #48]	; (1a002954 <prvProcessTimerOrBlockTask+0x70>)
1a002924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002928:	601a      	str	r2, [r3, #0]
1a00292a:	f3bf 8f4f 	dsb	sy
1a00292e:	f3bf 8f6f 	isb	sy
1a002932:	e008      	b.n	1a002946 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002934:	f7ff fb72 	bl	1a00201c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002938:	4629      	mov	r1, r5
1a00293a:	4630      	mov	r0, r6
1a00293c:	f7ff ffa2 	bl	1a002884 <prvProcessExpiredTimer>
1a002940:	e001      	b.n	1a002946 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002942:	f7ff fb6b 	bl	1a00201c <xTaskResumeAll>
}
1a002946:	b002      	add	sp, #8
1a002948:	bd70      	pop	{r4, r5, r6, pc}
1a00294a:	bf00      	nop
1a00294c:	10002a48 	.word	0x10002a48
1a002950:	10002b68 	.word	0x10002b68
1a002954:	e000ed04 	.word	0xe000ed04

1a002958 <prvProcessReceivedCommands>:
{
1a002958:	b530      	push	{r4, r5, lr}
1a00295a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00295c:	e006      	b.n	1a00296c <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00295e:	9907      	ldr	r1, [sp, #28]
1a002960:	9806      	ldr	r0, [sp, #24]
1a002962:	9b05      	ldr	r3, [sp, #20]
1a002964:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002966:	9b04      	ldr	r3, [sp, #16]
1a002968:	2b00      	cmp	r3, #0
1a00296a:	da0b      	bge.n	1a002984 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00296c:	2200      	movs	r2, #0
1a00296e:	a904      	add	r1, sp, #16
1a002970:	4b37      	ldr	r3, [pc, #220]	; (1a002a50 <prvProcessReceivedCommands+0xf8>)
1a002972:	6818      	ldr	r0, [r3, #0]
1a002974:	f7fe fdd4 	bl	1a001520 <xQueueReceive>
1a002978:	2800      	cmp	r0, #0
1a00297a:	d066      	beq.n	1a002a4a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a00297c:	9b04      	ldr	r3, [sp, #16]
1a00297e:	2b00      	cmp	r3, #0
1a002980:	daf1      	bge.n	1a002966 <prvProcessReceivedCommands+0xe>
1a002982:	e7ec      	b.n	1a00295e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002984:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002986:	6963      	ldr	r3, [r4, #20]
1a002988:	b113      	cbz	r3, 1a002990 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00298a:	1d20      	adds	r0, r4, #4
1a00298c:	f7ff f80e 	bl	1a0019ac <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002990:	a803      	add	r0, sp, #12
1a002992:	f7ff ff61 	bl	1a002858 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002996:	9b04      	ldr	r3, [sp, #16]
1a002998:	2b09      	cmp	r3, #9
1a00299a:	d8e7      	bhi.n	1a00296c <prvProcessReceivedCommands+0x14>
1a00299c:	a201      	add	r2, pc, #4	; (adr r2, 1a0029a4 <prvProcessReceivedCommands+0x4c>)
1a00299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0029a2:	bf00      	nop
1a0029a4:	1a0029cd 	.word	0x1a0029cd
1a0029a8:	1a0029cd 	.word	0x1a0029cd
1a0029ac:	1a0029cd 	.word	0x1a0029cd
1a0029b0:	1a00296d 	.word	0x1a00296d
1a0029b4:	1a002a15 	.word	0x1a002a15
1a0029b8:	1a002a3b 	.word	0x1a002a3b
1a0029bc:	1a0029cd 	.word	0x1a0029cd
1a0029c0:	1a0029cd 	.word	0x1a0029cd
1a0029c4:	1a00296d 	.word	0x1a00296d
1a0029c8:	1a002a15 	.word	0x1a002a15
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0029cc:	9905      	ldr	r1, [sp, #20]
1a0029ce:	69a5      	ldr	r5, [r4, #24]
1a0029d0:	460b      	mov	r3, r1
1a0029d2:	4602      	mov	r2, r0
1a0029d4:	4429      	add	r1, r5
1a0029d6:	4620      	mov	r0, r4
1a0029d8:	f7ff fe3e 	bl	1a002658 <prvInsertTimerInActiveList>
1a0029dc:	2800      	cmp	r0, #0
1a0029de:	d0c5      	beq.n	1a00296c <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0029e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0029e2:	4620      	mov	r0, r4
1a0029e4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0029e6:	69e3      	ldr	r3, [r4, #28]
1a0029e8:	2b01      	cmp	r3, #1
1a0029ea:	d1bf      	bne.n	1a00296c <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0029ec:	69a2      	ldr	r2, [r4, #24]
1a0029ee:	2100      	movs	r1, #0
1a0029f0:	9100      	str	r1, [sp, #0]
1a0029f2:	460b      	mov	r3, r1
1a0029f4:	9805      	ldr	r0, [sp, #20]
1a0029f6:	4402      	add	r2, r0
1a0029f8:	4620      	mov	r0, r4
1a0029fa:	f7ff febb 	bl	1a002774 <xTimerGenericCommand>
							configASSERT( xResult );
1a0029fe:	2800      	cmp	r0, #0
1a002a00:	d1b4      	bne.n	1a00296c <prvProcessReceivedCommands+0x14>
1a002a02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a06:	f383 8811 	msr	BASEPRI, r3
1a002a0a:	f3bf 8f6f 	isb	sy
1a002a0e:	f3bf 8f4f 	dsb	sy
1a002a12:	e7fe      	b.n	1a002a12 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002a14:	9905      	ldr	r1, [sp, #20]
1a002a16:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002a18:	b131      	cbz	r1, 1a002a28 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002a1a:	4603      	mov	r3, r0
1a002a1c:	4602      	mov	r2, r0
1a002a1e:	4401      	add	r1, r0
1a002a20:	4620      	mov	r0, r4
1a002a22:	f7ff fe19 	bl	1a002658 <prvInsertTimerInActiveList>
					break;
1a002a26:	e7a1      	b.n	1a00296c <prvProcessReceivedCommands+0x14>
1a002a28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a2c:	f383 8811 	msr	BASEPRI, r3
1a002a30:	f3bf 8f6f 	isb	sy
1a002a34:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002a38:	e7fe      	b.n	1a002a38 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002a3a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002a3e:	2b00      	cmp	r3, #0
1a002a40:	d194      	bne.n	1a00296c <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a002a42:	4620      	mov	r0, r4
1a002a44:	f7fe fa5c 	bl	1a000f00 <vPortFree>
1a002a48:	e790      	b.n	1a00296c <prvProcessReceivedCommands+0x14>
}
1a002a4a:	b009      	add	sp, #36	; 0x24
1a002a4c:	bd30      	pop	{r4, r5, pc}
1a002a4e:	bf00      	nop
1a002a50:	10002b68 	.word	0x10002b68

1a002a54 <prvTimerTask>:
{
1a002a54:	b500      	push	{lr}
1a002a56:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002a58:	a801      	add	r0, sp, #4
1a002a5a:	f7ff fded 	bl	1a002638 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002a5e:	9901      	ldr	r1, [sp, #4]
1a002a60:	f7ff ff40 	bl	1a0028e4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002a64:	f7ff ff78 	bl	1a002958 <prvProcessReceivedCommands>
1a002a68:	e7f6      	b.n	1a002a58 <prvTimerTask+0x4>
1a002a6a:	Address 0x000000001a002a6a is out of bounds.


1a002a6c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002a6c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002a6e:	2300      	movs	r3, #0
1a002a70:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002a72:	4b0d      	ldr	r3, [pc, #52]	; (1a002aa8 <prvTaskExitError+0x3c>)
1a002a74:	681b      	ldr	r3, [r3, #0]
1a002a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002a7a:	d008      	beq.n	1a002a8e <prvTaskExitError+0x22>
1a002a7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a80:	f383 8811 	msr	BASEPRI, r3
1a002a84:	f3bf 8f6f 	isb	sy
1a002a88:	f3bf 8f4f 	dsb	sy
1a002a8c:	e7fe      	b.n	1a002a8c <prvTaskExitError+0x20>
1a002a8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a92:	f383 8811 	msr	BASEPRI, r3
1a002a96:	f3bf 8f6f 	isb	sy
1a002a9a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002a9e:	9b01      	ldr	r3, [sp, #4]
1a002aa0:	2b00      	cmp	r3, #0
1a002aa2:	d0fc      	beq.n	1a002a9e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002aa4:	b002      	add	sp, #8
1a002aa6:	4770      	bx	lr
1a002aa8:	10000054 	.word	0x10000054

1a002aac <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002aac:	4808      	ldr	r0, [pc, #32]	; (1a002ad0 <prvPortStartFirstTask+0x24>)
1a002aae:	6800      	ldr	r0, [r0, #0]
1a002ab0:	6800      	ldr	r0, [r0, #0]
1a002ab2:	f380 8808 	msr	MSP, r0
1a002ab6:	f04f 0000 	mov.w	r0, #0
1a002aba:	f380 8814 	msr	CONTROL, r0
1a002abe:	b662      	cpsie	i
1a002ac0:	b661      	cpsie	f
1a002ac2:	f3bf 8f4f 	dsb	sy
1a002ac6:	f3bf 8f6f 	isb	sy
1a002aca:	df00      	svc	0
1a002acc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a002ace:	0000      	.short	0x0000
1a002ad0:	e000ed08 	.word	0xe000ed08

1a002ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002ae4 <vPortEnableVFP+0x10>
1a002ad8:	6801      	ldr	r1, [r0, #0]
1a002ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002ade:	6001      	str	r1, [r0, #0]
1a002ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a002ae2:	0000      	.short	0x0000
1a002ae4:	e000ed88 	.word	0xe000ed88

1a002ae8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002aec:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002af0:	f021 0101 	bic.w	r1, r1, #1
1a002af4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002af8:	4b05      	ldr	r3, [pc, #20]	; (1a002b10 <pxPortInitialiseStack+0x28>)
1a002afa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002afe:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002b02:	f06f 0302 	mvn.w	r3, #2
1a002b06:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002b0a:	3844      	subs	r0, #68	; 0x44
1a002b0c:	4770      	bx	lr
1a002b0e:	bf00      	nop
1a002b10:	1a002a6d 	.word	0x1a002a6d
1a002b14:	ffffffff 	.word	0xffffffff
1a002b18:	ffffffff 	.word	0xffffffff
1a002b1c:	ffffffff 	.word	0xffffffff

1a002b20 <SVC_Handler>:
	__asm volatile (
1a002b20:	4b07      	ldr	r3, [pc, #28]	; (1a002b40 <pxCurrentTCBConst2>)
1a002b22:	6819      	ldr	r1, [r3, #0]
1a002b24:	6808      	ldr	r0, [r1, #0]
1a002b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002b2a:	f380 8809 	msr	PSP, r0
1a002b2e:	f3bf 8f6f 	isb	sy
1a002b32:	f04f 0000 	mov.w	r0, #0
1a002b36:	f380 8811 	msr	BASEPRI, r0
1a002b3a:	4770      	bx	lr
1a002b3c:	f3af 8000 	nop.w

1a002b40 <pxCurrentTCBConst2>:
1a002b40:	1000291c 	.word	0x1000291c

1a002b44 <vPortEnterCritical>:
1a002b44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b48:	f383 8811 	msr	BASEPRI, r3
1a002b4c:	f3bf 8f6f 	isb	sy
1a002b50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002b54:	4a0a      	ldr	r2, [pc, #40]	; (1a002b80 <vPortEnterCritical+0x3c>)
1a002b56:	6813      	ldr	r3, [r2, #0]
1a002b58:	3301      	adds	r3, #1
1a002b5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002b5c:	2b01      	cmp	r3, #1
1a002b5e:	d000      	beq.n	1a002b62 <vPortEnterCritical+0x1e>
}
1a002b60:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002b62:	4b08      	ldr	r3, [pc, #32]	; (1a002b84 <vPortEnterCritical+0x40>)
1a002b64:	681b      	ldr	r3, [r3, #0]
1a002b66:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002b6a:	d0f9      	beq.n	1a002b60 <vPortEnterCritical+0x1c>
1a002b6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b70:	f383 8811 	msr	BASEPRI, r3
1a002b74:	f3bf 8f6f 	isb	sy
1a002b78:	f3bf 8f4f 	dsb	sy
1a002b7c:	e7fe      	b.n	1a002b7c <vPortEnterCritical+0x38>
1a002b7e:	bf00      	nop
1a002b80:	10000054 	.word	0x10000054
1a002b84:	e000ed04 	.word	0xe000ed04

1a002b88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002b88:	4b09      	ldr	r3, [pc, #36]	; (1a002bb0 <vPortExitCritical+0x28>)
1a002b8a:	681b      	ldr	r3, [r3, #0]
1a002b8c:	b943      	cbnz	r3, 1a002ba0 <vPortExitCritical+0x18>
1a002b8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b92:	f383 8811 	msr	BASEPRI, r3
1a002b96:	f3bf 8f6f 	isb	sy
1a002b9a:	f3bf 8f4f 	dsb	sy
1a002b9e:	e7fe      	b.n	1a002b9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002ba0:	3b01      	subs	r3, #1
1a002ba2:	4a03      	ldr	r2, [pc, #12]	; (1a002bb0 <vPortExitCritical+0x28>)
1a002ba4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002ba6:	b90b      	cbnz	r3, 1a002bac <vPortExitCritical+0x24>
	__asm volatile
1a002ba8:	f383 8811 	msr	BASEPRI, r3
}
1a002bac:	4770      	bx	lr
1a002bae:	bf00      	nop
1a002bb0:	10000054 	.word	0x10000054
1a002bb4:	ffffffff 	.word	0xffffffff
1a002bb8:	ffffffff 	.word	0xffffffff
1a002bbc:	ffffffff 	.word	0xffffffff

1a002bc0 <PendSV_Handler>:
	__asm volatile
1a002bc0:	f3ef 8009 	mrs	r0, PSP
1a002bc4:	f3bf 8f6f 	isb	sy
1a002bc8:	4b15      	ldr	r3, [pc, #84]	; (1a002c20 <pxCurrentTCBConst>)
1a002bca:	681a      	ldr	r2, [r3, #0]
1a002bcc:	f01e 0f10 	tst.w	lr, #16
1a002bd0:	bf08      	it	eq
1a002bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002bda:	6010      	str	r0, [r2, #0]
1a002bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002be0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002be4:	f380 8811 	msr	BASEPRI, r0
1a002be8:	f3bf 8f4f 	dsb	sy
1a002bec:	f3bf 8f6f 	isb	sy
1a002bf0:	f7ff fab8 	bl	1a002164 <vTaskSwitchContext>
1a002bf4:	f04f 0000 	mov.w	r0, #0
1a002bf8:	f380 8811 	msr	BASEPRI, r0
1a002bfc:	bc09      	pop	{r0, r3}
1a002bfe:	6819      	ldr	r1, [r3, #0]
1a002c00:	6808      	ldr	r0, [r1, #0]
1a002c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002c06:	f01e 0f10 	tst.w	lr, #16
1a002c0a:	bf08      	it	eq
1a002c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002c10:	f380 8809 	msr	PSP, r0
1a002c14:	f3bf 8f6f 	isb	sy
1a002c18:	4770      	bx	lr
1a002c1a:	bf00      	nop
1a002c1c:	f3af 8000 	nop.w

1a002c20 <pxCurrentTCBConst>:
1a002c20:	1000291c 	.word	0x1000291c

1a002c24 <SysTick_Handler>:
{
1a002c24:	b508      	push	{r3, lr}
	__asm volatile
1a002c26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c2a:	f383 8811 	msr	BASEPRI, r3
1a002c2e:	f3bf 8f6f 	isb	sy
1a002c32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002c36:	f7ff f965 	bl	1a001f04 <xTaskIncrementTick>
1a002c3a:	b118      	cbz	r0, 1a002c44 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002c3c:	4b03      	ldr	r3, [pc, #12]	; (1a002c4c <SysTick_Handler+0x28>)
1a002c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002c42:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002c44:	2300      	movs	r3, #0
1a002c46:	f383 8811 	msr	BASEPRI, r3
}
1a002c4a:	bd08      	pop	{r3, pc}
1a002c4c:	e000ed04 	.word	0xe000ed04

1a002c50 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002c50:	4a08      	ldr	r2, [pc, #32]	; (1a002c74 <vPortSetupTimerInterrupt+0x24>)
1a002c52:	2300      	movs	r3, #0
1a002c54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002c56:	4908      	ldr	r1, [pc, #32]	; (1a002c78 <vPortSetupTimerInterrupt+0x28>)
1a002c58:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002c5a:	4b08      	ldr	r3, [pc, #32]	; (1a002c7c <vPortSetupTimerInterrupt+0x2c>)
1a002c5c:	681b      	ldr	r3, [r3, #0]
1a002c5e:	4908      	ldr	r1, [pc, #32]	; (1a002c80 <vPortSetupTimerInterrupt+0x30>)
1a002c60:	fba1 1303 	umull	r1, r3, r1, r3
1a002c64:	099b      	lsrs	r3, r3, #6
1a002c66:	3b01      	subs	r3, #1
1a002c68:	4906      	ldr	r1, [pc, #24]	; (1a002c84 <vPortSetupTimerInterrupt+0x34>)
1a002c6a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002c6c:	2307      	movs	r3, #7
1a002c6e:	6013      	str	r3, [r2, #0]
}
1a002c70:	4770      	bx	lr
1a002c72:	bf00      	nop
1a002c74:	e000e010 	.word	0xe000e010
1a002c78:	e000e018 	.word	0xe000e018
1a002c7c:	10002c50 	.word	0x10002c50
1a002c80:	10624dd3 	.word	0x10624dd3
1a002c84:	e000e014 	.word	0xe000e014

1a002c88 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002c88:	4b3a      	ldr	r3, [pc, #232]	; (1a002d74 <xPortStartScheduler+0xec>)
1a002c8a:	681a      	ldr	r2, [r3, #0]
1a002c8c:	4b3a      	ldr	r3, [pc, #232]	; (1a002d78 <xPortStartScheduler+0xf0>)
1a002c8e:	429a      	cmp	r2, r3
1a002c90:	d029      	beq.n	1a002ce6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002c92:	4b38      	ldr	r3, [pc, #224]	; (1a002d74 <xPortStartScheduler+0xec>)
1a002c94:	681a      	ldr	r2, [r3, #0]
1a002c96:	4b39      	ldr	r3, [pc, #228]	; (1a002d7c <xPortStartScheduler+0xf4>)
1a002c98:	429a      	cmp	r2, r3
1a002c9a:	d02d      	beq.n	1a002cf8 <xPortStartScheduler+0x70>
{
1a002c9c:	b510      	push	{r4, lr}
1a002c9e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002ca0:	4b37      	ldr	r3, [pc, #220]	; (1a002d80 <xPortStartScheduler+0xf8>)
1a002ca2:	781a      	ldrb	r2, [r3, #0]
1a002ca4:	b2d2      	uxtb	r2, r2
1a002ca6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002ca8:	22ff      	movs	r2, #255	; 0xff
1a002caa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002cac:	781b      	ldrb	r3, [r3, #0]
1a002cae:	b2db      	uxtb	r3, r3
1a002cb0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002cb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002cb8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002cbc:	4a31      	ldr	r2, [pc, #196]	; (1a002d84 <xPortStartScheduler+0xfc>)
1a002cbe:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002cc0:	4b31      	ldr	r3, [pc, #196]	; (1a002d88 <xPortStartScheduler+0x100>)
1a002cc2:	2207      	movs	r2, #7
1a002cc4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002cc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002cca:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002cce:	d01c      	beq.n	1a002d0a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a002cd0:	4a2d      	ldr	r2, [pc, #180]	; (1a002d88 <xPortStartScheduler+0x100>)
1a002cd2:	6813      	ldr	r3, [r2, #0]
1a002cd4:	3b01      	subs	r3, #1
1a002cd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002cd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002cdc:	005b      	lsls	r3, r3, #1
1a002cde:	b2db      	uxtb	r3, r3
1a002ce0:	f88d 3003 	strb.w	r3, [sp, #3]
1a002ce4:	e7ef      	b.n	1a002cc6 <xPortStartScheduler+0x3e>
	__asm volatile
1a002ce6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cea:	f383 8811 	msr	BASEPRI, r3
1a002cee:	f3bf 8f6f 	isb	sy
1a002cf2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002cf6:	e7fe      	b.n	1a002cf6 <xPortStartScheduler+0x6e>
1a002cf8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cfc:	f383 8811 	msr	BASEPRI, r3
1a002d00:	f3bf 8f6f 	isb	sy
1a002d04:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002d08:	e7fe      	b.n	1a002d08 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002d0a:	4b1f      	ldr	r3, [pc, #124]	; (1a002d88 <xPortStartScheduler+0x100>)
1a002d0c:	681b      	ldr	r3, [r3, #0]
1a002d0e:	2b04      	cmp	r3, #4
1a002d10:	d008      	beq.n	1a002d24 <xPortStartScheduler+0x9c>
1a002d12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d16:	f383 8811 	msr	BASEPRI, r3
1a002d1a:	f3bf 8f6f 	isb	sy
1a002d1e:	f3bf 8f4f 	dsb	sy
1a002d22:	e7fe      	b.n	1a002d22 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002d24:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002d2a:	4a17      	ldr	r2, [pc, #92]	; (1a002d88 <xPortStartScheduler+0x100>)
1a002d2c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002d2e:	9b01      	ldr	r3, [sp, #4]
1a002d30:	b2db      	uxtb	r3, r3
1a002d32:	4a13      	ldr	r2, [pc, #76]	; (1a002d80 <xPortStartScheduler+0xf8>)
1a002d34:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002d36:	4b15      	ldr	r3, [pc, #84]	; (1a002d8c <xPortStartScheduler+0x104>)
1a002d38:	681a      	ldr	r2, [r3, #0]
1a002d3a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002d3e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002d40:	681a      	ldr	r2, [r3, #0]
1a002d42:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002d46:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002d48:	f7ff ff82 	bl	1a002c50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002d4c:	2400      	movs	r4, #0
1a002d4e:	4b10      	ldr	r3, [pc, #64]	; (1a002d90 <xPortStartScheduler+0x108>)
1a002d50:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002d52:	f7ff febf 	bl	1a002ad4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002d56:	4a0f      	ldr	r2, [pc, #60]	; (1a002d94 <xPortStartScheduler+0x10c>)
1a002d58:	6813      	ldr	r3, [r2, #0]
1a002d5a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002d5e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002d60:	f7ff fea4 	bl	1a002aac <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002d64:	f7ff f9fe 	bl	1a002164 <vTaskSwitchContext>
	prvTaskExitError();
1a002d68:	f7ff fe80 	bl	1a002a6c <prvTaskExitError>
}
1a002d6c:	4620      	mov	r0, r4
1a002d6e:	b002      	add	sp, #8
1a002d70:	bd10      	pop	{r4, pc}
1a002d72:	bf00      	nop
1a002d74:	e000ed00 	.word	0xe000ed00
1a002d78:	410fc271 	.word	0x410fc271
1a002d7c:	410fc270 	.word	0x410fc270
1a002d80:	e000e400 	.word	0xe000e400
1a002d84:	10002b70 	.word	0x10002b70
1a002d88:	10002b74 	.word	0x10002b74
1a002d8c:	e000ed20 	.word	0xe000ed20
1a002d90:	10000054 	.word	0x10000054
1a002d94:	e000ef34 	.word	0xe000ef34

1a002d98 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002d98:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002d9c:	2b0f      	cmp	r3, #15
1a002d9e:	d90f      	bls.n	1a002dc0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002da0:	4a10      	ldr	r2, [pc, #64]	; (1a002de4 <vPortValidateInterruptPriority+0x4c>)
1a002da2:	5c9b      	ldrb	r3, [r3, r2]
1a002da4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002da6:	4a10      	ldr	r2, [pc, #64]	; (1a002de8 <vPortValidateInterruptPriority+0x50>)
1a002da8:	7812      	ldrb	r2, [r2, #0]
1a002daa:	429a      	cmp	r2, r3
1a002dac:	d908      	bls.n	1a002dc0 <vPortValidateInterruptPriority+0x28>
1a002dae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002db2:	f383 8811 	msr	BASEPRI, r3
1a002db6:	f3bf 8f6f 	isb	sy
1a002dba:	f3bf 8f4f 	dsb	sy
1a002dbe:	e7fe      	b.n	1a002dbe <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002dc0:	4b0a      	ldr	r3, [pc, #40]	; (1a002dec <vPortValidateInterruptPriority+0x54>)
1a002dc2:	681b      	ldr	r3, [r3, #0]
1a002dc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002dc8:	4a09      	ldr	r2, [pc, #36]	; (1a002df0 <vPortValidateInterruptPriority+0x58>)
1a002dca:	6812      	ldr	r2, [r2, #0]
1a002dcc:	4293      	cmp	r3, r2
1a002dce:	d908      	bls.n	1a002de2 <vPortValidateInterruptPriority+0x4a>
1a002dd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002dd4:	f383 8811 	msr	BASEPRI, r3
1a002dd8:	f3bf 8f6f 	isb	sy
1a002ddc:	f3bf 8f4f 	dsb	sy
1a002de0:	e7fe      	b.n	1a002de0 <vPortValidateInterruptPriority+0x48>
	}
1a002de2:	4770      	bx	lr
1a002de4:	e000e3f0 	.word	0xe000e3f0
1a002de8:	10002b70 	.word	0x10002b70
1a002dec:	e000ed0c 	.word	0xe000ed0c
1a002df0:	10002b74 	.word	0x10002b74

1a002df4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002df4:	b508      	push	{r3, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002df6:	4b05      	ldr	r3, [pc, #20]	; (1a002e0c <DAC_IRQHandler+0x18>)
1a002df8:	2201      	movs	r2, #1
1a002dfa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a002dfe:	4b04      	ldr	r3, [pc, #16]	; (1a002e10 <DAC_IRQHandler+0x1c>)
1a002e00:	681b      	ldr	r3, [r3, #0]
1a002e02:	b113      	cbz	r3, 1a002e0a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002e04:	4b02      	ldr	r3, [pc, #8]	; (1a002e10 <DAC_IRQHandler+0x1c>)
1a002e06:	681b      	ldr	r3, [r3, #0]
1a002e08:	4798      	blx	r3
   }
}
1a002e0a:	bd08      	pop	{r3, pc}
1a002e0c:	e000e100 	.word	0xe000e100
1a002e10:	10002b78 	.word	0x10002b78

1a002e14 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002e14:	2200      	movs	r2, #0
1a002e16:	2a05      	cmp	r2, #5
1a002e18:	d819      	bhi.n	1a002e4e <Board_LED_Init+0x3a>
{
1a002e1a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002e1c:	490c      	ldr	r1, [pc, #48]	; (1a002e50 <Board_LED_Init+0x3c>)
1a002e1e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002e22:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002e26:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002e28:	4b0a      	ldr	r3, [pc, #40]	; (1a002e54 <Board_LED_Init+0x40>)
1a002e2a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002e2e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002e32:	2001      	movs	r0, #1
1a002e34:	40a0      	lsls	r0, r4
1a002e36:	4301      	orrs	r1, r0
1a002e38:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002e3c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002e40:	2100      	movs	r1, #0
1a002e42:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002e44:	3201      	adds	r2, #1
1a002e46:	2a05      	cmp	r2, #5
1a002e48:	d9e8      	bls.n	1a002e1c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a002e4a:	bc70      	pop	{r4, r5, r6}
1a002e4c:	4770      	bx	lr
1a002e4e:	4770      	bx	lr
1a002e50:	1a00611c 	.word	0x1a00611c
1a002e54:	400f4000 	.word	0x400f4000

1a002e58 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002e58:	2300      	movs	r3, #0
1a002e5a:	2b03      	cmp	r3, #3
1a002e5c:	d816      	bhi.n	1a002e8c <Board_TEC_Init+0x34>
{
1a002e5e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002e60:	490b      	ldr	r1, [pc, #44]	; (1a002e90 <Board_TEC_Init+0x38>)
1a002e62:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002e66:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002e6a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002e6c:	4c09      	ldr	r4, [pc, #36]	; (1a002e94 <Board_TEC_Init+0x3c>)
1a002e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002e72:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002e76:	2001      	movs	r0, #1
1a002e78:	40a8      	lsls	r0, r5
1a002e7a:	ea21 0100 	bic.w	r1, r1, r0
1a002e7e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002e82:	3301      	adds	r3, #1
1a002e84:	2b03      	cmp	r3, #3
1a002e86:	d9eb      	bls.n	1a002e60 <Board_TEC_Init+0x8>
   }
}
1a002e88:	bc30      	pop	{r4, r5}
1a002e8a:	4770      	bx	lr
1a002e8c:	4770      	bx	lr
1a002e8e:	bf00      	nop
1a002e90:	1a006114 	.word	0x1a006114
1a002e94:	400f4000 	.word	0x400f4000

1a002e98 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002e98:	2300      	movs	r3, #0
1a002e9a:	2b08      	cmp	r3, #8
1a002e9c:	d816      	bhi.n	1a002ecc <Board_GPIO_Init+0x34>
{
1a002e9e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002ea0:	490b      	ldr	r1, [pc, #44]	; (1a002ed0 <Board_GPIO_Init+0x38>)
1a002ea2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002ea6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002eaa:	784d      	ldrb	r5, [r1, #1]
1a002eac:	4c09      	ldr	r4, [pc, #36]	; (1a002ed4 <Board_GPIO_Init+0x3c>)
1a002eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002eb2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002eb6:	2001      	movs	r0, #1
1a002eb8:	40a8      	lsls	r0, r5
1a002eba:	ea21 0100 	bic.w	r1, r1, r0
1a002ebe:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002ec2:	3301      	adds	r3, #1
1a002ec4:	2b08      	cmp	r3, #8
1a002ec6:	d9eb      	bls.n	1a002ea0 <Board_GPIO_Init+0x8>
   }
}
1a002ec8:	bc30      	pop	{r4, r5}
1a002eca:	4770      	bx	lr
1a002ecc:	4770      	bx	lr
1a002ece:	bf00      	nop
1a002ed0:	1a006128 	.word	0x1a006128
1a002ed4:	400f4000 	.word	0x400f4000

1a002ed8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002ed8:	b510      	push	{r4, lr}
1a002eda:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002edc:	4c08      	ldr	r4, [pc, #32]	; (1a002f00 <Board_ADC_Init+0x28>)
1a002ede:	4669      	mov	r1, sp
1a002ee0:	4620      	mov	r0, r4
1a002ee2:	f000 f9d9 	bl	1a003298 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002ee6:	4a07      	ldr	r2, [pc, #28]	; (1a002f04 <Board_ADC_Init+0x2c>)
1a002ee8:	4669      	mov	r1, sp
1a002eea:	4620      	mov	r0, r4
1a002eec:	f000 f9f4 	bl	1a0032d8 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002ef0:	2200      	movs	r2, #0
1a002ef2:	4669      	mov	r1, sp
1a002ef4:	4620      	mov	r0, r4
1a002ef6:	f000 fa08 	bl	1a00330a <Chip_ADC_SetResolution>
}
1a002efa:	b002      	add	sp, #8
1a002efc:	bd10      	pop	{r4, pc}
1a002efe:	bf00      	nop
1a002f00:	400e3000 	.word	0x400e3000
1a002f04:	00061a80 	.word	0x00061a80

1a002f08 <Board_SPI_Init>:
{
1a002f08:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a002f0a:	4c0b      	ldr	r4, [pc, #44]	; (1a002f38 <Board_SPI_Init+0x30>)
1a002f0c:	4620      	mov	r0, r4
1a002f0e:	f000 fe57 	bl	1a003bc0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002f12:	6863      	ldr	r3, [r4, #4]
1a002f14:	f023 0304 	bic.w	r3, r3, #4
1a002f18:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002f1a:	6823      	ldr	r3, [r4, #0]
1a002f1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002f20:	f043 0307 	orr.w	r3, r3, #7
1a002f24:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002f26:	4905      	ldr	r1, [pc, #20]	; (1a002f3c <Board_SPI_Init+0x34>)
1a002f28:	4620      	mov	r0, r4
1a002f2a:	f000 fe2a 	bl	1a003b82 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002f2e:	6863      	ldr	r3, [r4, #4]
1a002f30:	f043 0302 	orr.w	r3, r3, #2
1a002f34:	6063      	str	r3, [r4, #4]
}
1a002f36:	bd10      	pop	{r4, pc}
1a002f38:	400c5000 	.word	0x400c5000
1a002f3c:	000186a0 	.word	0x000186a0

1a002f40 <Board_I2C_Init>:
{
1a002f40:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002f42:	2000      	movs	r0, #0
1a002f44:	f000 fef8 	bl	1a003d38 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002f48:	4b04      	ldr	r3, [pc, #16]	; (1a002f5c <Board_I2C_Init+0x1c>)
1a002f4a:	f640 0208 	movw	r2, #2056	; 0x808
1a002f4e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002f52:	4903      	ldr	r1, [pc, #12]	; (1a002f60 <Board_I2C_Init+0x20>)
1a002f54:	2000      	movs	r0, #0
1a002f56:	f000 ff01 	bl	1a003d5c <Chip_I2C_SetClockRate>
}
1a002f5a:	bd08      	pop	{r3, pc}
1a002f5c:	40086000 	.word	0x40086000
1a002f60:	000f4240 	.word	0x000f4240

1a002f64 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002f64:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002f66:	4c07      	ldr	r4, [pc, #28]	; (1a002f84 <Board_Debug_Init+0x20>)
1a002f68:	4620      	mov	r0, r4
1a002f6a:	f000 f8b9 	bl	1a0030e0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002f6e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002f72:	4620      	mov	r0, r4
1a002f74:	f000 f8fe 	bl	1a003174 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002f78:	2303      	movs	r3, #3
1a002f7a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002f7c:	2301      	movs	r3, #1
1a002f7e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002f80:	bd10      	pop	{r4, pc}
1a002f82:	bf00      	nop
1a002f84:	400c1000 	.word	0x400c1000

1a002f88 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002f88:	4b03      	ldr	r3, [pc, #12]	; (1a002f98 <Board_UARTPutChar+0x10>)
1a002f8a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002f8c:	f013 0f20 	tst.w	r3, #32
1a002f90:	d0fa      	beq.n	1a002f88 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002f92:	4b01      	ldr	r3, [pc, #4]	; (1a002f98 <Board_UARTPutChar+0x10>)
1a002f94:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002f96:	4770      	bx	lr
1a002f98:	400c1000 	.word	0x400c1000

1a002f9c <Board_UARTGetChar>:
	return pUART->LSR;
1a002f9c:	4b05      	ldr	r3, [pc, #20]	; (1a002fb4 <Board_UARTGetChar+0x18>)
1a002f9e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002fa0:	f013 0f01 	tst.w	r3, #1
1a002fa4:	d003      	beq.n	1a002fae <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002fa6:	4b03      	ldr	r3, [pc, #12]	; (1a002fb4 <Board_UARTGetChar+0x18>)
1a002fa8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002faa:	b2c0      	uxtb	r0, r0
1a002fac:	4770      	bx	lr
   }
   return EOF;
1a002fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002fb2:	4770      	bx	lr
1a002fb4:	400c1000 	.word	0x400c1000

1a002fb8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002fb8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002fba:	f7ff ffd3 	bl	1a002f64 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002fbe:	4809      	ldr	r0, [pc, #36]	; (1a002fe4 <Board_Init+0x2c>)
1a002fc0:	f000 fdbf 	bl	1a003b42 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002fc4:	f7ff ff68 	bl	1a002e98 <Board_GPIO_Init>
   Board_ADC_Init();
1a002fc8:	f7ff ff86 	bl	1a002ed8 <Board_ADC_Init>
   Board_SPI_Init();
1a002fcc:	f7ff ff9c 	bl	1a002f08 <Board_SPI_Init>
   Board_I2C_Init();
1a002fd0:	f7ff ffb6 	bl	1a002f40 <Board_I2C_Init>

   Board_LED_Init();
1a002fd4:	f7ff ff1e 	bl	1a002e14 <Board_LED_Init>
   Board_TEC_Init();
1a002fd8:	f7ff ff3e 	bl	1a002e58 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002fdc:	f000 fc62 	bl	1a0038a4 <SystemCoreClockUpdate>
}
1a002fe0:	bd08      	pop	{r3, pc}
1a002fe2:	bf00      	nop
1a002fe4:	400f4000 	.word	0x400f4000

1a002fe8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002fe8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002fea:	b2c0      	uxtb	r0, r0
1a002fec:	f7ff ffcc 	bl	1a002f88 <Board_UARTPutChar>
}
1a002ff0:	bd08      	pop	{r3, pc}

1a002ff2 <__stdio_getchar>:

int __stdio_getchar()
{
1a002ff2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002ff4:	f7ff ffd2 	bl	1a002f9c <Board_UARTGetChar>
}
1a002ff8:	bd08      	pop	{r3, pc}

1a002ffa <__stdio_init>:

void __stdio_init()
{
1a002ffa:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002ffc:	f7ff ffb2 	bl	1a002f64 <Board_Debug_Init>
1a003000:	bd08      	pop	{r3, pc}
1a003002:	Address 0x000000001a003002 is out of bounds.


1a003004 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003004:	2300      	movs	r3, #0
1a003006:	2b1c      	cmp	r3, #28
1a003008:	d812      	bhi.n	1a003030 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00300a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00300c:	4a09      	ldr	r2, [pc, #36]	; (1a003034 <Board_SetupMuxing+0x30>)
1a00300e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003012:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003016:	784a      	ldrb	r2, [r1, #1]
1a003018:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00301a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00301e:	4906      	ldr	r1, [pc, #24]	; (1a003038 <Board_SetupMuxing+0x34>)
1a003020:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003024:	3301      	adds	r3, #1
1a003026:	2b1c      	cmp	r3, #28
1a003028:	d9f0      	bls.n	1a00300c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00302a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00302e:	4770      	bx	lr
1a003030:	4770      	bx	lr
1a003032:	bf00      	nop
1a003034:	1a006144 	.word	0x1a006144
1a003038:	40086000 	.word	0x40086000

1a00303c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00303c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00303e:	4a17      	ldr	r2, [pc, #92]	; (1a00309c <Board_SetupClocking+0x60>)
1a003040:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003048:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00304c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003050:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003058:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00305c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003060:	2201      	movs	r2, #1
1a003062:	490f      	ldr	r1, [pc, #60]	; (1a0030a0 <Board_SetupClocking+0x64>)
1a003064:	2006      	movs	r0, #6
1a003066:	f000 fc27 	bl	1a0038b8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00306a:	2400      	movs	r4, #0
1a00306c:	b14c      	cbz	r4, 1a003082 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00306e:	4b0b      	ldr	r3, [pc, #44]	; (1a00309c <Board_SetupClocking+0x60>)
1a003070:	685a      	ldr	r2, [r3, #4]
1a003072:	f022 020c 	bic.w	r2, r2, #12
1a003076:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003078:	685a      	ldr	r2, [r3, #4]
1a00307a:	f042 0203 	orr.w	r2, r2, #3
1a00307e:	605a      	str	r2, [r3, #4]
}
1a003080:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003082:	4808      	ldr	r0, [pc, #32]	; (1a0030a4 <Board_SetupClocking+0x68>)
1a003084:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003088:	2301      	movs	r3, #1
1a00308a:	788a      	ldrb	r2, [r1, #2]
1a00308c:	7849      	ldrb	r1, [r1, #1]
1a00308e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003092:	f000 fb63 	bl	1a00375c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003096:	3401      	adds	r4, #1
1a003098:	e7e8      	b.n	1a00306c <Board_SetupClocking+0x30>
1a00309a:	bf00      	nop
1a00309c:	40043000 	.word	0x40043000
1a0030a0:	0c28cb00 	.word	0x0c28cb00
1a0030a4:	1a006140 	.word	0x1a006140

1a0030a8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0030a8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0030aa:	f7ff ffab 	bl	1a003004 <Board_SetupMuxing>
    Board_SetupClocking();
1a0030ae:	f7ff ffc5 	bl	1a00303c <Board_SetupClocking>
}
1a0030b2:	bd08      	pop	{r3, pc}

1a0030b4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0030b4:	4b09      	ldr	r3, [pc, #36]	; (1a0030dc <Chip_UART_GetIndex+0x28>)
1a0030b6:	4298      	cmp	r0, r3
1a0030b8:	d009      	beq.n	1a0030ce <Chip_UART_GetIndex+0x1a>
1a0030ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0030be:	4298      	cmp	r0, r3
1a0030c0:	d007      	beq.n	1a0030d2 <Chip_UART_GetIndex+0x1e>
1a0030c2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0030c6:	4298      	cmp	r0, r3
1a0030c8:	d005      	beq.n	1a0030d6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0030ca:	2000      	movs	r0, #0
1a0030cc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0030ce:	2002      	movs	r0, #2
1a0030d0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0030d2:	2003      	movs	r0, #3
1a0030d4:	4770      	bx	lr
			return 1;
1a0030d6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0030d8:	4770      	bx	lr
1a0030da:	bf00      	nop
1a0030dc:	400c1000 	.word	0x400c1000

1a0030e0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0030e0:	b530      	push	{r4, r5, lr}
1a0030e2:	b083      	sub	sp, #12
1a0030e4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0030e6:	f7ff ffe5 	bl	1a0030b4 <Chip_UART_GetIndex>
1a0030ea:	2301      	movs	r3, #1
1a0030ec:	461a      	mov	r2, r3
1a0030ee:	4619      	mov	r1, r3
1a0030f0:	4d0e      	ldr	r5, [pc, #56]	; (1a00312c <Chip_UART_Init+0x4c>)
1a0030f2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0030f6:	f000 fb77 	bl	1a0037e8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0030fa:	2307      	movs	r3, #7
1a0030fc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0030fe:	2300      	movs	r3, #0
1a003100:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a003102:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003104:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003106:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003108:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00310a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00310c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00310e:	4b08      	ldr	r3, [pc, #32]	; (1a003130 <Chip_UART_Init+0x50>)
1a003110:	429c      	cmp	r4, r3
1a003112:	d006      	beq.n	1a003122 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003114:	2303      	movs	r3, #3
1a003116:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003118:	2310      	movs	r3, #16
1a00311a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00311c:	9b01      	ldr	r3, [sp, #4]
}
1a00311e:	b003      	add	sp, #12
1a003120:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a003122:	2300      	movs	r3, #0
1a003124:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003126:	69a3      	ldr	r3, [r4, #24]
1a003128:	9301      	str	r3, [sp, #4]
1a00312a:	e7f3      	b.n	1a003114 <Chip_UART_Init+0x34>
1a00312c:	1a0061c0 	.word	0x1a0061c0
1a003130:	40082000 	.word	0x40082000

1a003134 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003134:	b538      	push	{r3, r4, r5, lr}
1a003136:	4605      	mov	r5, r0
1a003138:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00313a:	f7ff ffbb 	bl	1a0030b4 <Chip_UART_GetIndex>
1a00313e:	4b0c      	ldr	r3, [pc, #48]	; (1a003170 <Chip_UART_SetBaud+0x3c>)
1a003140:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003144:	f000 fb88 	bl	1a003858 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003148:	0123      	lsls	r3, r4, #4
1a00314a:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00314e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003150:	68ea      	ldr	r2, [r5, #12]
1a003152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003156:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003158:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00315a:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00315e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003160:	68ea      	ldr	r2, [r5, #12]
1a003162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003166:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003168:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00316c:	0900      	lsrs	r0, r0, #4
1a00316e:	bd38      	pop	{r3, r4, r5, pc}
1a003170:	1a0061b8 	.word	0x1a0061b8

1a003174 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003178:	b083      	sub	sp, #12
1a00317a:	9001      	str	r0, [sp, #4]
1a00317c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00317e:	f7ff ff99 	bl	1a0030b4 <Chip_UART_GetIndex>
1a003182:	4b32      	ldr	r3, [pc, #200]	; (1a00324c <Chip_UART_SetBaudFDR+0xd8>)
1a003184:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003188:	f000 fb66 	bl	1a003858 <Chip_Clock_GetRate>
1a00318c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00318e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003192:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003194:	f04f 0b00 	mov.w	fp, #0
1a003198:	46a2      	mov	sl, r4
1a00319a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a00319c:	e02a      	b.n	1a0031f4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00319e:	4242      	negs	r2, r0
				div ++;
1a0031a0:	1c4b      	adds	r3, r1, #1
1a0031a2:	e017      	b.n	1a0031d4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0031a4:	b30a      	cbz	r2, 1a0031ea <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0031a6:	4617      	mov	r7, r2
			sd = d;
1a0031a8:	46ab      	mov	fp, r5
			sm = m;
1a0031aa:	46a2      	mov	sl, r4
			sdiv = div;
1a0031ac:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0031ae:	3501      	adds	r5, #1
1a0031b0:	42ac      	cmp	r4, r5
1a0031b2:	d91e      	bls.n	1a0031f2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0031b4:	0933      	lsrs	r3, r6, #4
1a0031b6:	0730      	lsls	r0, r6, #28
1a0031b8:	fba4 0100 	umull	r0, r1, r4, r0
1a0031bc:	fb04 1103 	mla	r1, r4, r3, r1
1a0031c0:	1962      	adds	r2, r4, r5
1a0031c2:	fb08 f202 	mul.w	r2, r8, r2
1a0031c6:	2300      	movs	r3, #0
1a0031c8:	f001 fc82 	bl	1a004ad0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0031cc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0031ce:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0031d0:	2800      	cmp	r0, #0
1a0031d2:	dbe4      	blt.n	1a00319e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0031d4:	4297      	cmp	r7, r2
1a0031d6:	d3ea      	bcc.n	1a0031ae <Chip_UART_SetBaudFDR+0x3a>
1a0031d8:	2b00      	cmp	r3, #0
1a0031da:	d0e8      	beq.n	1a0031ae <Chip_UART_SetBaudFDR+0x3a>
1a0031dc:	0c19      	lsrs	r1, r3, #16
1a0031de:	d1e6      	bne.n	1a0031ae <Chip_UART_SetBaudFDR+0x3a>
1a0031e0:	2b02      	cmp	r3, #2
1a0031e2:	d8df      	bhi.n	1a0031a4 <Chip_UART_SetBaudFDR+0x30>
1a0031e4:	2d00      	cmp	r5, #0
1a0031e6:	d0dd      	beq.n	1a0031a4 <Chip_UART_SetBaudFDR+0x30>
1a0031e8:	e7e1      	b.n	1a0031ae <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0031ea:	4617      	mov	r7, r2
			sd = d;
1a0031ec:	46ab      	mov	fp, r5
			sm = m;
1a0031ee:	46a2      	mov	sl, r4
			sdiv = div;
1a0031f0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0031f2:	3401      	adds	r4, #1
1a0031f4:	b11f      	cbz	r7, 1a0031fe <Chip_UART_SetBaudFDR+0x8a>
1a0031f6:	2c0f      	cmp	r4, #15
1a0031f8:	d801      	bhi.n	1a0031fe <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0031fa:	2500      	movs	r5, #0
1a0031fc:	e7d8      	b.n	1a0031b0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0031fe:	f1b9 0f00 	cmp.w	r9, #0
1a003202:	d01e      	beq.n	1a003242 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003204:	9a01      	ldr	r2, [sp, #4]
1a003206:	4611      	mov	r1, r2
1a003208:	68d3      	ldr	r3, [r2, #12]
1a00320a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00320e:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a003210:	fa5f f389 	uxtb.w	r3, r9
1a003214:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a003216:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00321a:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00321c:	68d3      	ldr	r3, [r2, #12]
1a00321e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003222:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003224:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003228:	b2db      	uxtb	r3, r3
1a00322a:	f00b 020f 	and.w	r2, fp, #15
1a00322e:	4313      	orrs	r3, r2
1a003230:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003232:	0933      	lsrs	r3, r6, #4
1a003234:	fb0a f303 	mul.w	r3, sl, r3
1a003238:	44da      	add	sl, fp
1a00323a:	fb09 f90a 	mul.w	r9, r9, sl
1a00323e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a003242:	4648      	mov	r0, r9
1a003244:	b003      	add	sp, #12
1a003246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00324a:	bf00      	nop
1a00324c:	1a0061b8 	.word	0x1a0061b8

1a003250 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003250:	4b03      	ldr	r3, [pc, #12]	; (1a003260 <Chip_ADC_GetClockIndex+0x10>)
1a003252:	4298      	cmp	r0, r3
1a003254:	d001      	beq.n	1a00325a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003256:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003258:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00325a:	2004      	movs	r0, #4
1a00325c:	4770      	bx	lr
1a00325e:	bf00      	nop
1a003260:	400e4000 	.word	0x400e4000

1a003264 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a003264:	b570      	push	{r4, r5, r6, lr}
1a003266:	460d      	mov	r5, r1
1a003268:	4614      	mov	r4, r2
1a00326a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00326c:	f7ff fff0 	bl	1a003250 <Chip_ADC_GetClockIndex>
1a003270:	f000 faf2 	bl	1a003858 <Chip_Clock_GetRate>
	if (burstMode) {
1a003274:	b155      	cbz	r5, 1a00328c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a003276:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00327a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00327e:	0064      	lsls	r4, r4, #1
1a003280:	fbb0 f0f4 	udiv	r0, r0, r4
1a003284:	b2c0      	uxtb	r0, r0
1a003286:	3801      	subs	r0, #1
	return div;
}
1a003288:	b2c0      	uxtb	r0, r0
1a00328a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a00328c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003290:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a003294:	e7f1      	b.n	1a00327a <getClkDiv+0x16>
1a003296:	Address 0x000000001a003296 is out of bounds.


1a003298 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003298:	b538      	push	{r3, r4, r5, lr}
1a00329a:	4605      	mov	r5, r0
1a00329c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00329e:	f7ff ffd7 	bl	1a003250 <Chip_ADC_GetClockIndex>
1a0032a2:	2301      	movs	r3, #1
1a0032a4:	461a      	mov	r2, r3
1a0032a6:	4619      	mov	r1, r3
1a0032a8:	f000 fa9e 	bl	1a0037e8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0032ac:	2100      	movs	r1, #0
1a0032ae:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0032b0:	4a08      	ldr	r2, [pc, #32]	; (1a0032d4 <Chip_ADC_Init+0x3c>)
1a0032b2:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0032b4:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0032b6:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0032b8:	230b      	movs	r3, #11
1a0032ba:	4628      	mov	r0, r5
1a0032bc:	f7ff ffd2 	bl	1a003264 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0032c0:	0200      	lsls	r0, r0, #8
1a0032c2:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0032c6:	7920      	ldrb	r0, [r4, #4]
1a0032c8:	0440      	lsls	r0, r0, #17
1a0032ca:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0032ce:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0032d0:	6028      	str	r0, [r5, #0]
}
1a0032d2:	bd38      	pop	{r3, r4, r5, pc}
1a0032d4:	00061a80 	.word	0x00061a80

1a0032d8 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0032d8:	b570      	push	{r4, r5, r6, lr}
1a0032da:	4605      	mov	r5, r0
1a0032dc:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0032de:	6804      	ldr	r4, [r0, #0]
1a0032e0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0032e4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0032e8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0032ea:	790b      	ldrb	r3, [r1, #4]
1a0032ec:	f1c3 030b 	rsb	r3, r3, #11
1a0032f0:	b2db      	uxtb	r3, r3
1a0032f2:	7949      	ldrb	r1, [r1, #5]
1a0032f4:	f7ff ffb6 	bl	1a003264 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0032f8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0032fc:	7933      	ldrb	r3, [r6, #4]
1a0032fe:	045b      	lsls	r3, r3, #17
1a003300:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a003304:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a003306:	602b      	str	r3, [r5, #0]
}
1a003308:	bd70      	pop	{r4, r5, r6, pc}

1a00330a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00330a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00330c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00330e:	680a      	ldr	r2, [r1, #0]
1a003310:	f7ff ffe2 	bl	1a0032d8 <Chip_ADC_SetSampleRate>
}
1a003314:	bd08      	pop	{r3, pc}
1a003316:	Address 0x000000001a003316 is out of bounds.


1a003318 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003318:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00331a:	680b      	ldr	r3, [r1, #0]
1a00331c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003320:	d002      	beq.n	1a003328 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003326:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003328:	4607      	mov	r7, r0
1a00332a:	2501      	movs	r5, #1
1a00332c:	e03a      	b.n	1a0033a4 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00332e:	694b      	ldr	r3, [r1, #20]
1a003330:	fb03 f302 	mul.w	r3, r3, r2
1a003334:	fbb3 f3f5 	udiv	r3, r3, r5
1a003338:	e01c      	b.n	1a003374 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00333a:	461c      	mov	r4, r3
	if (val < 0)
1a00333c:	ebb0 0c04 	subs.w	ip, r0, r4
1a003340:	d427      	bmi.n	1a003392 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a003342:	4567      	cmp	r7, ip
1a003344:	d906      	bls.n	1a003354 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a003346:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003348:	1c77      	adds	r7, r6, #1
1a00334a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00334c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00334e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a003350:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a003352:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a003354:	3201      	adds	r2, #1
1a003356:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00335a:	dc1d      	bgt.n	1a003398 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a00335c:	680c      	ldr	r4, [r1, #0]
1a00335e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a003362:	d0e4      	beq.n	1a00332e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003364:	1c73      	adds	r3, r6, #1
1a003366:	fa02 fc03 	lsl.w	ip, r2, r3
1a00336a:	694b      	ldr	r3, [r1, #20]
1a00336c:	fb03 f30c 	mul.w	r3, r3, ip
1a003370:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003374:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a0033b0 <pll_calc_divs+0x98>
1a003378:	4563      	cmp	r3, ip
1a00337a:	d9eb      	bls.n	1a003354 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00337c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a0033b4 <pll_calc_divs+0x9c>
1a003380:	4563      	cmp	r3, ip
1a003382:	d809      	bhi.n	1a003398 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a003384:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003388:	d1d7      	bne.n	1a00333a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00338a:	1c74      	adds	r4, r6, #1
1a00338c:	fa23 f404 	lsr.w	r4, r3, r4
1a003390:	e7d4      	b.n	1a00333c <pll_calc_divs+0x24>
		return -val;
1a003392:	f1cc 0c00 	rsb	ip, ip, #0
1a003396:	e7d4      	b.n	1a003342 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a003398:	3601      	adds	r6, #1
1a00339a:	2e03      	cmp	r6, #3
1a00339c:	dc01      	bgt.n	1a0033a2 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00339e:	2201      	movs	r2, #1
1a0033a0:	e7d9      	b.n	1a003356 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a0033a2:	3501      	adds	r5, #1
1a0033a4:	2d04      	cmp	r5, #4
1a0033a6:	dc01      	bgt.n	1a0033ac <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a0033a8:	2600      	movs	r6, #0
1a0033aa:	e7f6      	b.n	1a00339a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a0033ac:	bcf0      	pop	{r4, r5, r6, r7}
1a0033ae:	4770      	bx	lr
1a0033b0:	094c5eff 	.word	0x094c5eff
1a0033b4:	1312d000 	.word	0x1312d000

1a0033b8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0033ba:	b099      	sub	sp, #100	; 0x64
1a0033bc:	4605      	mov	r5, r0
1a0033be:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0033c0:	225c      	movs	r2, #92	; 0x5c
1a0033c2:	2100      	movs	r1, #0
1a0033c4:	a801      	add	r0, sp, #4
1a0033c6:	f001 fef0 	bl	1a0051aa <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0033ca:	2380      	movs	r3, #128	; 0x80
1a0033cc:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0033ce:	6963      	ldr	r3, [r4, #20]
1a0033d0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0033d2:	7923      	ldrb	r3, [r4, #4]
1a0033d4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0033d8:	4669      	mov	r1, sp
1a0033da:	4628      	mov	r0, r5
1a0033dc:	f7ff ff9c 	bl	1a003318 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0033e0:	9b06      	ldr	r3, [sp, #24]
1a0033e2:	42ab      	cmp	r3, r5
1a0033e4:	d027      	beq.n	1a003436 <pll_get_frac+0x7e>
	if (val < 0)
1a0033e6:	1aeb      	subs	r3, r5, r3
1a0033e8:	d42e      	bmi.n	1a003448 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0033ea:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0033ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0033ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0033f2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0033f4:	6963      	ldr	r3, [r4, #20]
1a0033f6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0033f8:	7923      	ldrb	r3, [r4, #4]
1a0033fa:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0033fe:	a910      	add	r1, sp, #64	; 0x40
1a003400:	4628      	mov	r0, r5
1a003402:	f7ff ff89 	bl	1a003318 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003406:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003408:	42ab      	cmp	r3, r5
1a00340a:	d01f      	beq.n	1a00344c <pll_get_frac+0x94>
	if (val < 0)
1a00340c:	1aeb      	subs	r3, r5, r3
1a00340e:	d425      	bmi.n	1a00345c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003410:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003412:	4b2b      	ldr	r3, [pc, #172]	; (1a0034c0 <pll_get_frac+0x108>)
1a003414:	429d      	cmp	r5, r3
1a003416:	d923      	bls.n	1a003460 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00341a:	1aed      	subs	r5, r5, r3
1a00341c:	d433      	bmi.n	1a003486 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00341e:	42ae      	cmp	r6, r5
1a003420:	dc3b      	bgt.n	1a00349a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003422:	42be      	cmp	r6, r7
1a003424:	dc31      	bgt.n	1a00348a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003426:	466d      	mov	r5, sp
1a003428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00342a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00342c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003434:	e006      	b.n	1a003444 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003436:	466d      	mov	r5, sp
1a003438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00343a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00343c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003444:	b019      	add	sp, #100	; 0x64
1a003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003448:	425b      	negs	r3, r3
1a00344a:	e7ce      	b.n	1a0033ea <pll_get_frac+0x32>
		*ppll = pll[2];
1a00344c:	ad10      	add	r5, sp, #64	; 0x40
1a00344e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003452:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00345a:	e7f3      	b.n	1a003444 <pll_get_frac+0x8c>
		return -val;
1a00345c:	425b      	negs	r3, r3
1a00345e:	e7d7      	b.n	1a003410 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003460:	2340      	movs	r3, #64	; 0x40
1a003462:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003464:	6963      	ldr	r3, [r4, #20]
1a003466:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003468:	a908      	add	r1, sp, #32
1a00346a:	4628      	mov	r0, r5
1a00346c:	f7ff ff54 	bl	1a003318 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003472:	42ab      	cmp	r3, r5
1a003474:	d1d0      	bne.n	1a003418 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003476:	ad08      	add	r5, sp, #32
1a003478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00347a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00347c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003484:	e7de      	b.n	1a003444 <pll_get_frac+0x8c>
		return -val;
1a003486:	426d      	negs	r5, r5
1a003488:	e7c9      	b.n	1a00341e <pll_get_frac+0x66>
			*ppll = pll[2];
1a00348a:	ad10      	add	r5, sp, #64	; 0x40
1a00348c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00348e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003490:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003498:	e7d4      	b.n	1a003444 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00349a:	42af      	cmp	r7, r5
1a00349c:	db07      	blt.n	1a0034ae <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00349e:	ad08      	add	r5, sp, #32
1a0034a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0034a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0034a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0034a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0034ac:	e7ca      	b.n	1a003444 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0034ae:	ad10      	add	r5, sp, #64	; 0x40
1a0034b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0034b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0034b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0034b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0034bc:	e7c2      	b.n	1a003444 <pll_get_frac+0x8c>
1a0034be:	bf00      	nop
1a0034c0:	068e7780 	.word	0x068e7780

1a0034c4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0034c4:	b430      	push	{r4, r5}
1a0034c6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0034c8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0034ca:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0034cc:	e000      	b.n	1a0034d0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0034ce:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0034d0:	281c      	cmp	r0, #28
1a0034d2:	d118      	bne.n	1a003506 <Chip_Clock_FindBaseClock+0x42>
1a0034d4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0034d8:	0051      	lsls	r1, r2, #1
1a0034da:	4a0c      	ldr	r2, [pc, #48]	; (1a00350c <Chip_Clock_FindBaseClock+0x48>)
1a0034dc:	440a      	add	r2, r1
1a0034de:	7914      	ldrb	r4, [r2, #4]
1a0034e0:	4284      	cmp	r4, r0
1a0034e2:	d010      	beq.n	1a003506 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0034e4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0034e8:	004a      	lsls	r2, r1, #1
1a0034ea:	4908      	ldr	r1, [pc, #32]	; (1a00350c <Chip_Clock_FindBaseClock+0x48>)
1a0034ec:	5a8a      	ldrh	r2, [r1, r2]
1a0034ee:	42aa      	cmp	r2, r5
1a0034f0:	d8ed      	bhi.n	1a0034ce <Chip_Clock_FindBaseClock+0xa>
1a0034f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0034f6:	0051      	lsls	r1, r2, #1
1a0034f8:	4a04      	ldr	r2, [pc, #16]	; (1a00350c <Chip_Clock_FindBaseClock+0x48>)
1a0034fa:	440a      	add	r2, r1
1a0034fc:	8852      	ldrh	r2, [r2, #2]
1a0034fe:	42aa      	cmp	r2, r5
1a003500:	d3e5      	bcc.n	1a0034ce <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003502:	4620      	mov	r0, r4
1a003504:	e7e4      	b.n	1a0034d0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003506:	bc30      	pop	{r4, r5}
1a003508:	4770      	bx	lr
1a00350a:	bf00      	nop
1a00350c:	1a0061d4 	.word	0x1a0061d4

1a003510 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003510:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003516:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003518:	4a0d      	ldr	r2, [pc, #52]	; (1a003550 <Chip_Clock_EnableCrystal+0x40>)
1a00351a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00351c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003520:	6992      	ldr	r2, [r2, #24]
1a003522:	428a      	cmp	r2, r1
1a003524:	d001      	beq.n	1a00352a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003526:	4a0a      	ldr	r2, [pc, #40]	; (1a003550 <Chip_Clock_EnableCrystal+0x40>)
1a003528:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00352a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00352e:	4a09      	ldr	r2, [pc, #36]	; (1a003554 <Chip_Clock_EnableCrystal+0x44>)
1a003530:	6811      	ldr	r1, [r2, #0]
1a003532:	4a09      	ldr	r2, [pc, #36]	; (1a003558 <Chip_Clock_EnableCrystal+0x48>)
1a003534:	4291      	cmp	r1, r2
1a003536:	d901      	bls.n	1a00353c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003538:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00353c:	4a04      	ldr	r2, [pc, #16]	; (1a003550 <Chip_Clock_EnableCrystal+0x40>)
1a00353e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003540:	9b01      	ldr	r3, [sp, #4]
1a003542:	1e5a      	subs	r2, r3, #1
1a003544:	9201      	str	r2, [sp, #4]
1a003546:	2b00      	cmp	r3, #0
1a003548:	d1fa      	bne.n	1a003540 <Chip_Clock_EnableCrystal+0x30>
}
1a00354a:	b002      	add	sp, #8
1a00354c:	4770      	bx	lr
1a00354e:	bf00      	nop
1a003550:	40050000 	.word	0x40050000
1a003554:	1a00613c 	.word	0x1a00613c
1a003558:	01312cff 	.word	0x01312cff

1a00355c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00355c:	3012      	adds	r0, #18
1a00355e:	4b05      	ldr	r3, [pc, #20]	; (1a003574 <Chip_Clock_GetDividerSource+0x18>)
1a003560:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003564:	f010 0f01 	tst.w	r0, #1
1a003568:	d102      	bne.n	1a003570 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00356a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00356e:	4770      	bx	lr
		return CLKINPUT_PD;
1a003570:	2011      	movs	r0, #17
}
1a003572:	4770      	bx	lr
1a003574:	40050000 	.word	0x40050000

1a003578 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003578:	f100 0212 	add.w	r2, r0, #18
1a00357c:	4b03      	ldr	r3, [pc, #12]	; (1a00358c <Chip_Clock_GetDividerDivisor+0x14>)
1a00357e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003582:	4b03      	ldr	r3, [pc, #12]	; (1a003590 <Chip_Clock_GetDividerDivisor+0x18>)
1a003584:	5c18      	ldrb	r0, [r3, r0]
}
1a003586:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00358a:	4770      	bx	lr
1a00358c:	40050000 	.word	0x40050000
1a003590:	1a0061cc 	.word	0x1a0061cc

1a003594 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003594:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003596:	2810      	cmp	r0, #16
1a003598:	d80a      	bhi.n	1a0035b0 <Chip_Clock_GetClockInputHz+0x1c>
1a00359a:	e8df f000 	tbb	[pc, r0]
1a00359e:	0b44      	.short	0x0b44
1a0035a0:	0921180d 	.word	0x0921180d
1a0035a4:	2d2a2724 	.word	0x2d2a2724
1a0035a8:	34300909 	.word	0x34300909
1a0035ac:	3c38      	.short	0x3c38
1a0035ae:	40          	.byte	0x40
1a0035af:	00          	.byte	0x00
	uint32_t rate = 0;
1a0035b0:	2000      	movs	r0, #0
1a0035b2:	e03a      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0035b4:	481e      	ldr	r0, [pc, #120]	; (1a003630 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0035b6:	e038      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0035b8:	4b1e      	ldr	r3, [pc, #120]	; (1a003634 <Chip_Clock_GetClockInputHz+0xa0>)
1a0035ba:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0035be:	f003 0307 	and.w	r3, r3, #7
1a0035c2:	2b04      	cmp	r3, #4
1a0035c4:	d001      	beq.n	1a0035ca <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0035c6:	481c      	ldr	r0, [pc, #112]	; (1a003638 <Chip_Clock_GetClockInputHz+0xa4>)
1a0035c8:	e02f      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a0035ca:	2000      	movs	r0, #0
1a0035cc:	e02d      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0035ce:	4b19      	ldr	r3, [pc, #100]	; (1a003634 <Chip_Clock_GetClockInputHz+0xa0>)
1a0035d0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0035d4:	f003 0307 	and.w	r3, r3, #7
1a0035d8:	2b04      	cmp	r3, #4
1a0035da:	d027      	beq.n	1a00362c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0035dc:	4816      	ldr	r0, [pc, #88]	; (1a003638 <Chip_Clock_GetClockInputHz+0xa4>)
1a0035de:	e024      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0035e0:	4b16      	ldr	r3, [pc, #88]	; (1a00363c <Chip_Clock_GetClockInputHz+0xa8>)
1a0035e2:	6818      	ldr	r0, [r3, #0]
		break;
1a0035e4:	e021      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0035e6:	4b16      	ldr	r3, [pc, #88]	; (1a003640 <Chip_Clock_GetClockInputHz+0xac>)
1a0035e8:	6818      	ldr	r0, [r3, #0]
		break;
1a0035ea:	e01e      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0035ec:	4b15      	ldr	r3, [pc, #84]	; (1a003644 <Chip_Clock_GetClockInputHz+0xb0>)
1a0035ee:	6818      	ldr	r0, [r3, #0]
		break;
1a0035f0:	e01b      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0035f2:	4b14      	ldr	r3, [pc, #80]	; (1a003644 <Chip_Clock_GetClockInputHz+0xb0>)
1a0035f4:	6858      	ldr	r0, [r3, #4]
		break;
1a0035f6:	e018      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0035f8:	f000 f868 	bl	1a0036cc <Chip_Clock_GetMainPLLHz>
		break;
1a0035fc:	e015      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0035fe:	2100      	movs	r1, #0
1a003600:	f000 f89a 	bl	1a003738 <Chip_Clock_GetDivRate>
		break;
1a003604:	e011      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003606:	2101      	movs	r1, #1
1a003608:	f000 f896 	bl	1a003738 <Chip_Clock_GetDivRate>
		break;
1a00360c:	e00d      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00360e:	2102      	movs	r1, #2
1a003610:	f000 f892 	bl	1a003738 <Chip_Clock_GetDivRate>
		break;
1a003614:	e009      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003616:	2103      	movs	r1, #3
1a003618:	f000 f88e 	bl	1a003738 <Chip_Clock_GetDivRate>
		break;
1a00361c:	e005      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00361e:	2104      	movs	r1, #4
1a003620:	f000 f88a 	bl	1a003738 <Chip_Clock_GetDivRate>
		break;
1a003624:	e001      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a003626:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00362a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a00362c:	4806      	ldr	r0, [pc, #24]	; (1a003648 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00362e:	e7fc      	b.n	1a00362a <Chip_Clock_GetClockInputHz+0x96>
1a003630:	00b71b00 	.word	0x00b71b00
1a003634:	40043000 	.word	0x40043000
1a003638:	017d7840 	.word	0x017d7840
1a00363c:	1a006110 	.word	0x1a006110
1a003640:	1a00613c 	.word	0x1a00613c
1a003644:	10002b7c 	.word	0x10002b7c
1a003648:	02faf080 	.word	0x02faf080

1a00364c <Chip_Clock_CalcMainPLLValue>:
{
1a00364c:	b538      	push	{r3, r4, r5, lr}
1a00364e:	4605      	mov	r5, r0
1a003650:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003652:	7908      	ldrb	r0, [r1, #4]
1a003654:	f7ff ff9e 	bl	1a003594 <Chip_Clock_GetClockInputHz>
1a003658:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00365a:	4b19      	ldr	r3, [pc, #100]	; (1a0036c0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00365c:	442b      	add	r3, r5
1a00365e:	4a19      	ldr	r2, [pc, #100]	; (1a0036c4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003660:	4293      	cmp	r3, r2
1a003662:	d821      	bhi.n	1a0036a8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003664:	b318      	cbz	r0, 1a0036ae <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003666:	2380      	movs	r3, #128	; 0x80
1a003668:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00366a:	2300      	movs	r3, #0
1a00366c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00366e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003670:	fbb5 f3f0 	udiv	r3, r5, r0
1a003674:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003676:	4a14      	ldr	r2, [pc, #80]	; (1a0036c8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003678:	4295      	cmp	r5, r2
1a00367a:	d903      	bls.n	1a003684 <Chip_Clock_CalcMainPLLValue+0x38>
1a00367c:	fb03 f000 	mul.w	r0, r3, r0
1a003680:	42a8      	cmp	r0, r5
1a003682:	d007      	beq.n	1a003694 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003684:	4621      	mov	r1, r4
1a003686:	4628      	mov	r0, r5
1a003688:	f7ff fe96 	bl	1a0033b8 <pll_get_frac>
		if (!ppll->nsel) {
1a00368c:	68a3      	ldr	r3, [r4, #8]
1a00368e:	b18b      	cbz	r3, 1a0036b4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003690:	3b01      	subs	r3, #1
1a003692:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003694:	6923      	ldr	r3, [r4, #16]
1a003696:	b183      	cbz	r3, 1a0036ba <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003698:	68e2      	ldr	r2, [r4, #12]
1a00369a:	b10a      	cbz	r2, 1a0036a0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00369c:	3a01      	subs	r2, #1
1a00369e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0036a0:	3b01      	subs	r3, #1
1a0036a2:	6123      	str	r3, [r4, #16]
	return 0;
1a0036a4:	2000      	movs	r0, #0
}
1a0036a6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0036a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0036ac:	e7fb      	b.n	1a0036a6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0036ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0036b2:	e7f8      	b.n	1a0036a6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0036b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0036b8:	e7f5      	b.n	1a0036a6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0036ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0036be:	e7f2      	b.n	1a0036a6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0036c0:	ff6b3a10 	.word	0xff6b3a10
1a0036c4:	0b940510 	.word	0x0b940510
1a0036c8:	094c5eff 	.word	0x094c5eff

1a0036cc <Chip_Clock_GetMainPLLHz>:
{
1a0036cc:	b530      	push	{r4, r5, lr}
1a0036ce:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0036d0:	4d17      	ldr	r5, [pc, #92]	; (1a003730 <Chip_Clock_GetMainPLLHz+0x64>)
1a0036d2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0036d4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0036d8:	f7ff ff5c 	bl	1a003594 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0036dc:	4b15      	ldr	r3, [pc, #84]	; (1a003734 <Chip_Clock_GetMainPLLHz+0x68>)
1a0036de:	681b      	ldr	r3, [r3, #0]
1a0036e0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0036e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0036e4:	f013 0f01 	tst.w	r3, #1
1a0036e8:	d020      	beq.n	1a00372c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0036ea:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0036ee:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0036f2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0036f6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0036fa:	3301      	adds	r3, #1
	n = nsel + 1;
1a0036fc:	3201      	adds	r2, #1
	p = ptab[psel];
1a0036fe:	f10d 0c08 	add.w	ip, sp, #8
1a003702:	4461      	add	r1, ip
1a003704:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003708:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00370c:	d108      	bne.n	1a003720 <Chip_Clock_GetMainPLLHz+0x54>
1a00370e:	b93d      	cbnz	r5, 1a003720 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003710:	0049      	lsls	r1, r1, #1
1a003712:	fbb3 f3f1 	udiv	r3, r3, r1
1a003716:	fbb0 f0f2 	udiv	r0, r0, r2
1a00371a:	fb00 f003 	mul.w	r0, r0, r3
1a00371e:	e003      	b.n	1a003728 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a003720:	fbb0 f0f2 	udiv	r0, r0, r2
1a003724:	fb03 f000 	mul.w	r0, r3, r0
}
1a003728:	b003      	add	sp, #12
1a00372a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a00372c:	2000      	movs	r0, #0
1a00372e:	e7fb      	b.n	1a003728 <Chip_Clock_GetMainPLLHz+0x5c>
1a003730:	40050000 	.word	0x40050000
1a003734:	1a0061c8 	.word	0x1a0061c8

1a003738 <Chip_Clock_GetDivRate>:
{
1a003738:	b538      	push	{r3, r4, r5, lr}
1a00373a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00373c:	4608      	mov	r0, r1
1a00373e:	f7ff ff0d 	bl	1a00355c <Chip_Clock_GetDividerSource>
1a003742:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003744:	4620      	mov	r0, r4
1a003746:	f7ff ff17 	bl	1a003578 <Chip_Clock_GetDividerDivisor>
1a00374a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00374c:	4628      	mov	r0, r5
1a00374e:	f7ff ff21 	bl	1a003594 <Chip_Clock_GetClockInputHz>
1a003752:	3401      	adds	r4, #1
}
1a003754:	fbb0 f0f4 	udiv	r0, r0, r4
1a003758:	bd38      	pop	{r3, r4, r5, pc}
1a00375a:	Address 0x000000001a00375a is out of bounds.


1a00375c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00375c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00375e:	f100 0416 	add.w	r4, r0, #22
1a003762:	00a4      	lsls	r4, r4, #2
1a003764:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003768:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00376c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00376e:	281b      	cmp	r0, #27
1a003770:	d813      	bhi.n	1a00379a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003772:	2911      	cmp	r1, #17
1a003774:	d01a      	beq.n	1a0037ac <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003776:	4d0e      	ldr	r5, [pc, #56]	; (1a0037b0 <Chip_Clock_SetBaseClock+0x54>)
1a003778:	4025      	ands	r5, r4

			if (autoblocken) {
1a00377a:	b10a      	cbz	r2, 1a003780 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00377c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003780:	b10b      	cbz	r3, 1a003786 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003782:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003786:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00378a:	3016      	adds	r0, #22
1a00378c:	0080      	lsls	r0, r0, #2
1a00378e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003792:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003796:	6045      	str	r5, [r0, #4]
1a003798:	e008      	b.n	1a0037ac <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00379a:	f044 0401 	orr.w	r4, r4, #1
1a00379e:	3016      	adds	r0, #22
1a0037a0:	0080      	lsls	r0, r0, #2
1a0037a2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0037a6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0037aa:	6044      	str	r4, [r0, #4]
	}
}
1a0037ac:	bc30      	pop	{r4, r5}
1a0037ae:	4770      	bx	lr
1a0037b0:	e0fff7fe 	.word	0xe0fff7fe

1a0037b4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0037b4:	281b      	cmp	r0, #27
1a0037b6:	d80c      	bhi.n	1a0037d2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0037b8:	3016      	adds	r0, #22
1a0037ba:	0080      	lsls	r0, r0, #2
1a0037bc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0037c0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0037c4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0037c6:	f010 0f01 	tst.w	r0, #1
1a0037ca:	d104      	bne.n	1a0037d6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0037cc:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0037d0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0037d2:	2011      	movs	r0, #17
1a0037d4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0037d6:	2011      	movs	r0, #17
}
1a0037d8:	4770      	bx	lr

1a0037da <Chip_Clock_GetBaseClocktHz>:
{
1a0037da:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0037dc:	f7ff ffea 	bl	1a0037b4 <Chip_Clock_GetBaseClock>
1a0037e0:	f7ff fed8 	bl	1a003594 <Chip_Clock_GetClockInputHz>
}
1a0037e4:	bd08      	pop	{r3, pc}
1a0037e6:	Address 0x000000001a0037e6 is out of bounds.


1a0037e8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0037e8:	b971      	cbnz	r1, 1a003808 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0037ea:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0037ec:	b10a      	cbz	r2, 1a0037f2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0037ee:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0037f2:	2b02      	cmp	r3, #2
1a0037f4:	d00a      	beq.n	1a00380c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0037f6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0037fa:	d30a      	bcc.n	1a003812 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0037fc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003800:	4b06      	ldr	r3, [pc, #24]	; (1a00381c <Chip_Clock_EnableOpts+0x34>)
1a003802:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003806:	4770      	bx	lr
		reg |= (1 << 1);
1a003808:	2103      	movs	r1, #3
1a00380a:	e7ef      	b.n	1a0037ec <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00380c:	f041 0120 	orr.w	r1, r1, #32
1a003810:	e7f1      	b.n	1a0037f6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003812:	3020      	adds	r0, #32
1a003814:	4b02      	ldr	r3, [pc, #8]	; (1a003820 <Chip_Clock_EnableOpts+0x38>)
1a003816:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00381a:	4770      	bx	lr
1a00381c:	40052000 	.word	0x40052000
1a003820:	40051000 	.word	0x40051000

1a003824 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003824:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003828:	d309      	bcc.n	1a00383e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00382a:	4a09      	ldr	r2, [pc, #36]	; (1a003850 <Chip_Clock_Enable+0x2c>)
1a00382c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003830:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003834:	f043 0301 	orr.w	r3, r3, #1
1a003838:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00383c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00383e:	4a05      	ldr	r2, [pc, #20]	; (1a003854 <Chip_Clock_Enable+0x30>)
1a003840:	3020      	adds	r0, #32
1a003842:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003846:	f043 0301 	orr.w	r3, r3, #1
1a00384a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00384e:	4770      	bx	lr
1a003850:	40052000 	.word	0x40052000
1a003854:	40051000 	.word	0x40051000

1a003858 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003858:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00385a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00385e:	d309      	bcc.n	1a003874 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003860:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003864:	4a0d      	ldr	r2, [pc, #52]	; (1a00389c <Chip_Clock_GetRate+0x44>)
1a003866:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00386a:	f014 0f01 	tst.w	r4, #1
1a00386e:	d107      	bne.n	1a003880 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003870:	2000      	movs	r0, #0
	}

	return rate;
}
1a003872:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003874:	f100 0320 	add.w	r3, r0, #32
1a003878:	4a09      	ldr	r2, [pc, #36]	; (1a0038a0 <Chip_Clock_GetRate+0x48>)
1a00387a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00387e:	e7f4      	b.n	1a00386a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003880:	f7ff fe20 	bl	1a0034c4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003884:	f7ff ffa9 	bl	1a0037da <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003888:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00388c:	d103      	bne.n	1a003896 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00388e:	2301      	movs	r3, #1
		rate = rate / div;
1a003890:	fbb0 f0f3 	udiv	r0, r0, r3
1a003894:	e7ed      	b.n	1a003872 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003896:	2302      	movs	r3, #2
1a003898:	e7fa      	b.n	1a003890 <Chip_Clock_GetRate+0x38>
1a00389a:	bf00      	nop
1a00389c:	40052000 	.word	0x40052000
1a0038a0:	40051000 	.word	0x40051000

1a0038a4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0038a4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0038a6:	2069      	movs	r0, #105	; 0x69
1a0038a8:	f7ff ffd6 	bl	1a003858 <Chip_Clock_GetRate>
1a0038ac:	4b01      	ldr	r3, [pc, #4]	; (1a0038b4 <SystemCoreClockUpdate+0x10>)
1a0038ae:	6018      	str	r0, [r3, #0]
}
1a0038b0:	bd08      	pop	{r3, pc}
1a0038b2:	bf00      	nop
1a0038b4:	10002c50 	.word	0x10002c50

1a0038b8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0038b8:	b570      	push	{r4, r5, r6, lr}
1a0038ba:	b08a      	sub	sp, #40	; 0x28
1a0038bc:	4605      	mov	r5, r0
1a0038be:	460e      	mov	r6, r1
1a0038c0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0038c2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0038c6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0038c8:	2806      	cmp	r0, #6
1a0038ca:	d018      	beq.n	1a0038fe <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0038cc:	2300      	movs	r3, #0
1a0038ce:	2201      	movs	r2, #1
1a0038d0:	4629      	mov	r1, r5
1a0038d2:	2004      	movs	r0, #4
1a0038d4:	f7ff ff42 	bl	1a00375c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0038d8:	4a4a      	ldr	r2, [pc, #296]	; (1a003a04 <Chip_SetupCoreClock+0x14c>)
1a0038da:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0038dc:	f043 0301 	orr.w	r3, r3, #1
1a0038e0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0038e2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0038e6:	a901      	add	r1, sp, #4
1a0038e8:	4630      	mov	r0, r6
1a0038ea:	f7ff feaf 	bl	1a00364c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0038ee:	4b46      	ldr	r3, [pc, #280]	; (1a003a08 <Chip_SetupCoreClock+0x150>)
1a0038f0:	429e      	cmp	r6, r3
1a0038f2:	d916      	bls.n	1a003922 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0038f4:	9b01      	ldr	r3, [sp, #4]
1a0038f6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0038fa:	d003      	beq.n	1a003904 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0038fc:	e7fe      	b.n	1a0038fc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0038fe:	f7ff fe07 	bl	1a003510 <Chip_Clock_EnableCrystal>
1a003902:	e7e3      	b.n	1a0038cc <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a003904:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003908:	d005      	beq.n	1a003916 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00390a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00390e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003910:	2500      	movs	r5, #0
			direct = 1;
1a003912:	2601      	movs	r6, #1
1a003914:	e007      	b.n	1a003926 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003916:	9b04      	ldr	r3, [sp, #16]
1a003918:	3301      	adds	r3, #1
1a00391a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00391c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00391e:	2600      	movs	r6, #0
1a003920:	e001      	b.n	1a003926 <Chip_SetupCoreClock+0x6e>
1a003922:	2500      	movs	r5, #0
1a003924:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003926:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00392a:	9b01      	ldr	r3, [sp, #4]
1a00392c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003930:	9a05      	ldr	r2, [sp, #20]
1a003932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003936:	9a03      	ldr	r2, [sp, #12]
1a003938:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00393c:	9a04      	ldr	r2, [sp, #16]
1a00393e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003942:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003946:	4a2f      	ldr	r2, [pc, #188]	; (1a003a04 <Chip_SetupCoreClock+0x14c>)
1a003948:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00394a:	4b2e      	ldr	r3, [pc, #184]	; (1a003a04 <Chip_SetupCoreClock+0x14c>)
1a00394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00394e:	f013 0f01 	tst.w	r3, #1
1a003952:	d0fa      	beq.n	1a00394a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003954:	2300      	movs	r3, #0
1a003956:	2201      	movs	r2, #1
1a003958:	2109      	movs	r1, #9
1a00395a:	2004      	movs	r0, #4
1a00395c:	f7ff fefe 	bl	1a00375c <Chip_Clock_SetBaseClock>

	if (direct) {
1a003960:	b306      	cbz	r6, 1a0039a4 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003962:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003966:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003968:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00396a:	1e5a      	subs	r2, r3, #1
1a00396c:	9209      	str	r2, [sp, #36]	; 0x24
1a00396e:	2b00      	cmp	r3, #0
1a003970:	d1fa      	bne.n	1a003968 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003972:	9b01      	ldr	r3, [sp, #4]
1a003974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003978:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00397a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00397e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003982:	9a05      	ldr	r2, [sp, #20]
1a003984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003988:	9a03      	ldr	r2, [sp, #12]
1a00398a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00398e:	9a04      	ldr	r2, [sp, #16]
1a003990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003994:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003998:	4a1a      	ldr	r2, [pc, #104]	; (1a003a04 <Chip_SetupCoreClock+0x14c>)
1a00399a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00399c:	2c00      	cmp	r4, #0
1a00399e:	d12e      	bne.n	1a0039fe <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0039a0:	b00a      	add	sp, #40	; 0x28
1a0039a2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0039a4:	2d00      	cmp	r5, #0
1a0039a6:	d0f9      	beq.n	1a00399c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0039a8:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0039ac:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0039ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0039b0:	1e5a      	subs	r2, r3, #1
1a0039b2:	9209      	str	r2, [sp, #36]	; 0x24
1a0039b4:	2b00      	cmp	r3, #0
1a0039b6:	d1fa      	bne.n	1a0039ae <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a0039b8:	9b04      	ldr	r3, [sp, #16]
1a0039ba:	1e5a      	subs	r2, r3, #1
1a0039bc:	9204      	str	r2, [sp, #16]
1a0039be:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0039c2:	9b01      	ldr	r3, [sp, #4]
1a0039c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0039c8:	9905      	ldr	r1, [sp, #20]
1a0039ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0039ce:	9903      	ldr	r1, [sp, #12]
1a0039d0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0039d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0039d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0039dc:	4a09      	ldr	r2, [pc, #36]	; (1a003a04 <Chip_SetupCoreClock+0x14c>)
1a0039de:	6453      	str	r3, [r2, #68]	; 0x44
1a0039e0:	e7dc      	b.n	1a00399c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0039e2:	480a      	ldr	r0, [pc, #40]	; (1a003a0c <Chip_SetupCoreClock+0x154>)
1a0039e4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0039e8:	78cb      	ldrb	r3, [r1, #3]
1a0039ea:	788a      	ldrb	r2, [r1, #2]
1a0039ec:	7849      	ldrb	r1, [r1, #1]
1a0039ee:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0039f2:	f7ff feb3 	bl	1a00375c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0039f6:	3401      	adds	r4, #1
1a0039f8:	2c11      	cmp	r4, #17
1a0039fa:	d9f2      	bls.n	1a0039e2 <Chip_SetupCoreClock+0x12a>
1a0039fc:	e7d0      	b.n	1a0039a0 <Chip_SetupCoreClock+0xe8>
1a0039fe:	2400      	movs	r4, #0
1a003a00:	e7fa      	b.n	1a0039f8 <Chip_SetupCoreClock+0x140>
1a003a02:	bf00      	nop
1a003a04:	40050000 	.word	0x40050000
1a003a08:	068e7780 	.word	0x068e7780
1a003a0c:	1a006240 	.word	0x1a006240

1a003a10 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003a10:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a003a12:	6843      	ldr	r3, [r0, #4]
1a003a14:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a18:	2b30      	cmp	r3, #48	; 0x30
1a003a1a:	d04c      	beq.n	1a003ab6 <Chip_I2CM_XferHandler+0xa6>
1a003a1c:	d908      	bls.n	1a003a30 <Chip_I2CM_XferHandler+0x20>
1a003a1e:	2b48      	cmp	r3, #72	; 0x48
1a003a20:	d06c      	beq.n	1a003afc <Chip_I2CM_XferHandler+0xec>
1a003a22:	d934      	bls.n	1a003a8e <Chip_I2CM_XferHandler+0x7e>
1a003a24:	2b58      	cmp	r3, #88	; 0x58
1a003a26:	d058      	beq.n	1a003ada <Chip_I2CM_XferHandler+0xca>
1a003a28:	2bf8      	cmp	r3, #248	; 0xf8
1a003a2a:	d13e      	bne.n	1a003aaa <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a003a2c:	2000      	movs	r0, #0
1a003a2e:	e02b      	b.n	1a003a88 <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a30:	2b10      	cmp	r3, #16
1a003a32:	d016      	beq.n	1a003a62 <Chip_I2CM_XferHandler+0x52>
1a003a34:	d90e      	bls.n	1a003a54 <Chip_I2CM_XferHandler+0x44>
1a003a36:	2b20      	cmp	r3, #32
1a003a38:	d03d      	beq.n	1a003ab6 <Chip_I2CM_XferHandler+0xa6>
1a003a3a:	2b28      	cmp	r3, #40	; 0x28
1a003a3c:	d001      	beq.n	1a003a42 <Chip_I2CM_XferHandler+0x32>
1a003a3e:	2b18      	cmp	r3, #24
1a003a40:	d135      	bne.n	1a003aae <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a003a42:	888b      	ldrh	r3, [r1, #4]
1a003a44:	2b00      	cmp	r3, #0
1a003a46:	d13e      	bne.n	1a003ac6 <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a003a48:	88cb      	ldrh	r3, [r1, #6]
1a003a4a:	2b00      	cmp	r3, #0
1a003a4c:	d15e      	bne.n	1a003b0c <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a003a4e:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a003a50:	232c      	movs	r3, #44	; 0x2c
1a003a52:	e00f      	b.n	1a003a74 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a54:	b91b      	cbnz	r3, 1a003a5e <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a003a56:	2303      	movs	r3, #3
1a003a58:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003a5a:	232c      	movs	r3, #44	; 0x2c
        break;
1a003a5c:	e00a      	b.n	1a003a74 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a5e:	2b08      	cmp	r3, #8
1a003a60:	d125      	bne.n	1a003aae <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003a62:	780a      	ldrb	r2, [r1, #0]
1a003a64:	888b      	ldrh	r3, [r1, #4]
1a003a66:	fab3 f383 	clz	r3, r3
1a003a6a:	095b      	lsrs	r3, r3, #5
1a003a6c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003a70:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003a72:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003a74:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003a78:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a003a7a:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a003a7e:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a003a80:	8848      	ldrh	r0, [r1, #2]
1a003a82:	38ff      	subs	r0, #255	; 0xff
1a003a84:	bf18      	it	ne
1a003a86:	2001      	movne	r0, #1
}
1a003a88:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003a8c:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a8e:	2b38      	cmp	r3, #56	; 0x38
1a003a90:	d038      	beq.n	1a003b04 <Chip_I2CM_XferHandler+0xf4>
1a003a92:	2b40      	cmp	r3, #64	; 0x40
1a003a94:	d10b      	bne.n	1a003aae <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003a96:	88ca      	ldrh	r2, [r1, #6]
1a003a98:	2a01      	cmp	r2, #1
1a003a9a:	d927      	bls.n	1a003aec <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a003a9c:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a003a9e:	2a00      	cmp	r2, #0
1a003aa0:	d1e8      	bne.n	1a003a74 <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a003aa2:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003aa4:	f023 0310 	bic.w	r3, r3, #16
1a003aa8:	e7e4      	b.n	1a003a74 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003aaa:	2b50      	cmp	r3, #80	; 0x50
1a003aac:	d015      	beq.n	1a003ada <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a003aae:	2301      	movs	r3, #1
1a003ab0:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003ab2:	232c      	movs	r3, #44	; 0x2c
        break;
1a003ab4:	e7de      	b.n	1a003a74 <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a003ab6:	784b      	ldrb	r3, [r1, #1]
1a003ab8:	f013 0f01 	tst.w	r3, #1
1a003abc:	d1c1      	bne.n	1a003a42 <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a003abe:	2302      	movs	r3, #2
1a003ac0:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003ac2:	232c      	movs	r3, #44	; 0x2c
			break;
1a003ac4:	e7d6      	b.n	1a003a74 <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a003ac6:	688b      	ldr	r3, [r1, #8]
1a003ac8:	1c5a      	adds	r2, r3, #1
1a003aca:	608a      	str	r2, [r1, #8]
1a003acc:	781b      	ldrb	r3, [r3, #0]
1a003ace:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003ad0:	888b      	ldrh	r3, [r1, #4]
1a003ad2:	3b01      	subs	r3, #1
1a003ad4:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a003ad6:	233c      	movs	r3, #60	; 0x3c
1a003ad8:	e7cc      	b.n	1a003a74 <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a003ada:	6882      	ldr	r2, [r0, #8]
1a003adc:	68cb      	ldr	r3, [r1, #12]
1a003ade:	1c5c      	adds	r4, r3, #1
1a003ae0:	60cc      	str	r4, [r1, #12]
1a003ae2:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a003ae4:	88cb      	ldrh	r3, [r1, #6]
1a003ae6:	3b01      	subs	r3, #1
1a003ae8:	80cb      	strh	r3, [r1, #6]
1a003aea:	e7d4      	b.n	1a003a96 <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003aec:	784b      	ldrb	r3, [r1, #1]
1a003aee:	f013 0f02 	tst.w	r3, #2
1a003af2:	d101      	bne.n	1a003af8 <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a003af4:	233c      	movs	r3, #60	; 0x3c
1a003af6:	e7d2      	b.n	1a003a9e <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a003af8:	2338      	movs	r3, #56	; 0x38
1a003afa:	e7d0      	b.n	1a003a9e <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a003afc:	2304      	movs	r3, #4
1a003afe:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003b00:	232c      	movs	r3, #44	; 0x2c
		break;
1a003b02:	e7b7      	b.n	1a003a74 <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a003b04:	2305      	movs	r3, #5
1a003b06:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a003b08:	233c      	movs	r3, #60	; 0x3c
		break;
1a003b0a:	e7b3      	b.n	1a003a74 <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a003b0c:	231c      	movs	r3, #28
1a003b0e:	e7b1      	b.n	1a003a74 <Chip_I2CM_XferHandler+0x64>

1a003b10 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a003b10:	23ff      	movs	r3, #255	; 0xff
1a003b12:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a003b14:	232c      	movs	r3, #44	; 0x2c
1a003b16:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a003b18:	2360      	movs	r3, #96	; 0x60
1a003b1a:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a003b1c:	4770      	bx	lr

1a003b1e <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003b1e:	b538      	push	{r3, r4, r5, lr}
1a003b20:	4604      	mov	r4, r0
1a003b22:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a003b24:	f7ff fff4 	bl	1a003b10 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a003b28:	2000      	movs	r0, #0

	while (ret == 0) {
1a003b2a:	e003      	b.n	1a003b34 <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a003b2c:	4629      	mov	r1, r5
1a003b2e:	4620      	mov	r0, r4
1a003b30:	f7ff ff6e 	bl	1a003a10 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a003b34:	b920      	cbnz	r0, 1a003b40 <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a003b36:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a003b38:	f013 0f08 	tst.w	r3, #8
1a003b3c:	d0fb      	beq.n	1a003b36 <Chip_I2CM_XferBlocking+0x18>
1a003b3e:	e7f5      	b.n	1a003b2c <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a003b40:	bd38      	pop	{r3, r4, r5, pc}

1a003b42 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003b42:	4770      	bx	lr

1a003b44 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003b44:	4b03      	ldr	r3, [pc, #12]	; (1a003b54 <Chip_SSP_GetClockIndex+0x10>)
1a003b46:	4298      	cmp	r0, r3
1a003b48:	d001      	beq.n	1a003b4e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003b4a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003b4c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003b4e:	20a5      	movs	r0, #165	; 0xa5
1a003b50:	4770      	bx	lr
1a003b52:	bf00      	nop
1a003b54:	400c5000 	.word	0x400c5000

1a003b58 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003b58:	4b04      	ldr	r3, [pc, #16]	; (1a003b6c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003b5a:	4298      	cmp	r0, r3
1a003b5c:	d002      	beq.n	1a003b64 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003b5e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003b62:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003b64:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003b68:	4770      	bx	lr
1a003b6a:	bf00      	nop
1a003b6c:	400c5000 	.word	0x400c5000

1a003b70 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003b70:	6803      	ldr	r3, [r0, #0]
1a003b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003b76:	0209      	lsls	r1, r1, #8
1a003b78:	b289      	uxth	r1, r1
1a003b7a:	4319      	orrs	r1, r3
1a003b7c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003b7e:	6102      	str	r2, [r0, #16]
}
1a003b80:	4770      	bx	lr

1a003b82 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003b82:	b570      	push	{r4, r5, r6, lr}
1a003b84:	4606      	mov	r6, r0
1a003b86:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003b88:	f7ff ffe6 	bl	1a003b58 <Chip_SSP_GetPeriphClockIndex>
1a003b8c:	f7ff fe64 	bl	1a003858 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003b90:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003b96:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003b98:	e000      	b.n	1a003b9c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003b9a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003b9c:	42ab      	cmp	r3, r5
1a003b9e:	d90b      	bls.n	1a003bb8 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003ba0:	1c4c      	adds	r4, r1, #1
1a003ba2:	fb02 f304 	mul.w	r3, r2, r4
1a003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003baa:	429d      	cmp	r5, r3
1a003bac:	d2f6      	bcs.n	1a003b9c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003bae:	2cff      	cmp	r4, #255	; 0xff
1a003bb0:	d9f3      	bls.n	1a003b9a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003bb2:	3202      	adds	r2, #2
				cr0_div = 0;
1a003bb4:	2100      	movs	r1, #0
1a003bb6:	e7f1      	b.n	1a003b9c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003bb8:	4630      	mov	r0, r6
1a003bba:	f7ff ffd9 	bl	1a003b70 <Chip_SSP_SetClockRate>
}
1a003bbe:	bd70      	pop	{r4, r5, r6, pc}

1a003bc0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003bc0:	b510      	push	{r4, lr}
1a003bc2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003bc4:	f7ff ffbe 	bl	1a003b44 <Chip_SSP_GetClockIndex>
1a003bc8:	f7ff fe2c 	bl	1a003824 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003bcc:	4620      	mov	r0, r4
1a003bce:	f7ff ffc3 	bl	1a003b58 <Chip_SSP_GetPeriphClockIndex>
1a003bd2:	f7ff fe27 	bl	1a003824 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003bd6:	6863      	ldr	r3, [r4, #4]
1a003bd8:	f023 0304 	bic.w	r3, r3, #4
1a003bdc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003bde:	6823      	ldr	r3, [r4, #0]
1a003be0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003be4:	f043 0307 	orr.w	r3, r3, #7
1a003be8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003bea:	4902      	ldr	r1, [pc, #8]	; (1a003bf4 <Chip_SSP_Init+0x34>)
1a003bec:	4620      	mov	r0, r4
1a003bee:	f7ff ffc8 	bl	1a003b82 <Chip_SSP_SetBitRate>
}
1a003bf2:	bd10      	pop	{r4, pc}
1a003bf4:	000186a0 	.word	0x000186a0

1a003bf8 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003bf8:	2901      	cmp	r1, #1
1a003bfa:	d109      	bne.n	1a003c10 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a003bfc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003c00:	0082      	lsls	r2, r0, #2
1a003c02:	4b04      	ldr	r3, [pc, #16]	; (1a003c14 <Chip_I2C_EventHandler+0x1c>)
1a003c04:	4413      	add	r3, r2
1a003c06:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a003c08:	7d13      	ldrb	r3, [r2, #20]
1a003c0a:	b2db      	uxtb	r3, r3
1a003c0c:	2b04      	cmp	r3, #4
1a003c0e:	d0fb      	beq.n	1a003c08 <Chip_I2C_EventHandler+0x10>
}
1a003c10:	4770      	bx	lr
1a003c12:	bf00      	nop
1a003c14:	10000058 	.word	0x10000058

1a003c18 <handleMasterXferState>:
{
1a003c18:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a003c1a:	6843      	ldr	r3, [r0, #4]
1a003c1c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a003c20:	2b58      	cmp	r3, #88	; 0x58
1a003c22:	d87f      	bhi.n	1a003d24 <handleMasterXferState+0x10c>
1a003c24:	e8df f003 	tbb	[pc, r3]
1a003c28:	7e7e7e7a 	.word	0x7e7e7e7a
1a003c2c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c30:	7e7e7e2f 	.word	0x7e7e7e2f
1a003c34:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c38:	7e7e7e2f 	.word	0x7e7e7e2f
1a003c3c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c40:	7e7e7e39 	.word	0x7e7e7e39
1a003c44:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c48:	7e7e7e6e 	.word	0x7e7e7e6e
1a003c4c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c50:	7e7e7e39 	.word	0x7e7e7e39
1a003c54:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c58:	7e7e7e72 	.word	0x7e7e7e72
1a003c5c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c60:	7e7e7e76 	.word	0x7e7e7e76
1a003c64:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c68:	7e7e7e6c 	.word	0x7e7e7e6c
1a003c6c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c70:	7e7e7e6e 	.word	0x7e7e7e6e
1a003c74:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c78:	7e7e7e2d 	.word	0x7e7e7e2d
1a003c7c:	7e7e7e7e 	.word	0x7e7e7e7e
1a003c80:	4f          	.byte	0x4f
1a003c81:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a003c82:	233c      	movs	r3, #60	; 0x3c
1a003c84:	e020      	b.n	1a003cc8 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003c86:	780a      	ldrb	r2, [r1, #0]
1a003c88:	688b      	ldr	r3, [r1, #8]
1a003c8a:	fab3 f383 	clz	r3, r3
1a003c8e:	095b      	lsrs	r3, r3, #5
1a003c90:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003c94:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003c96:	233c      	movs	r3, #60	; 0x3c
		break;
1a003c98:	e023      	b.n	1a003ce2 <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a003c9a:	688b      	ldr	r3, [r1, #8]
1a003c9c:	b94b      	cbnz	r3, 1a003cb2 <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a003c9e:	690b      	ldr	r3, [r1, #16]
1a003ca0:	b123      	cbz	r3, 1a003cac <handleMasterXferState+0x94>
1a003ca2:	f06f 0320 	mvn.w	r3, #32
1a003ca6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a003caa:	e01a      	b.n	1a003ce2 <handleMasterXferState+0xca>
1a003cac:	f06f 0310 	mvn.w	r3, #16
1a003cb0:	e7f9      	b.n	1a003ca6 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a003cb2:	684b      	ldr	r3, [r1, #4]
1a003cb4:	1c5a      	adds	r2, r3, #1
1a003cb6:	604a      	str	r2, [r1, #4]
1a003cb8:	781b      	ldrb	r3, [r3, #0]
1a003cba:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003cbc:	688b      	ldr	r3, [r1, #8]
1a003cbe:	3b01      	subs	r3, #1
1a003cc0:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003cc2:	233c      	movs	r3, #60	; 0x3c
1a003cc4:	e00d      	b.n	1a003ce2 <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a003cc6:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a003cc8:	6884      	ldr	r4, [r0, #8]
1a003cca:	68ca      	ldr	r2, [r1, #12]
1a003ccc:	1c55      	adds	r5, r2, #1
1a003cce:	60cd      	str	r5, [r1, #12]
1a003cd0:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a003cd2:	690a      	ldr	r2, [r1, #16]
1a003cd4:	3a01      	subs	r2, #1
1a003cd6:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a003cd8:	690a      	ldr	r2, [r1, #16]
1a003cda:	2a01      	cmp	r2, #1
1a003cdc:	dd01      	ble.n	1a003ce2 <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a003cde:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003ce2:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003ce6:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a003ce8:	f023 0210 	bic.w	r2, r3, #16
1a003cec:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a003cee:	f013 0f10 	tst.w	r3, #16
1a003cf2:	d019      	beq.n	1a003d28 <handleMasterXferState+0x110>
1a003cf4:	7d0b      	ldrb	r3, [r1, #20]
1a003cf6:	2b02      	cmp	r3, #2
1a003cf8:	d016      	beq.n	1a003d28 <handleMasterXferState+0x110>
	return 1;
1a003cfa:	2001      	movs	r0, #1
}
1a003cfc:	bc30      	pop	{r4, r5}
1a003cfe:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a003d00:	233c      	movs	r3, #60	; 0x3c
1a003d02:	e7e9      	b.n	1a003cd8 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a003d04:	2305      	movs	r3, #5
1a003d06:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003d08:	232c      	movs	r3, #44	; 0x2c
		break;
1a003d0a:	e7ea      	b.n	1a003ce2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a003d0c:	2301      	movs	r3, #1
1a003d0e:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003d10:	232c      	movs	r3, #44	; 0x2c
		break;
1a003d12:	e7e6      	b.n	1a003ce2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a003d14:	2302      	movs	r3, #2
1a003d16:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a003d18:	233c      	movs	r3, #60	; 0x3c
		break;
1a003d1a:	e7e2      	b.n	1a003ce2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a003d1c:	2303      	movs	r3, #3
1a003d1e:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003d20:	232c      	movs	r3, #44	; 0x2c
1a003d22:	e7de      	b.n	1a003ce2 <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a003d24:	233c      	movs	r3, #60	; 0x3c
1a003d26:	e7dc      	b.n	1a003ce2 <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a003d28:	7d0b      	ldrb	r3, [r1, #20]
1a003d2a:	2b04      	cmp	r3, #4
1a003d2c:	d001      	beq.n	1a003d32 <handleMasterXferState+0x11a>
		return 0;
1a003d2e:	2000      	movs	r0, #0
1a003d30:	e7e4      	b.n	1a003cfc <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a003d32:	2300      	movs	r3, #0
1a003d34:	750b      	strb	r3, [r1, #20]
1a003d36:	e7fa      	b.n	1a003d2e <handleMasterXferState+0x116>

1a003d38 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003d38:	b570      	push	{r4, r5, r6, lr}
1a003d3a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003d3c:	4e06      	ldr	r6, [pc, #24]	; (1a003d58 <Chip_I2C_Init+0x20>)
1a003d3e:	00c4      	lsls	r4, r0, #3
1a003d40:	1a22      	subs	r2, r4, r0
1a003d42:	0093      	lsls	r3, r2, #2
1a003d44:	4433      	add	r3, r6
1a003d46:	8898      	ldrh	r0, [r3, #4]
1a003d48:	f7ff fd6c 	bl	1a003824 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003d4c:	1b64      	subs	r4, r4, r5
1a003d4e:	00a3      	lsls	r3, r4, #2
1a003d50:	58f3      	ldr	r3, [r6, r3]
1a003d52:	226c      	movs	r2, #108	; 0x6c
1a003d54:	619a      	str	r2, [r3, #24]
}
1a003d56:	bd70      	pop	{r4, r5, r6, pc}
1a003d58:	10000058 	.word	0x10000058

1a003d5c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003d60:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003d62:	4e0b      	ldr	r6, [pc, #44]	; (1a003d90 <Chip_I2C_SetClockRate+0x34>)
1a003d64:	00c5      	lsls	r5, r0, #3
1a003d66:	1a2b      	subs	r3, r5, r0
1a003d68:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003d6c:	eb06 0308 	add.w	r3, r6, r8
1a003d70:	8898      	ldrh	r0, [r3, #4]
1a003d72:	f7ff fd71 	bl	1a003858 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003d76:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003d7a:	f856 3008 	ldr.w	r3, [r6, r8]
1a003d7e:	0842      	lsrs	r2, r0, #1
1a003d80:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003d82:	f856 3008 	ldr.w	r3, [r6, r8]
1a003d86:	691a      	ldr	r2, [r3, #16]
1a003d88:	1a80      	subs	r0, r0, r2
1a003d8a:	6158      	str	r0, [r3, #20]
}
1a003d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003d90:	10000058 	.word	0x10000058

1a003d94 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a003d94:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003d98:	009a      	lsls	r2, r3, #2
1a003d9a:	4b09      	ldr	r3, [pc, #36]	; (1a003dc0 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003d9c:	4413      	add	r3, r2
1a003d9e:	691b      	ldr	r3, [r3, #16]
1a003da0:	b153      	cbz	r3, 1a003db8 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a003da2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003da6:	0082      	lsls	r2, r0, #2
1a003da8:	4b05      	ldr	r3, [pc, #20]	; (1a003dc0 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003daa:	4413      	add	r3, r2
1a003dac:	6898      	ldr	r0, [r3, #8]
}
1a003dae:	4288      	cmp	r0, r1
1a003db0:	bf14      	ite	ne
1a003db2:	2000      	movne	r0, #0
1a003db4:	2001      	moveq	r0, #1
1a003db6:	4770      	bx	lr
		iic->mEvent = event;
1a003db8:	4b01      	ldr	r3, [pc, #4]	; (1a003dc0 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003dba:	4413      	add	r3, r2
1a003dbc:	6099      	str	r1, [r3, #8]
1a003dbe:	e7f0      	b.n	1a003da2 <Chip_I2C_SetMasterEventHandler+0xe>
1a003dc0:	10000058 	.word	0x10000058

1a003dc4 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a003dc4:	b510      	push	{r4, lr}
1a003dc6:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a003dc8:	4809      	ldr	r0, [pc, #36]	; (1a003df0 <Chip_I2C_MasterStateHandler+0x2c>)
1a003dca:	00e3      	lsls	r3, r4, #3
1a003dcc:	1b1b      	subs	r3, r3, r4
1a003dce:	009a      	lsls	r2, r3, #2
1a003dd0:	1883      	adds	r3, r0, r2
1a003dd2:	6919      	ldr	r1, [r3, #16]
1a003dd4:	5880      	ldr	r0, [r0, r2]
1a003dd6:	f7ff ff1f 	bl	1a003c18 <handleMasterXferState>
1a003dda:	b940      	cbnz	r0, 1a003dee <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a003ddc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a003de0:	009a      	lsls	r2, r3, #2
1a003de2:	4b03      	ldr	r3, [pc, #12]	; (1a003df0 <Chip_I2C_MasterStateHandler+0x2c>)
1a003de4:	4413      	add	r3, r2
1a003de6:	689b      	ldr	r3, [r3, #8]
1a003de8:	2102      	movs	r1, #2
1a003dea:	4620      	mov	r0, r4
1a003dec:	4798      	blx	r3
	}
}
1a003dee:	bd10      	pop	{r4, pc}
1a003df0:	10000058 	.word	0x10000058

1a003df4 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a003df4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003df8:	0083      	lsls	r3, r0, #2
1a003dfa:	4a03      	ldr	r2, [pc, #12]	; (1a003e08 <Chip_I2C_IsStateChanged+0x14>)
1a003dfc:	58d3      	ldr	r3, [r2, r3]
1a003dfe:	6818      	ldr	r0, [r3, #0]
}
1a003e00:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a003e04:	4770      	bx	lr
1a003e06:	bf00      	nop
1a003e08:	10000058 	.word	0x10000058

1a003e0c <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a003e0c:	2901      	cmp	r1, #1
1a003e0e:	d115      	bne.n	1a003e3c <Chip_I2C_EventHandlerPolling+0x30>
{
1a003e10:	b538      	push	{r3, r4, r5, lr}
1a003e12:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a003e14:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003e18:	009a      	lsls	r2, r3, #2
1a003e1a:	4b09      	ldr	r3, [pc, #36]	; (1a003e40 <Chip_I2C_EventHandlerPolling+0x34>)
1a003e1c:	4413      	add	r3, r2
1a003e1e:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a003e20:	7d2b      	ldrb	r3, [r5, #20]
1a003e22:	b2db      	uxtb	r3, r3
1a003e24:	2b04      	cmp	r3, #4
1a003e26:	d108      	bne.n	1a003e3a <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a003e28:	4620      	mov	r0, r4
1a003e2a:	f7ff ffe3 	bl	1a003df4 <Chip_I2C_IsStateChanged>
1a003e2e:	2800      	cmp	r0, #0
1a003e30:	d0f6      	beq.n	1a003e20 <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a003e32:	4620      	mov	r0, r4
1a003e34:	f7ff ffc6 	bl	1a003dc4 <Chip_I2C_MasterStateHandler>
1a003e38:	e7f2      	b.n	1a003e20 <Chip_I2C_EventHandlerPolling+0x14>
}
1a003e3a:	bd38      	pop	{r3, r4, r5, pc}
1a003e3c:	4770      	bx	lr
1a003e3e:	bf00      	nop
1a003e40:	10000058 	.word	0x10000058

1a003e44 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003e44:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003e46:	4a0b      	ldr	r2, [pc, #44]	; (1a003e74 <SystemInit+0x30>)
1a003e48:	4b0b      	ldr	r3, [pc, #44]	; (1a003e78 <SystemInit+0x34>)
1a003e4a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003e4c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003e50:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003e52:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003e56:	2b20      	cmp	r3, #32
1a003e58:	d004      	beq.n	1a003e64 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003e5a:	f7ff f925 	bl	1a0030a8 <Board_SystemInit>
   Board_Init();
1a003e5e:	f7ff f8ab 	bl	1a002fb8 <Board_Init>
}
1a003e62:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003e64:	4a04      	ldr	r2, [pc, #16]	; (1a003e78 <SystemInit+0x34>)
1a003e66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003e6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003e6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003e72:	e7f2      	b.n	1a003e5a <SystemInit+0x16>
1a003e74:	1a000000 	.word	0x1a000000
1a003e78:	e000ed00 	.word	0xe000ed00

1a003e7c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003e7c:	4b04      	ldr	r3, [pc, #16]	; (1a003e90 <cyclesCounterInit+0x14>)
1a003e7e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003e80:	4a04      	ldr	r2, [pc, #16]	; (1a003e94 <cyclesCounterInit+0x18>)
1a003e82:	6813      	ldr	r3, [r2, #0]
1a003e84:	f043 0301 	orr.w	r3, r3, #1
1a003e88:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003e8a:	2001      	movs	r0, #1
1a003e8c:	4770      	bx	lr
1a003e8e:	bf00      	nop
1a003e90:	10000090 	.word	0x10000090
1a003e94:	e0001000 	.word	0xe0001000

1a003e98 <uartProcessIRQ>:
{
1a003e98:	b570      	push	{r4, r5, r6, lr}
1a003e9a:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003e9c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003ea0:	0093      	lsls	r3, r2, #2
1a003ea2:	4a22      	ldr	r2, [pc, #136]	; (1a003f2c <uartProcessIRQ+0x94>)
1a003ea4:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a003ea6:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003ea8:	b2ed      	uxtb	r5, r5
1a003eaa:	f015 0f01 	tst.w	r5, #1
1a003eae:	d00a      	beq.n	1a003ec6 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a003eb0:	b928      	cbnz	r0, 1a003ebe <uartProcessIRQ+0x26>
1a003eb2:	4b1f      	ldr	r3, [pc, #124]	; (1a003f30 <uartProcessIRQ+0x98>)
1a003eb4:	681b      	ldr	r3, [r3, #0]
1a003eb6:	b113      	cbz	r3, 1a003ebe <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a003eb8:	4a1e      	ldr	r2, [pc, #120]	; (1a003f34 <uartProcessIRQ+0x9c>)
1a003eba:	6810      	ldr	r0, [r2, #0]
1a003ebc:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003ebe:	2c03      	cmp	r4, #3
1a003ec0:	d014      	beq.n	1a003eec <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003ec2:	2c05      	cmp	r4, #5
1a003ec4:	d01a      	beq.n	1a003efc <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003ec6:	f015 0f20 	tst.w	r5, #32
1a003eca:	d00e      	beq.n	1a003eea <uartProcessIRQ+0x52>
	return pUART->IER;
1a003ecc:	6873      	ldr	r3, [r6, #4]
1a003ece:	f013 0f02 	tst.w	r3, #2
1a003ed2:	d00a      	beq.n	1a003eea <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003ed4:	b92c      	cbnz	r4, 1a003ee2 <uartProcessIRQ+0x4a>
1a003ed6:	4b18      	ldr	r3, [pc, #96]	; (1a003f38 <uartProcessIRQ+0xa0>)
1a003ed8:	681b      	ldr	r3, [r3, #0]
1a003eda:	b113      	cbz	r3, 1a003ee2 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a003edc:	4a17      	ldr	r2, [pc, #92]	; (1a003f3c <uartProcessIRQ+0xa4>)
1a003ede:	6810      	ldr	r0, [r2, #0]
1a003ee0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003ee2:	2c03      	cmp	r4, #3
1a003ee4:	d012      	beq.n	1a003f0c <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003ee6:	2c05      	cmp	r4, #5
1a003ee8:	d018      	beq.n	1a003f1c <uartProcessIRQ+0x84>
}
1a003eea:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003eec:	4b14      	ldr	r3, [pc, #80]	; (1a003f40 <uartProcessIRQ+0xa8>)
1a003eee:	681b      	ldr	r3, [r3, #0]
1a003ef0:	2b00      	cmp	r3, #0
1a003ef2:	d0e6      	beq.n	1a003ec2 <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a003ef4:	4a13      	ldr	r2, [pc, #76]	; (1a003f44 <uartProcessIRQ+0xac>)
1a003ef6:	6810      	ldr	r0, [r2, #0]
1a003ef8:	4798      	blx	r3
1a003efa:	e7e2      	b.n	1a003ec2 <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003efc:	4b12      	ldr	r3, [pc, #72]	; (1a003f48 <uartProcessIRQ+0xb0>)
1a003efe:	681b      	ldr	r3, [r3, #0]
1a003f00:	2b00      	cmp	r3, #0
1a003f02:	d0e0      	beq.n	1a003ec6 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a003f04:	4a11      	ldr	r2, [pc, #68]	; (1a003f4c <uartProcessIRQ+0xb4>)
1a003f06:	6810      	ldr	r0, [r2, #0]
1a003f08:	4798      	blx	r3
1a003f0a:	e7dc      	b.n	1a003ec6 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003f0c:	4b10      	ldr	r3, [pc, #64]	; (1a003f50 <uartProcessIRQ+0xb8>)
1a003f0e:	681b      	ldr	r3, [r3, #0]
1a003f10:	2b00      	cmp	r3, #0
1a003f12:	d0e8      	beq.n	1a003ee6 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a003f14:	4a0f      	ldr	r2, [pc, #60]	; (1a003f54 <uartProcessIRQ+0xbc>)
1a003f16:	6810      	ldr	r0, [r2, #0]
1a003f18:	4798      	blx	r3
1a003f1a:	e7e4      	b.n	1a003ee6 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003f1c:	4b0e      	ldr	r3, [pc, #56]	; (1a003f58 <uartProcessIRQ+0xc0>)
1a003f1e:	681b      	ldr	r3, [r3, #0]
1a003f20:	2b00      	cmp	r3, #0
1a003f22:	d0e2      	beq.n	1a003eea <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a003f24:	4a0d      	ldr	r2, [pc, #52]	; (1a003f5c <uartProcessIRQ+0xc4>)
1a003f26:	6810      	ldr	r0, [r2, #0]
1a003f28:	4798      	blx	r3
}
1a003f2a:	e7de      	b.n	1a003eea <uartProcessIRQ+0x52>
1a003f2c:	1a006288 	.word	0x1a006288
1a003f30:	10002b84 	.word	0x10002b84
1a003f34:	10002b88 	.word	0x10002b88
1a003f38:	10002b9c 	.word	0x10002b9c
1a003f3c:	10002ba0 	.word	0x10002ba0
1a003f40:	10002b8c 	.word	0x10002b8c
1a003f44:	10002b90 	.word	0x10002b90
1a003f48:	10002b94 	.word	0x10002b94
1a003f4c:	10002b98 	.word	0x10002b98
1a003f50:	10002ba4 	.word	0x10002ba4
1a003f54:	10002ba8 	.word	0x10002ba8
1a003f58:	10002bac 	.word	0x10002bac
1a003f5c:	10002bb0 	.word	0x10002bb0

1a003f60 <uartInterrupt>:
   if( enable ) {
1a003f60:	b341      	cbz	r1, 1a003fb4 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a003f62:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a003f66:	009a      	lsls	r2, r3, #2
1a003f68:	4b1e      	ldr	r3, [pc, #120]	; (1a003fe4 <uartInterrupt+0x84>)
1a003f6a:	4413      	add	r3, r2
1a003f6c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003f70:	2b00      	cmp	r3, #0
1a003f72:	db18      	blt.n	1a003fa6 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003f74:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003f78:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a003f7c:	22a0      	movs	r2, #160	; 0xa0
1a003f7e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a003f82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003f86:	0082      	lsls	r2, r0, #2
1a003f88:	4b16      	ldr	r3, [pc, #88]	; (1a003fe4 <uartInterrupt+0x84>)
1a003f8a:	4413      	add	r3, r2
1a003f8c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003f90:	2b00      	cmp	r3, #0
1a003f92:	db25      	blt.n	1a003fe0 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003f94:	f003 011f 	and.w	r1, r3, #31
1a003f98:	095b      	lsrs	r3, r3, #5
1a003f9a:	2201      	movs	r2, #1
1a003f9c:	408a      	lsls	r2, r1
1a003f9e:	4912      	ldr	r1, [pc, #72]	; (1a003fe8 <uartInterrupt+0x88>)
1a003fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003fa4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003fa6:	f003 030f 	and.w	r3, r3, #15
1a003faa:	4a10      	ldr	r2, [pc, #64]	; (1a003fec <uartInterrupt+0x8c>)
1a003fac:	441a      	add	r2, r3
1a003fae:	23a0      	movs	r3, #160	; 0xa0
1a003fb0:	7613      	strb	r3, [r2, #24]
1a003fb2:	e7e6      	b.n	1a003f82 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a003fb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003fb8:	0082      	lsls	r2, r0, #2
1a003fba:	4b0a      	ldr	r3, [pc, #40]	; (1a003fe4 <uartInterrupt+0x84>)
1a003fbc:	4413      	add	r3, r2
1a003fbe:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003fc2:	2b00      	cmp	r3, #0
1a003fc4:	db0c      	blt.n	1a003fe0 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003fc6:	f003 011f 	and.w	r1, r3, #31
1a003fca:	095b      	lsrs	r3, r3, #5
1a003fcc:	2201      	movs	r2, #1
1a003fce:	408a      	lsls	r2, r1
1a003fd0:	3320      	adds	r3, #32
1a003fd2:	4905      	ldr	r1, [pc, #20]	; (1a003fe8 <uartInterrupt+0x88>)
1a003fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
1a003fd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a003fdc:	f3bf 8f6f 	isb	sy
}
1a003fe0:	4770      	bx	lr
1a003fe2:	bf00      	nop
1a003fe4:	1a006288 	.word	0x1a006288
1a003fe8:	e000e100 	.word	0xe000e100
1a003fec:	e000ecfc 	.word	0xe000ecfc

1a003ff0 <uartCallbackSet>:
{   
1a003ff0:	b410      	push	{r4}
   switch(event){
1a003ff2:	b161      	cbz	r1, 1a00400e <uartCallbackSet+0x1e>
1a003ff4:	2901      	cmp	r1, #1
1a003ff6:	d11c      	bne.n	1a004032 <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a003ff8:	b1da      	cbz	r2, 1a004032 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a003ffa:	2801      	cmp	r0, #1
1a003ffc:	d92c      	bls.n	1a004058 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a003ffe:	1ec1      	subs	r1, r0, #3
1a004000:	b2c9      	uxtb	r1, r1
1a004002:	2901      	cmp	r1, #1
1a004004:	d92d      	bls.n	1a004062 <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a004006:	2805      	cmp	r0, #5
1a004008:	d030      	beq.n	1a00406c <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a00400a:	2302      	movs	r3, #2
1a00400c:	e009      	b.n	1a004022 <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a00400e:	b182      	cbz	r2, 1a004032 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a004010:	2801      	cmp	r0, #1
1a004012:	d911      	bls.n	1a004038 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a004014:	1ec1      	subs	r1, r0, #3
1a004016:	b2c9      	uxtb	r1, r1
1a004018:	2901      	cmp	r1, #1
1a00401a:	d912      	bls.n	1a004042 <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a00401c:	2805      	cmp	r0, #5
1a00401e:	d015      	beq.n	1a00404c <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004020:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a004022:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004026:	0082      	lsls	r2, r0, #2
1a004028:	4913      	ldr	r1, [pc, #76]	; (1a004078 <uartCallbackSet+0x88>)
1a00402a:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a00402c:	6851      	ldr	r1, [r2, #4]
1a00402e:	430b      	orrs	r3, r1
1a004030:	6053      	str	r3, [r2, #4]
}
1a004032:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004036:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a004038:	4910      	ldr	r1, [pc, #64]	; (1a00407c <uartCallbackSet+0x8c>)
1a00403a:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a00403c:	4910      	ldr	r1, [pc, #64]	; (1a004080 <uartCallbackSet+0x90>)
1a00403e:	600b      	str	r3, [r1, #0]
1a004040:	e7e8      	b.n	1a004014 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a004042:	4910      	ldr	r1, [pc, #64]	; (1a004084 <uartCallbackSet+0x94>)
1a004044:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a004046:	4910      	ldr	r1, [pc, #64]	; (1a004088 <uartCallbackSet+0x98>)
1a004048:	600b      	str	r3, [r1, #0]
1a00404a:	e7e7      	b.n	1a00401c <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a00404c:	490f      	ldr	r1, [pc, #60]	; (1a00408c <uartCallbackSet+0x9c>)
1a00404e:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a004050:	4a0f      	ldr	r2, [pc, #60]	; (1a004090 <uartCallbackSet+0xa0>)
1a004052:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004054:	2305      	movs	r3, #5
1a004056:	e7e4      	b.n	1a004022 <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a004058:	490e      	ldr	r1, [pc, #56]	; (1a004094 <uartCallbackSet+0xa4>)
1a00405a:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a00405c:	490e      	ldr	r1, [pc, #56]	; (1a004098 <uartCallbackSet+0xa8>)
1a00405e:	600b      	str	r3, [r1, #0]
1a004060:	e7cd      	b.n	1a003ffe <uartCallbackSet+0xe>
               txIsrCallbackUART2 = callbackFunc;
1a004062:	490e      	ldr	r1, [pc, #56]	; (1a00409c <uartCallbackSet+0xac>)
1a004064:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART2Params = callbackParam;
1a004066:	490e      	ldr	r1, [pc, #56]	; (1a0040a0 <uartCallbackSet+0xb0>)
1a004068:	600b      	str	r3, [r1, #0]
1a00406a:	e7cc      	b.n	1a004006 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a00406c:	490d      	ldr	r1, [pc, #52]	; (1a0040a4 <uartCallbackSet+0xb4>)
1a00406e:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a004070:	4a0d      	ldr	r2, [pc, #52]	; (1a0040a8 <uartCallbackSet+0xb8>)
1a004072:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a004074:	2302      	movs	r3, #2
1a004076:	e7d4      	b.n	1a004022 <uartCallbackSet+0x32>
1a004078:	1a006288 	.word	0x1a006288
1a00407c:	10002b84 	.word	0x10002b84
1a004080:	10002b88 	.word	0x10002b88
1a004084:	10002b8c 	.word	0x10002b8c
1a004088:	10002b90 	.word	0x10002b90
1a00408c:	10002b94 	.word	0x10002b94
1a004090:	10002b98 	.word	0x10002b98
1a004094:	10002b9c 	.word	0x10002b9c
1a004098:	10002ba0 	.word	0x10002ba0
1a00409c:	10002ba4 	.word	0x10002ba4
1a0040a0:	10002ba8 	.word	0x10002ba8
1a0040a4:	10002bac 	.word	0x10002bac
1a0040a8:	10002bb0 	.word	0x10002bb0

1a0040ac <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a0040ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040b0:	0083      	lsls	r3, r0, #2
1a0040b2:	4a03      	ldr	r2, [pc, #12]	; (1a0040c0 <uartRxReady+0x14>)
1a0040b4:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a0040b6:	6958      	ldr	r0, [r3, #20]
}
1a0040b8:	f000 0001 	and.w	r0, r0, #1
1a0040bc:	4770      	bx	lr
1a0040be:	bf00      	nop
1a0040c0:	1a006288 	.word	0x1a006288

1a0040c4 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0040c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040c8:	0083      	lsls	r3, r0, #2
1a0040ca:	4a03      	ldr	r2, [pc, #12]	; (1a0040d8 <uartTxReady+0x14>)
1a0040cc:	58d3      	ldr	r3, [r2, r3]
1a0040ce:	6958      	ldr	r0, [r3, #20]
}
1a0040d0:	f000 0020 	and.w	r0, r0, #32
1a0040d4:	4770      	bx	lr
1a0040d6:	bf00      	nop
1a0040d8:	1a006288 	.word	0x1a006288

1a0040dc <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a0040dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040e0:	0083      	lsls	r3, r0, #2
1a0040e2:	4a02      	ldr	r2, [pc, #8]	; (1a0040ec <uartRxRead+0x10>)
1a0040e4:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0040e6:	6818      	ldr	r0, [r3, #0]
}
1a0040e8:	b2c0      	uxtb	r0, r0
1a0040ea:	4770      	bx	lr
1a0040ec:	1a006288 	.word	0x1a006288

1a0040f0 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0040f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040f4:	0083      	lsls	r3, r0, #2
1a0040f6:	4a02      	ldr	r2, [pc, #8]	; (1a004100 <uartTxWrite+0x10>)
1a0040f8:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0040fa:	6019      	str	r1, [r3, #0]
}
1a0040fc:	4770      	bx	lr
1a0040fe:	bf00      	nop
1a004100:	1a006288 	.word	0x1a006288

1a004104 <uartInit>:
{
1a004104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004108:	4680      	mov	r8, r0
1a00410a:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a00410c:	4c19      	ldr	r4, [pc, #100]	; (1a004174 <uartInit+0x70>)
1a00410e:	0045      	lsls	r5, r0, #1
1a004110:	182a      	adds	r2, r5, r0
1a004112:	0093      	lsls	r3, r2, #2
1a004114:	18e6      	adds	r6, r4, r3
1a004116:	58e7      	ldr	r7, [r4, r3]
1a004118:	4638      	mov	r0, r7
1a00411a:	f7fe ffe1 	bl	1a0030e0 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00411e:	4649      	mov	r1, r9
1a004120:	4638      	mov	r0, r7
1a004122:	f7ff f807 	bl	1a003134 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a004126:	2307      	movs	r3, #7
1a004128:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00412a:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a00412c:	2301      	movs	r3, #1
1a00412e:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a004130:	7930      	ldrb	r0, [r6, #4]
1a004132:	7973      	ldrb	r3, [r6, #5]
1a004134:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004136:	f042 0218 	orr.w	r2, r2, #24
1a00413a:	490f      	ldr	r1, [pc, #60]	; (1a004178 <uartInit+0x74>)
1a00413c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a004144:	79f0      	ldrb	r0, [r6, #7]
1a004146:	7a33      	ldrb	r3, [r6, #8]
1a004148:	7a72      	ldrb	r2, [r6, #9]
1a00414a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00414e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a004156:	f1b8 0f01 	cmp.w	r8, #1
1a00415a:	d001      	beq.n	1a004160 <uartInit+0x5c>
}
1a00415c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a004160:	4a06      	ldr	r2, [pc, #24]	; (1a00417c <uartInit+0x78>)
1a004162:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a004164:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a004168:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00416a:	221a      	movs	r2, #26
1a00416c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a004170:	e7f4      	b.n	1a00415c <uartInit+0x58>
1a004172:	bf00      	nop
1a004174:	1a006288 	.word	0x1a006288
1a004178:	40086000 	.word	0x40086000
1a00417c:	40081000 	.word	0x40081000

1a004180 <uartReadByte>:
{
1a004180:	b538      	push	{r3, r4, r5, lr}
1a004182:	4605      	mov	r5, r0
1a004184:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a004186:	f7ff ff91 	bl	1a0040ac <uartRxReady>
1a00418a:	4603      	mov	r3, r0
1a00418c:	b908      	cbnz	r0, 1a004192 <uartReadByte+0x12>
}
1a00418e:	4618      	mov	r0, r3
1a004190:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a004192:	4628      	mov	r0, r5
1a004194:	f7ff ffa2 	bl	1a0040dc <uartRxRead>
1a004198:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a00419a:	2301      	movs	r3, #1
1a00419c:	e7f7      	b.n	1a00418e <uartReadByte+0xe>

1a00419e <waitForReceiveStringOrTimeout>:
{
1a00419e:	b510      	push	{r4, lr}
1a0041a0:	b082      	sub	sp, #8
1a0041a2:	460c      	mov	r4, r1
   switch( instance->state ) {
1a0041a4:	780b      	ldrb	r3, [r1, #0]
1a0041a6:	2b04      	cmp	r3, #4
1a0041a8:	d836      	bhi.n	1a004218 <waitForReceiveStringOrTimeout+0x7a>
1a0041aa:	e8df f003 	tbb	[pc, r3]
1a0041ae:	1003      	.short	0x1003
1a0041b0:	352f      	.short	0x352f
1a0041b2:	32          	.byte	0x32
1a0041b3:	00          	.byte	0x00
      delayInit( &(instance->delay), instance->timeout );
1a0041b4:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0041b8:	f101 0018 	add.w	r0, r1, #24
1a0041bc:	f000 fb0c 	bl	1a0047d8 <delayInit>
      instance->stringIndex = 0;
1a0041c0:	2300      	movs	r3, #0
1a0041c2:	8163      	strh	r3, [r4, #10]
      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a0041c4:	2301      	movs	r3, #1
1a0041c6:	7023      	strb	r3, [r4, #0]
}
1a0041c8:	7820      	ldrb	r0, [r4, #0]
1a0041ca:	b002      	add	sp, #8
1a0041cc:	bd10      	pop	{r4, pc}
      if( uartReadByte( uart, &receiveByte ) ) {
1a0041ce:	f10d 0107 	add.w	r1, sp, #7
1a0041d2:	f7ff ffd5 	bl	1a004180 <uartReadByte>
1a0041d6:	b130      	cbz	r0, 1a0041e6 <waitForReceiveStringOrTimeout+0x48>
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a0041d8:	6862      	ldr	r2, [r4, #4]
1a0041da:	8963      	ldrh	r3, [r4, #10]
1a0041dc:	5cd1      	ldrb	r1, [r2, r3]
1a0041de:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a0041e2:	4291      	cmp	r1, r2
1a0041e4:	d008      	beq.n	1a0041f8 <waitForReceiveStringOrTimeout+0x5a>
      if( delayRead( &(instance->delay) ) ) {
1a0041e6:	f104 0018 	add.w	r0, r4, #24
1a0041ea:	f000 fb05 	bl	1a0047f8 <delayRead>
1a0041ee:	2800      	cmp	r0, #0
1a0041f0:	d0ea      	beq.n	1a0041c8 <waitForReceiveStringOrTimeout+0x2a>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a0041f2:	2304      	movs	r3, #4
1a0041f4:	7023      	strb	r3, [r4, #0]
1a0041f6:	e7e7      	b.n	1a0041c8 <waitForReceiveStringOrTimeout+0x2a>
            (instance->stringIndex)++;
1a0041f8:	3301      	adds	r3, #1
1a0041fa:	b29b      	uxth	r3, r3
1a0041fc:	8163      	strh	r3, [r4, #10]
            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a0041fe:	8922      	ldrh	r2, [r4, #8]
1a004200:	3a01      	subs	r2, #1
1a004202:	4293      	cmp	r3, r2
1a004204:	d1ef      	bne.n	1a0041e6 <waitForReceiveStringOrTimeout+0x48>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a004206:	2302      	movs	r3, #2
1a004208:	7023      	strb	r3, [r4, #0]
1a00420a:	e7ec      	b.n	1a0041e6 <waitForReceiveStringOrTimeout+0x48>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a00420c:	2300      	movs	r3, #0
1a00420e:	700b      	strb	r3, [r1, #0]
      break;
1a004210:	e7da      	b.n	1a0041c8 <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a004212:	2300      	movs	r3, #0
1a004214:	700b      	strb	r3, [r1, #0]
      break;
1a004216:	e7d7      	b.n	1a0041c8 <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a004218:	2300      	movs	r3, #0
1a00421a:	700b      	strb	r3, [r1, #0]
      break;
1a00421c:	e7d4      	b.n	1a0041c8 <waitForReceiveStringOrTimeout+0x2a>

1a00421e <waitForReceiveStringOrTimeoutBlocking>:
{
1a00421e:	b510      	push	{r4, lr}
1a004220:	b08c      	sub	sp, #48	; 0x30
1a004222:	4604      	mov	r4, r0
   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a004224:	2000      	movs	r0, #0
1a004226:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a00422a:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a00422c:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a004230:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a004234:	e9cd 2304 	strd	r2, r3, [sp, #16]
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a004238:	2802      	cmp	r0, #2
1a00423a:	d006      	beq.n	1a00424a <waitForReceiveStringOrTimeoutBlocking+0x2c>
1a00423c:	2804      	cmp	r0, #4
1a00423e:	d004      	beq.n	1a00424a <waitForReceiveStringOrTimeoutBlocking+0x2c>
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a004240:	4669      	mov	r1, sp
1a004242:	4620      	mov	r0, r4
1a004244:	f7ff ffab 	bl	1a00419e <waitForReceiveStringOrTimeout>
1a004248:	e7f6      	b.n	1a004238 <waitForReceiveStringOrTimeoutBlocking+0x1a>
   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a00424a:	2804      	cmp	r0, #4
1a00424c:	d002      	beq.n	1a004254 <waitForReceiveStringOrTimeoutBlocking+0x36>
   bool_t retVal = TRUE; // True if OK
1a00424e:	2001      	movs	r0, #1
}
1a004250:	b00c      	add	sp, #48	; 0x30
1a004252:	bd10      	pop	{r4, pc}
      retVal = FALSE;
1a004254:	2000      	movs	r0, #0
1a004256:	e7fb      	b.n	1a004250 <waitForReceiveStringOrTimeoutBlocking+0x32>

1a004258 <uartWriteByte>:
{
1a004258:	b538      	push	{r3, r4, r5, lr}
1a00425a:	4604      	mov	r4, r0
1a00425c:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a00425e:	4620      	mov	r0, r4
1a004260:	f7ff ff30 	bl	1a0040c4 <uartTxReady>
1a004264:	2800      	cmp	r0, #0
1a004266:	d0fa      	beq.n	1a00425e <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a004268:	4629      	mov	r1, r5
1a00426a:	4620      	mov	r0, r4
1a00426c:	f7ff ff40 	bl	1a0040f0 <uartTxWrite>
}
1a004270:	bd38      	pop	{r3, r4, r5, pc}

1a004272 <uartWriteString>:
{
1a004272:	b538      	push	{r3, r4, r5, lr}
1a004274:	4605      	mov	r5, r0
1a004276:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a004278:	7821      	ldrb	r1, [r4, #0]
1a00427a:	b121      	cbz	r1, 1a004286 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a00427c:	4628      	mov	r0, r5
1a00427e:	f7ff ffeb 	bl	1a004258 <uartWriteByte>
      str++;
1a004282:	3401      	adds	r4, #1
1a004284:	e7f8      	b.n	1a004278 <uartWriteString+0x6>
}
1a004286:	bd38      	pop	{r3, r4, r5, pc}

1a004288 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a004288:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a00428a:	2003      	movs	r0, #3
1a00428c:	f7ff fe04 	bl	1a003e98 <uartProcessIRQ>
}
1a004290:	bd08      	pop	{r3, pc}

1a004292 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a004292:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a004294:	2005      	movs	r0, #5
1a004296:	f7ff fdff 	bl	1a003e98 <uartProcessIRQ>
}
1a00429a:	bd08      	pop	{r3, pc}

1a00429c <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a00429c:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a00429e:	f7fd fe2b 	bl	1a001ef8 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a0042a2:	2100      	movs	r1, #0
1a0042a4:	bd08      	pop	{r3, pc}
1a0042a6:	Address 0x000000001a0042a6 is out of bounds.


1a0042a8 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a0042a8:	b538      	push	{r3, r4, r5, lr}
1a0042aa:	4604      	mov	r4, r0
1a0042ac:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0042ae:	4b08      	ldr	r3, [pc, #32]	; (1a0042d0 <i2cHardwareInit+0x28>)
1a0042b0:	f640 0208 	movw	r2, #2056	; 0x808
1a0042b4:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a0042b8:	f7ff fd3e 	bl	1a003d38 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a0042bc:	4629      	mov	r1, r5
1a0042be:	4620      	mov	r0, r4
1a0042c0:	f7ff fd4c 	bl	1a003d5c <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0042c4:	4903      	ldr	r1, [pc, #12]	; (1a0042d4 <i2cHardwareInit+0x2c>)
1a0042c6:	4620      	mov	r0, r4
1a0042c8:	f7ff fd64 	bl	1a003d94 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a0042cc:	2001      	movs	r0, #1
1a0042ce:	bd38      	pop	{r3, r4, r5, pc}
1a0042d0:	40086000 	.word	0x40086000
1a0042d4:	1a003e0d 	.word	0x1a003e0d

1a0042d8 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a0042d8:	b108      	cbz	r0, 1a0042de <i2cHardwareWrite+0x6>
      return FALSE;
1a0042da:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a0042dc:	4770      	bx	lr
{
1a0042de:	b500      	push	{lr}
1a0042e0:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a0042e2:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0042e6:	2100      	movs	r1, #0
1a0042e8:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0042ec:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a0042f0:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a0042f2:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a0042f6:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a0042f8:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0042fc:	4669      	mov	r1, sp
1a0042fe:	4805      	ldr	r0, [pc, #20]	; (1a004314 <i2cHardwareWrite+0x3c>)
1a004300:	f7ff fc0d 	bl	1a003b1e <Chip_I2CM_XferBlocking>
1a004304:	b118      	cbz	r0, 1a00430e <i2cHardwareWrite+0x36>
   return TRUE;
1a004306:	2001      	movs	r0, #1
}
1a004308:	b005      	add	sp, #20
1a00430a:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a00430e:	2000      	movs	r0, #0
1a004310:	e7fa      	b.n	1a004308 <i2cHardwareWrite+0x30>
1a004312:	bf00      	nop
1a004314:	400a1000 	.word	0x400a1000

1a004318 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a004318:	b108      	cbz	r0, 1a00431e <i2cInit+0x6>
      return FALSE;
1a00431a:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a00431c:	4770      	bx	lr
{
1a00431e:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a004320:	f7ff ffc2 	bl	1a0042a8 <i2cHardwareInit>
}
1a004324:	bd08      	pop	{r3, pc}

1a004326 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a004326:	b108      	cbz	r0, 1a00432c <i2cWrite+0x6>
      return FALSE;
1a004328:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a00432a:	4770      	bx	lr
{
1a00432c:	b510      	push	{r4, lr}
1a00432e:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a004330:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a004334:	9400      	str	r4, [sp, #0]
1a004336:	f7ff ffcf 	bl	1a0042d8 <i2cHardwareWrite>
}
1a00433a:	b002      	add	sp, #8
1a00433c:	bd10      	pop	{r4, pc}

1a00433e <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a00433e:	e7fe      	b.n	1a00433e <errorOcurred>

1a004340 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a004340:	4770      	bx	lr
1a004342:	Address 0x000000001a004342 is out of bounds.


1a004344 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a004344:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004346:	2400      	movs	r4, #0
1a004348:	e001      	b.n	1a00434e <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00434a:	3401      	adds	r4, #1
1a00434c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00434e:	2c03      	cmp	r4, #3
1a004350:	d812      	bhi.n	1a004378 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a004352:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004354:	4b09      	ldr	r3, [pc, #36]	; (1a00437c <TIMER0_IRQHandler+0x38>)
1a004356:	681a      	ldr	r2, [r3, #0]
1a004358:	f004 010f 	and.w	r1, r4, #15
1a00435c:	2301      	movs	r3, #1
1a00435e:	408b      	lsls	r3, r1
1a004360:	421a      	tst	r2, r3
1a004362:	d0f2      	beq.n	1a00434a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004364:	4b06      	ldr	r3, [pc, #24]	; (1a004380 <TIMER0_IRQHandler+0x3c>)
1a004366:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00436a:	2000      	movs	r0, #0
1a00436c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00436e:	2301      	movs	r3, #1
1a004370:	40ab      	lsls	r3, r5
1a004372:	4a02      	ldr	r2, [pc, #8]	; (1a00437c <TIMER0_IRQHandler+0x38>)
1a004374:	6013      	str	r3, [r2, #0]
1a004376:	e7e8      	b.n	1a00434a <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a004378:	bd38      	pop	{r3, r4, r5, pc}
1a00437a:	bf00      	nop
1a00437c:	40084000 	.word	0x40084000
1a004380:	100000a0 	.word	0x100000a0

1a004384 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a004384:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004386:	2400      	movs	r4, #0
1a004388:	e001      	b.n	1a00438e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00438a:	3401      	adds	r4, #1
1a00438c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00438e:	2c03      	cmp	r4, #3
1a004390:	d813      	bhi.n	1a0043ba <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a004392:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004394:	4b09      	ldr	r3, [pc, #36]	; (1a0043bc <TIMER1_IRQHandler+0x38>)
1a004396:	681a      	ldr	r2, [r3, #0]
1a004398:	f004 010f 	and.w	r1, r4, #15
1a00439c:	2301      	movs	r3, #1
1a00439e:	408b      	lsls	r3, r1
1a0043a0:	421a      	tst	r2, r3
1a0043a2:	d0f2      	beq.n	1a00438a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0043a4:	1d23      	adds	r3, r4, #4
1a0043a6:	4a06      	ldr	r2, [pc, #24]	; (1a0043c0 <TIMER1_IRQHandler+0x3c>)
1a0043a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0043ac:	2000      	movs	r0, #0
1a0043ae:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0043b0:	2301      	movs	r3, #1
1a0043b2:	40ab      	lsls	r3, r5
1a0043b4:	4a01      	ldr	r2, [pc, #4]	; (1a0043bc <TIMER1_IRQHandler+0x38>)
1a0043b6:	6013      	str	r3, [r2, #0]
1a0043b8:	e7e7      	b.n	1a00438a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0043ba:	bd38      	pop	{r3, r4, r5, pc}
1a0043bc:	40085000 	.word	0x40085000
1a0043c0:	100000a0 	.word	0x100000a0

1a0043c4 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0043c4:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043c6:	2400      	movs	r4, #0
1a0043c8:	e001      	b.n	1a0043ce <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0043ca:	3401      	adds	r4, #1
1a0043cc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043ce:	2c03      	cmp	r4, #3
1a0043d0:	d814      	bhi.n	1a0043fc <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0043d2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0043d4:	4b0a      	ldr	r3, [pc, #40]	; (1a004400 <TIMER2_IRQHandler+0x3c>)
1a0043d6:	681a      	ldr	r2, [r3, #0]
1a0043d8:	f004 010f 	and.w	r1, r4, #15
1a0043dc:	2301      	movs	r3, #1
1a0043de:	408b      	lsls	r3, r1
1a0043e0:	421a      	tst	r2, r3
1a0043e2:	d0f2      	beq.n	1a0043ca <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0043e4:	f104 0308 	add.w	r3, r4, #8
1a0043e8:	4a06      	ldr	r2, [pc, #24]	; (1a004404 <TIMER2_IRQHandler+0x40>)
1a0043ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0043ee:	2000      	movs	r0, #0
1a0043f0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0043f2:	2301      	movs	r3, #1
1a0043f4:	40ab      	lsls	r3, r5
1a0043f6:	4a02      	ldr	r2, [pc, #8]	; (1a004400 <TIMER2_IRQHandler+0x3c>)
1a0043f8:	6013      	str	r3, [r2, #0]
1a0043fa:	e7e6      	b.n	1a0043ca <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0043fc:	bd38      	pop	{r3, r4, r5, pc}
1a0043fe:	bf00      	nop
1a004400:	400c3000 	.word	0x400c3000
1a004404:	100000a0 	.word	0x100000a0

1a004408 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a004408:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00440a:	2400      	movs	r4, #0
1a00440c:	e001      	b.n	1a004412 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00440e:	3401      	adds	r4, #1
1a004410:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004412:	2c03      	cmp	r4, #3
1a004414:	d814      	bhi.n	1a004440 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a004416:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004418:	4b0a      	ldr	r3, [pc, #40]	; (1a004444 <TIMER3_IRQHandler+0x3c>)
1a00441a:	681a      	ldr	r2, [r3, #0]
1a00441c:	f004 010f 	and.w	r1, r4, #15
1a004420:	2301      	movs	r3, #1
1a004422:	408b      	lsls	r3, r1
1a004424:	421a      	tst	r2, r3
1a004426:	d0f2      	beq.n	1a00440e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004428:	f104 030c 	add.w	r3, r4, #12
1a00442c:	4a06      	ldr	r2, [pc, #24]	; (1a004448 <TIMER3_IRQHandler+0x40>)
1a00442e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004432:	2000      	movs	r0, #0
1a004434:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004436:	2301      	movs	r3, #1
1a004438:	40ab      	lsls	r3, r5
1a00443a:	4a02      	ldr	r2, [pc, #8]	; (1a004444 <TIMER3_IRQHandler+0x3c>)
1a00443c:	6013      	str	r3, [r2, #0]
1a00443e:	e7e6      	b.n	1a00440e <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a004440:	bd38      	pop	{r3, r4, r5, pc}
1a004442:	bf00      	nop
1a004444:	400c4000 	.word	0x400c4000
1a004448:	100000a0 	.word	0x100000a0

1a00444c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00444c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00444e:	4d0b      	ldr	r5, [pc, #44]	; (1a00447c <gpioObtainPinInit+0x30>)
1a004450:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004454:	182c      	adds	r4, r5, r0
1a004456:	5628      	ldrsb	r0, [r5, r0]
1a004458:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00445a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00445e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a004460:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a004464:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a004466:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00446a:	9b02      	ldr	r3, [sp, #8]
1a00446c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00446e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a004472:	9b03      	ldr	r3, [sp, #12]
1a004474:	701a      	strb	r2, [r3, #0]
}
1a004476:	bc30      	pop	{r4, r5}
1a004478:	4770      	bx	lr
1a00447a:	bf00      	nop
1a00447c:	1a0062d0 	.word	0x1a0062d0

1a004480 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a004480:	f110 0f02 	cmn.w	r0, #2
1a004484:	f000 80c7 	beq.w	1a004616 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a004488:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00448c:	f000 80c5 	beq.w	1a00461a <gpioInit+0x19a>
{
1a004490:	b570      	push	{r4, r5, r6, lr}
1a004492:	b084      	sub	sp, #16
1a004494:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004496:	2300      	movs	r3, #0
1a004498:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00449c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0044a0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0044a4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0044a8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0044ac:	f10d 030b 	add.w	r3, sp, #11
1a0044b0:	9301      	str	r3, [sp, #4]
1a0044b2:	ab03      	add	r3, sp, #12
1a0044b4:	9300      	str	r3, [sp, #0]
1a0044b6:	f10d 030d 	add.w	r3, sp, #13
1a0044ba:	f10d 020e 	add.w	r2, sp, #14
1a0044be:	f10d 010f 	add.w	r1, sp, #15
1a0044c2:	f7ff ffc3 	bl	1a00444c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0044c6:	2c05      	cmp	r4, #5
1a0044c8:	f200 80a9 	bhi.w	1a00461e <gpioInit+0x19e>
1a0044cc:	e8df f004 	tbb	[pc, r4]
1a0044d0:	45278109 	.word	0x45278109
1a0044d4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0044d6:	4853      	ldr	r0, [pc, #332]	; (1a004624 <gpioInit+0x1a4>)
1a0044d8:	f7ff fb33 	bl	1a003b42 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0044dc:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0044de:	b004      	add	sp, #16
1a0044e0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0044e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0044e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0044ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0044ee:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0044f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0044f6:	494c      	ldr	r1, [pc, #304]	; (1a004628 <gpioInit+0x1a8>)
1a0044f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0044fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004500:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004504:	2001      	movs	r0, #1
1a004506:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00450a:	4c46      	ldr	r4, [pc, #280]	; (1a004624 <gpioInit+0x1a4>)
1a00450c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004510:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004514:	ea22 0201 	bic.w	r2, r2, r1
1a004518:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00451c:	e7df      	b.n	1a0044de <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00451e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004522:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004526:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00452a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00452e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004532:	493d      	ldr	r1, [pc, #244]	; (1a004628 <gpioInit+0x1a8>)
1a004534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004538:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00453c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004540:	2001      	movs	r0, #1
1a004542:	fa00 f102 	lsl.w	r1, r0, r2
1a004546:	4c37      	ldr	r4, [pc, #220]	; (1a004624 <gpioInit+0x1a4>)
1a004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00454c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004550:	ea22 0201 	bic.w	r2, r2, r1
1a004554:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004558:	e7c1      	b.n	1a0044de <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00455a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00455e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004562:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004566:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00456a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00456e:	492e      	ldr	r1, [pc, #184]	; (1a004628 <gpioInit+0x1a8>)
1a004570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004574:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004578:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00457c:	2001      	movs	r0, #1
1a00457e:	fa00 f102 	lsl.w	r1, r0, r2
1a004582:	4c28      	ldr	r4, [pc, #160]	; (1a004624 <gpioInit+0x1a4>)
1a004584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004588:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00458c:	ea22 0201 	bic.w	r2, r2, r1
1a004590:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004594:	e7a3      	b.n	1a0044de <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004596:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00459a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00459e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0045a2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0045a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0045aa:	491f      	ldr	r1, [pc, #124]	; (1a004628 <gpioInit+0x1a8>)
1a0045ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0045b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0045b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0045b8:	2001      	movs	r0, #1
1a0045ba:	fa00 f102 	lsl.w	r1, r0, r2
1a0045be:	4c19      	ldr	r4, [pc, #100]	; (1a004624 <gpioInit+0x1a4>)
1a0045c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0045c4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0045c8:	ea22 0201 	bic.w	r2, r2, r1
1a0045cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0045d0:	e785      	b.n	1a0044de <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0045d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0045d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0045da:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0045de:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0045e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0045e6:	4910      	ldr	r1, [pc, #64]	; (1a004628 <gpioInit+0x1a8>)
1a0045e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0045ec:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0045f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0045f4:	2001      	movs	r0, #1
1a0045f6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0045fa:	4b0a      	ldr	r3, [pc, #40]	; (1a004624 <gpioInit+0x1a4>)
1a0045fc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a004600:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a004604:	4331      	orrs	r1, r6
1a004606:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00460a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a00460c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a004610:	2100      	movs	r1, #0
1a004612:	5499      	strb	r1, [r3, r2]
1a004614:	e763      	b.n	1a0044de <gpioInit+0x5e>
	  return FALSE;
1a004616:	2000      	movs	r0, #0
1a004618:	4770      	bx	lr
	  return FALSE;
1a00461a:	2000      	movs	r0, #0
}
1a00461c:	4770      	bx	lr
      ret_val = 0;
1a00461e:	2000      	movs	r0, #0
1a004620:	e75d      	b.n	1a0044de <gpioInit+0x5e>
1a004622:	bf00      	nop
1a004624:	400f4000 	.word	0x400f4000
1a004628:	40086000 	.word	0x40086000

1a00462c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a00462c:	f110 0f02 	cmn.w	r0, #2
1a004630:	d02d      	beq.n	1a00468e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a004632:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004636:	d02c      	beq.n	1a004692 <gpioWrite+0x66>
{
1a004638:	b510      	push	{r4, lr}
1a00463a:	b084      	sub	sp, #16
1a00463c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00463e:	2300      	movs	r3, #0
1a004640:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004644:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004648:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00464c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004650:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004654:	f10d 030b 	add.w	r3, sp, #11
1a004658:	9301      	str	r3, [sp, #4]
1a00465a:	ab03      	add	r3, sp, #12
1a00465c:	9300      	str	r3, [sp, #0]
1a00465e:	f10d 030d 	add.w	r3, sp, #13
1a004662:	f10d 020e 	add.w	r2, sp, #14
1a004666:	f10d 010f 	add.w	r1, sp, #15
1a00466a:	f7ff feef 	bl	1a00444c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00466e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004672:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a004676:	1c21      	adds	r1, r4, #0
1a004678:	bf18      	it	ne
1a00467a:	2101      	movne	r1, #1
1a00467c:	015b      	lsls	r3, r3, #5
1a00467e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004682:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a004686:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a004688:	2001      	movs	r0, #1
}
1a00468a:	b004      	add	sp, #16
1a00468c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00468e:	2000      	movs	r0, #0
1a004690:	4770      	bx	lr
	  return FALSE;
1a004692:	2000      	movs	r0, #0
}
1a004694:	4770      	bx	lr
1a004696:	Address 0x000000001a004696 is out of bounds.


1a004698 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a004698:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00469a:	4b04      	ldr	r3, [pc, #16]	; (1a0046ac <USB0_IRQHandler+0x14>)
1a00469c:	681b      	ldr	r3, [r3, #0]
1a00469e:	681b      	ldr	r3, [r3, #0]
1a0046a0:	68db      	ldr	r3, [r3, #12]
1a0046a2:	4a03      	ldr	r2, [pc, #12]	; (1a0046b0 <USB0_IRQHandler+0x18>)
1a0046a4:	6810      	ldr	r0, [r2, #0]
1a0046a6:	4798      	blx	r3
}
1a0046a8:	bd08      	pop	{r3, pc}
1a0046aa:	bf00      	nop
1a0046ac:	10002c54 	.word	0x10002c54
1a0046b0:	10002bb4 	.word	0x10002bb4

1a0046b4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0046b4:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0046b6:	f7ff f8f5 	bl	1a0038a4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0046ba:	4b18      	ldr	r3, [pc, #96]	; (1a00471c <boardInit+0x68>)
1a0046bc:	6818      	ldr	r0, [r3, #0]
1a0046be:	f7ff fbdd 	bl	1a003e7c <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0046c2:	2105      	movs	r1, #5
1a0046c4:	2000      	movs	r0, #0
1a0046c6:	f7ff fedb 	bl	1a004480 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0046ca:	2100      	movs	r1, #0
1a0046cc:	2024      	movs	r0, #36	; 0x24
1a0046ce:	f7ff fed7 	bl	1a004480 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0046d2:	2100      	movs	r1, #0
1a0046d4:	2025      	movs	r0, #37	; 0x25
1a0046d6:	f7ff fed3 	bl	1a004480 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0046da:	2100      	movs	r1, #0
1a0046dc:	2026      	movs	r0, #38	; 0x26
1a0046de:	f7ff fecf 	bl	1a004480 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0046e2:	2100      	movs	r1, #0
1a0046e4:	2027      	movs	r0, #39	; 0x27
1a0046e6:	f7ff fecb 	bl	1a004480 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0046ea:	2101      	movs	r1, #1
1a0046ec:	2028      	movs	r0, #40	; 0x28
1a0046ee:	f7ff fec7 	bl	1a004480 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0046f2:	2101      	movs	r1, #1
1a0046f4:	2029      	movs	r0, #41	; 0x29
1a0046f6:	f7ff fec3 	bl	1a004480 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0046fa:	2101      	movs	r1, #1
1a0046fc:	202a      	movs	r0, #42	; 0x2a
1a0046fe:	f7ff febf 	bl	1a004480 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a004702:	2101      	movs	r1, #1
1a004704:	202b      	movs	r0, #43	; 0x2b
1a004706:	f7ff febb 	bl	1a004480 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00470a:	2101      	movs	r1, #1
1a00470c:	202c      	movs	r0, #44	; 0x2c
1a00470e:	f7ff feb7 	bl	1a004480 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a004712:	2101      	movs	r1, #1
1a004714:	202d      	movs	r0, #45	; 0x2d
1a004716:	f7ff feb3 	bl	1a004480 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00471a:	bd08      	pop	{r3, pc}
1a00471c:	10002c50 	.word	0x10002c50

1a004720 <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a004720:	b4f0      	push	{r4, r5, r6, r7}
1a004722:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a004724:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a004728:	0083      	lsls	r3, r0, #2
1a00472a:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a00472e:	181b      	adds	r3, r3, r0
1a004730:	eb41 0202 	adc.w	r2, r1, r2
1a004734:	0211      	lsls	r1, r2, #8
1a004736:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a00473a:	0218      	lsls	r0, r3, #8
1a00473c:	1ac6      	subs	r6, r0, r3
1a00473e:	eb61 0702 	sbc.w	r7, r1, r2
1a004742:	013b      	lsls	r3, r7, #4
1a004744:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a004748:	0132      	lsls	r2, r6, #4
1a00474a:	4616      	mov	r6, r2
1a00474c:	461f      	mov	r7, r3
1a00474e:	e9cd 6700 	strd	r6, r7, [sp]
   for( i=delay; i>0; i-- );
1a004752:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004756:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00475a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00475e:	4313      	orrs	r3, r2
1a004760:	d008      	beq.n	1a004774 <delayInaccurateMs+0x54>
1a004762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004766:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a00476a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a00476e:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a004772:	e7f2      	b.n	1a00475a <delayInaccurateMs+0x3a>
}
1a004774:	b004      	add	sp, #16
1a004776:	bcf0      	pop	{r4, r5, r6, r7}
1a004778:	4770      	bx	lr

1a00477a <delayInaccurateUs>:

void delayInaccurateUs( tick_t delay_us )
{
1a00477a:	b530      	push	{r4, r5, lr}
1a00477c:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a00477e:	1803      	adds	r3, r0, r0
1a004780:	eb41 0201 	adc.w	r2, r1, r1
1a004784:	1818      	adds	r0, r3, r0
1a004786:	eb42 0101 	adc.w	r1, r2, r1
1a00478a:	010b      	lsls	r3, r1, #4
1a00478c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a004790:	0102      	lsls	r2, r0, #4
1a004792:	1880      	adds	r0, r0, r2
1a004794:	eb43 0101 	adc.w	r1, r3, r1
1a004798:	008b      	lsls	r3, r1, #2
1a00479a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a00479e:	0082      	lsls	r2, r0, #2
1a0047a0:	4610      	mov	r0, r2
1a0047a2:	4619      	mov	r1, r3
1a0047a4:	220a      	movs	r2, #10
1a0047a6:	2300      	movs	r3, #0
1a0047a8:	f000 f992 	bl	1a004ad0 <__aeabi_uldivmod>
1a0047ac:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a0047b0:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0047b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0047b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0047bc:	4313      	orrs	r3, r2
1a0047be:	d008      	beq.n	1a0047d2 <delayInaccurateUs+0x58>
1a0047c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0047c4:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a0047c8:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a0047cc:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a0047d0:	e7f2      	b.n	1a0047b8 <delayInaccurateUs+0x3e>
}
1a0047d2:	b005      	add	sp, #20
1a0047d4:	bd30      	pop	{r4, r5, pc}
1a0047d6:	Address 0x000000001a0047d6 is out of bounds.


1a0047d8 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0047d8:	b510      	push	{r4, lr}
1a0047da:	4604      	mov	r4, r0
1a0047dc:	4610      	mov	r0, r2
1a0047de:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a0047e0:	4b04      	ldr	r3, [pc, #16]	; (1a0047f4 <delayInit+0x1c>)
1a0047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0047e6:	f000 f973 	bl	1a004ad0 <__aeabi_uldivmod>
1a0047ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0047ee:	2300      	movs	r3, #0
1a0047f0:	7423      	strb	r3, [r4, #16]
}
1a0047f2:	bd10      	pop	{r4, pc}
1a0047f4:	10000098 	.word	0x10000098

1a0047f8 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a0047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0047fa:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0047fc:	7c05      	ldrb	r5, [r0, #16]
1a0047fe:	b93d      	cbnz	r5, 1a004810 <delayRead+0x18>
      delay->startTime = tickRead();
1a004800:	f7ff fd4c 	bl	1a00429c <tickRead>
1a004804:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a004808:	2301      	movs	r3, #1
1a00480a:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a00480c:	4628      	mov	r0, r5
1a00480e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a004810:	f7ff fd44 	bl	1a00429c <tickRead>
1a004814:	6823      	ldr	r3, [r4, #0]
1a004816:	6862      	ldr	r2, [r4, #4]
1a004818:	1ac6      	subs	r6, r0, r3
1a00481a:	eb61 0702 	sbc.w	r7, r1, r2
1a00481e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a004822:	429f      	cmp	r7, r3
1a004824:	bf08      	it	eq
1a004826:	4296      	cmpeq	r6, r2
1a004828:	d303      	bcc.n	1a004832 <delayRead+0x3a>
         delay->running = 0;
1a00482a:	2300      	movs	r3, #0
1a00482c:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a00482e:	2501      	movs	r5, #1
1a004830:	e7ec      	b.n	1a00480c <delayRead+0x14>
   bool_t timeArrived = 0;
1a004832:	2500      	movs	r5, #0
1a004834:	e7ea      	b.n	1a00480c <delayRead+0x14>
1a004836:	Address 0x000000001a004836 is out of bounds.


1a004838 <pcf8574TGpioPortWrite>:
   pcf8574TGpioPortDirections = directions;
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
}

static void pcf8574TGpioPortWrite( uint8_t portValue )
{
1a004838:	b500      	push	{lr}
1a00483a:	b085      	sub	sp, #20
   pcf8574TGpioPortValue = portValue;
1a00483c:	4b09      	ldr	r3, [pc, #36]	; (1a004864 <pcf8574TGpioPortWrite+0x2c>)
1a00483e:	7018      	strb	r0, [r3, #0]
   // Or with pcf8574TGpioPortDirections to keep pins initialized as inputs
   uint8_t transmitDataBuffer = portValue | pcf8574TGpioPortDirections;
1a004840:	4b09      	ldr	r3, [pc, #36]	; (1a004868 <pcf8574TGpioPortWrite+0x30>)
1a004842:	781b      	ldrb	r3, [r3, #0]
1a004844:	4318      	orrs	r0, r3
1a004846:	f88d 000f 	strb.w	r0, [sp, #15]
   i2cWrite( I2C0, pcf8574TI2cAddress, &transmitDataBuffer, 1, TRUE );
1a00484a:	2301      	movs	r3, #1
1a00484c:	9300      	str	r3, [sp, #0]
1a00484e:	f10d 020f 	add.w	r2, sp, #15
1a004852:	4906      	ldr	r1, [pc, #24]	; (1a00486c <pcf8574TGpioPortWrite+0x34>)
1a004854:	7809      	ldrb	r1, [r1, #0]
1a004856:	2000      	movs	r0, #0
1a004858:	f7ff fd65 	bl	1a004326 <i2cWrite>
}
1a00485c:	b005      	add	sp, #20
1a00485e:	f85d fb04 	ldr.w	pc, [sp], #4
1a004862:	bf00      	nop
1a004864:	10002bc3 	.word	0x10002bc3
1a004868:	10002bc2 	.word	0x10002bc2
1a00486c:	100000e0 	.word	0x100000e0

1a004870 <pcf8574TGpioWrite>:
{
   return pcf8574TGpioPortRead() & (1<<pin);
}

static void pcf8574TGpioWrite( pcf8574T_gpio_t pin, bool_t value )
{
1a004870:	b508      	push	{r3, lr}
   uint8_t portValue = pcf8574TGpioPortValue;
1a004872:	4b08      	ldr	r3, [pc, #32]	; (1a004894 <pcf8574TGpioWrite+0x24>)
1a004874:	781b      	ldrb	r3, [r3, #0]
   if( value ) {
1a004876:	b139      	cbz	r1, 1a004888 <pcf8574TGpioWrite+0x18>
      portValue |= (1<<pin);
1a004878:	2201      	movs	r2, #1
1a00487a:	fa02 f000 	lsl.w	r0, r2, r0
1a00487e:	4303      	orrs	r3, r0
1a004880:	b2d8      	uxtb	r0, r3
   } else {
      portValue &= ~(1<<pin);
   }
   pcf8574TGpioPortWrite( portValue );
1a004882:	f7ff ffd9 	bl	1a004838 <pcf8574TGpioPortWrite>
}
1a004886:	bd08      	pop	{r3, pc}
      portValue &= ~(1<<pin);
1a004888:	2101      	movs	r1, #1
1a00488a:	fa01 f000 	lsl.w	r0, r1, r0
1a00488e:	ea23 0000 	bic.w	r0, r3, r0
1a004892:	e7f6      	b.n	1a004882 <pcf8574TGpioWrite+0x12>
1a004894:	10002bc3 	.word	0x10002bc3

1a004898 <lcdPinSet>:



static void lcdPinSet( uint8_t pin, bool_t status )
{
1a004898:	b508      	push	{r3, lr}
#ifdef LCD_HD44780_I2C_PCF8574T
   pcf8574TGpioWrite( pin, status );
1a00489a:	f7ff ffe9 	bl	1a004870 <pcf8574TGpioWrite>
#else
   gpioWrite( pin, status );
#endif
}
1a00489e:	bd08      	pop	{r3, pc}

1a0048a0 <lcdSendNibble>:
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
   //lcdDelay_us(50); // commands need > 37us to settle
}

static void lcdSendNibble( uint8_t nibble )
{
1a0048a0:	b510      	push	{r4, lr}
1a0048a2:	4604      	mov	r4, r0
   lcdPinSet( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a0048a4:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a0048a8:	2007      	movs	r0, #7
1a0048aa:	f7ff fff5 	bl	1a004898 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a0048ae:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a0048b2:	2006      	movs	r0, #6
1a0048b4:	f7ff fff0 	bl	1a004898 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a0048b8:	f004 0120 	and.w	r1, r4, #32
1a0048bc:	2005      	movs	r0, #5
1a0048be:	f7ff ffeb 	bl	1a004898 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a0048c2:	f004 0110 	and.w	r1, r4, #16
1a0048c6:	2004      	movs	r0, #4
1a0048c8:	f7ff ffe6 	bl	1a004898 <lcdPinSet>
}
1a0048cc:	bd10      	pop	{r4, pc}

1a0048ce <lcdEnablePulse>:
{
1a0048ce:	b508      	push	{r3, lr}
   lcdPinSet( LCD_HD44780_EN, ON );       // EN = 1 for H-to-L pulse
1a0048d0:	2101      	movs	r1, #1
1a0048d2:	2002      	movs	r0, #2
1a0048d4:	f7ff ffe0 	bl	1a004898 <lcdPinSet>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider //lcdDelay_us(1);
1a0048d8:	2019      	movs	r0, #25
1a0048da:	2100      	movs	r1, #0
1a0048dc:	f7ff ff4d 	bl	1a00477a <delayInaccurateUs>
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
1a0048e0:	2100      	movs	r1, #0
1a0048e2:	2002      	movs	r0, #2
1a0048e4:	f7ff ffd8 	bl	1a004898 <lcdPinSet>
}
1a0048e8:	bd08      	pop	{r3, pc}
1a0048ea:	Address 0x000000001a0048ea is out of bounds.


1a0048ec <pcf8574TGpioPortInit>:
{
1a0048ec:	b500      	push	{lr}
1a0048ee:	b085      	sub	sp, #20
1a0048f0:	f88d 000f 	strb.w	r0, [sp, #15]
   pcf8574TGpioPortDirections = directions;
1a0048f4:	4b06      	ldr	r3, [pc, #24]	; (1a004910 <pcf8574TGpioPortInit+0x24>)
1a0048f6:	7018      	strb	r0, [r3, #0]
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
1a0048f8:	2301      	movs	r3, #1
1a0048fa:	9300      	str	r3, [sp, #0]
1a0048fc:	f10d 020f 	add.w	r2, sp, #15
1a004900:	4904      	ldr	r1, [pc, #16]	; (1a004914 <pcf8574TGpioPortInit+0x28>)
1a004902:	7809      	ldrb	r1, [r1, #0]
1a004904:	2000      	movs	r0, #0
1a004906:	f7ff fd0e 	bl	1a004326 <i2cWrite>
}
1a00490a:	b005      	add	sp, #20
1a00490c:	f85d fb04 	ldr.w	pc, [sp], #4
1a004910:	10002bc2 	.word	0x10002bc2
1a004914:	100000e0 	.word	0x100000e0

1a004918 <pcf8574TInit>:
{
1a004918:	b508      	push	{r3, lr}
   pcf8574TI2cAddress = i2cAddress;
1a00491a:	4b04      	ldr	r3, [pc, #16]	; (1a00492c <pcf8574TInit+0x14>)
1a00491c:	7019      	strb	r1, [r3, #0]
   pcf8574TGpioPortInit( 0x00 ); // Init all GPIOs as outputs
1a00491e:	2000      	movs	r0, #0
1a004920:	f7ff ffe4 	bl	1a0048ec <pcf8574TGpioPortInit>
   pcf8574TGpioPortWrite( 0x00 ); // Init all as zeros
1a004924:	2000      	movs	r0, #0
1a004926:	f7ff ff87 	bl	1a004838 <pcf8574TGpioPortWrite>
}
1a00492a:	bd08      	pop	{r3, pc}
1a00492c:	100000e0 	.word	0x100000e0

1a004930 <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a004930:	b510      	push	{r4, lr}
1a004932:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a004934:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a004938:	f7ff ffb2 	bl	1a0048a0 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a00493c:	2100      	movs	r1, #0
1a00493e:	4608      	mov	r0, r1
1a004940:	f7ff ffaa 	bl	1a004898 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a004944:	2100      	movs	r1, #0
1a004946:	2001      	movs	r0, #1
1a004948:	f7ff ffa6 	bl	1a004898 <lcdPinSet>

   lcdEnablePulse();
1a00494c:	f7ff ffbf 	bl	1a0048ce <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a004950:	2019      	movs	r0, #25
1a004952:	2100      	movs	r1, #0
1a004954:	f7ff ff11 	bl	1a00477a <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a004958:	0120      	lsls	r0, r4, #4
1a00495a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a00495e:	f7ff ff9f 	bl	1a0048a0 <lcdSendNibble>
   lcdEnablePulse();
1a004962:	f7ff ffb4 	bl	1a0048ce <lcdEnablePulse>
}
1a004966:	bd10      	pop	{r4, pc}

1a004968 <lcdData>:

void lcdData( uint8_t data )
{
1a004968:	b510      	push	{r4, lr}
1a00496a:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a00496c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a004970:	f7ff ff96 	bl	1a0048a0 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, ON );    // RS = 1 for data
1a004974:	2101      	movs	r1, #1
1a004976:	2000      	movs	r0, #0
1a004978:	f7ff ff8e 	bl	1a004898 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a00497c:	2100      	movs	r1, #0
1a00497e:	2001      	movs	r0, #1
1a004980:	f7ff ff8a 	bl	1a004898 <lcdPinSet>

   lcdEnablePulse();
1a004984:	f7ff ffa3 	bl	1a0048ce <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a004988:	0120      	lsls	r0, r4, #4
1a00498a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a00498e:	f7ff ff87 	bl	1a0048a0 <lcdSendNibble>
   lcdEnablePulse();
1a004992:	f7ff ff9c 	bl	1a0048ce <lcdEnablePulse>
}
1a004996:	bd10      	pop	{r4, pc}

1a004998 <lcdGoToXY>:
   lcdClearAndHome();
}

void lcdGoToXY( uint8_t x, uint8_t y )
{
   if( x >= lcd.lineWidth || y >= lcd.amountOfLines ) {
1a004998:	b282      	uxth	r2, r0
1a00499a:	4b11      	ldr	r3, [pc, #68]	; (1a0049e0 <lcdGoToXY+0x48>)
1a00499c:	881b      	ldrh	r3, [r3, #0]
1a00499e:	429a      	cmp	r2, r3
1a0049a0:	d204      	bcs.n	1a0049ac <lcdGoToXY+0x14>
1a0049a2:	b28b      	uxth	r3, r1
1a0049a4:	4a0e      	ldr	r2, [pc, #56]	; (1a0049e0 <lcdGoToXY+0x48>)
1a0049a6:	8852      	ldrh	r2, [r2, #2]
1a0049a8:	4293      	cmp	r3, r2
1a0049aa:	d300      	bcc.n	1a0049ae <lcdGoToXY+0x16>
1a0049ac:	4770      	bx	lr
{
1a0049ae:	b530      	push	{r4, r5, lr}
1a0049b0:	b083      	sub	sp, #12
1a0049b2:	460d      	mov	r5, r1
1a0049b4:	4604      	mov	r4, r0
      return;
   }
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a0049b6:	4b0b      	ldr	r3, [pc, #44]	; (1a0049e4 <lcdGoToXY+0x4c>)
1a0049b8:	681b      	ldr	r3, [r3, #0]
1a0049ba:	9301      	str	r3, [sp, #4]
   //lcdCommand( firstCharAdress[ y - 1 ] + x - 1 ); // Start in {x,y} = {1,1}
   lcdCommand( firstCharAdress[y] + x );             // Start in {x,y} = {0,0}
1a0049bc:	ab02      	add	r3, sp, #8
1a0049be:	440b      	add	r3, r1
1a0049c0:	f813 0c04 	ldrb.w	r0, [r3, #-4]
1a0049c4:	4420      	add	r0, r4
1a0049c6:	b2c0      	uxtb	r0, r0
1a0049c8:	f7ff ffb2 	bl	1a004930 <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a0049cc:	2064      	movs	r0, #100	; 0x64
1a0049ce:	2100      	movs	r1, #0
1a0049d0:	f7ff fed3 	bl	1a00477a <delayInaccurateUs>
   lcd.x = x;
1a0049d4:	4b02      	ldr	r3, [pc, #8]	; (1a0049e0 <lcdGoToXY+0x48>)
1a0049d6:	721c      	strb	r4, [r3, #8]
   lcd.y = y;
1a0049d8:	725d      	strb	r5, [r3, #9]
}
1a0049da:	b003      	add	sp, #12
1a0049dc:	bd30      	pop	{r4, r5, pc}
1a0049de:	bf00      	nop
1a0049e0:	10002bb8 	.word	0x10002bb8
1a0049e4:	1a0063b8 	.word	0x1a0063b8

1a0049e8 <lcdClear>:

void lcdClear( void )
{
1a0049e8:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a0049ea:	2001      	movs	r0, #1
1a0049ec:	f7ff ffa0 	bl	1a004930 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a0049f0:	2003      	movs	r0, #3
1a0049f2:	2100      	movs	r1, #0
1a0049f4:	f7ff fe94 	bl	1a004720 <delayInaccurateMs>
}
1a0049f8:	bd08      	pop	{r3, pc}

1a0049fa <lcdCursorSet>:

void lcdCursorSet( lcdCursorModes_t mode )
{
1a0049fa:	b508      	push	{r3, lr}
   lcdCommand( 0b00001100 | mode );
1a0049fc:	f040 000c 	orr.w	r0, r0, #12
1a004a00:	f7ff ff96 	bl	1a004930 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS); // Wait
1a004a04:	2003      	movs	r0, #3
1a004a06:	2100      	movs	r1, #0
1a004a08:	f7ff fe8a 	bl	1a004720 <delayInaccurateMs>
}
1a004a0c:	bd08      	pop	{r3, pc}

1a004a0e <lcdSendStringRaw>:

void lcdSendStringRaw( char* str )
{
1a004a0e:	b538      	push	{r3, r4, r5, lr}
1a004a10:	4605      	mov	r5, r0
   uint8_t i = 0;
1a004a12:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a004a14:	5d28      	ldrb	r0, [r5, r4]
1a004a16:	b120      	cbz	r0, 1a004a22 <lcdSendStringRaw+0x14>
      lcdData( str[i] );
1a004a18:	f7ff ffa6 	bl	1a004968 <lcdData>
      i++;
1a004a1c:	3401      	adds	r4, #1
1a004a1e:	b2e4      	uxtb	r4, r4
1a004a20:	e7f8      	b.n	1a004a14 <lcdSendStringRaw+0x6>
   }
}
1a004a22:	bd38      	pop	{r3, r4, r5, pc}

1a004a24 <lcdClearAndHome>:
   lcdSendCustomCharByIndex( customChar->address );
}


void lcdClearAndHome( void )
{
1a004a24:	b508      	push	{r3, lr}
   lcdClear();
1a004a26:	f7ff ffdf 	bl	1a0049e8 <lcdClear>
   lcdGoToXY( 0, 0 ); // Poner cursor en 0, 0
1a004a2a:	2100      	movs	r1, #0
1a004a2c:	4608      	mov	r0, r1
1a004a2e:	f7ff ffb3 	bl	1a004998 <lcdGoToXY>
   //delay(100);
}
1a004a32:	bd08      	pop	{r3, pc}

1a004a34 <lcdInit>:
{
1a004a34:	b538      	push	{r3, r4, r5, lr}
   lcd.lineWidth = lineWidth;
1a004a36:	4d25      	ldr	r5, [pc, #148]	; (1a004acc <lcdInit+0x98>)
1a004a38:	8028      	strh	r0, [r5, #0]
   lcd.amountOfLines = amountOfLines;
1a004a3a:	8069      	strh	r1, [r5, #2]
   lcd.charWidth = charWidth;
1a004a3c:	80aa      	strh	r2, [r5, #4]
   lcd.charHeight = charHeight;
1a004a3e:	80eb      	strh	r3, [r5, #6]
   lcd.x = 0;
1a004a40:	2400      	movs	r4, #0
1a004a42:	722c      	strb	r4, [r5, #8]
   lcd.y = 0;
1a004a44:	726c      	strb	r4, [r5, #9]
   pcf8574TInit( I2C0, PCF8574T_I2C_ADDRESS );
1a004a46:	2127      	movs	r1, #39	; 0x27
1a004a48:	4620      	mov	r0, r4
1a004a4a:	f7ff ff65 	bl	1a004918 <pcf8574TInit>
   lcdPinSet( LCD_HD44780_BACKLIGHT, ON );
1a004a4e:	2101      	movs	r1, #1
1a004a50:	2003      	movs	r0, #3
1a004a52:	f7ff ff21 	bl	1a004898 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );     // RW = 0
1a004a56:	4621      	mov	r1, r4
1a004a58:	2001      	movs	r0, #1
1a004a5a:	f7ff ff1d 	bl	1a004898 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RS, OFF );     // RS = 0
1a004a5e:	4621      	mov	r1, r4
1a004a60:	4620      	mov	r0, r4
1a004a62:	f7ff ff19 	bl	1a004898 <lcdPinSet>
   lcdPinSet( LCD_HD44780_EN, OFF );     // EN = 0
1a004a66:	4621      	mov	r1, r4
1a004a68:	2002      	movs	r0, #2
1a004a6a:	f7ff ff15 	bl	1a004898 <lcdPinSet>
   lcdCommand( 0x33 );                   // Command 0x33 for 4-bit mode
1a004a6e:	2033      	movs	r0, #51	; 0x33
1a004a70:	f7ff ff5e 	bl	1a004930 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004a74:	202d      	movs	r0, #45	; 0x2d
1a004a76:	2100      	movs	r1, #0
1a004a78:	f7ff fe7f 	bl	1a00477a <delayInaccurateUs>
   lcdCommand( 0x32 );                   // Command 0x32 for 4-bit mode
1a004a7c:	2032      	movs	r0, #50	; 0x32
1a004a7e:	f7ff ff57 	bl	1a004930 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004a82:	202d      	movs	r0, #45	; 0x2d
1a004a84:	2100      	movs	r1, #0
1a004a86:	f7ff fe78 	bl	1a00477a <delayInaccurateUs>
   lcdCommand( 0x28 );                   // Command 0x28 for 4-bit mode
1a004a8a:	2028      	movs	r0, #40	; 0x28
1a004a8c:	f7ff ff50 	bl	1a004930 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004a90:	202d      	movs	r0, #45	; 0x2d
1a004a92:	2100      	movs	r1, #0
1a004a94:	f7ff fe71 	bl	1a00477a <delayInaccurateUs>
   lcdCommand( 0x0E );                   // Command 0x0E for display on, cursor on
1a004a98:	200e      	movs	r0, #14
1a004a9a:	f7ff ff49 	bl	1a004930 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004a9e:	202d      	movs	r0, #45	; 0x2d
1a004aa0:	2100      	movs	r1, #0
1a004aa2:	f7ff fe6a 	bl	1a00477a <delayInaccurateUs>
   lcdClear();                           // Command for clear LCD
1a004aa6:	f7ff ff9f 	bl	1a0049e8 <lcdClear>
   lcdCommand( 0x06 );                   // Command 0x06 for Shift cursor right
1a004aaa:	2006      	movs	r0, #6
1a004aac:	f7ff ff40 	bl	1a004930 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004ab0:	202d      	movs	r0, #45	; 0x2d
1a004ab2:	2100      	movs	r1, #0
1a004ab4:	f7ff fe61 	bl	1a00477a <delayInaccurateUs>
   lcdDelay_ms( 1 );                     // Wait
1a004ab8:	2001      	movs	r0, #1
1a004aba:	2100      	movs	r1, #0
1a004abc:	f7ff fe30 	bl	1a004720 <delayInaccurateMs>
   lcdCursorSet( LCD_CURSOR_OFF );
1a004ac0:	4620      	mov	r0, r4
1a004ac2:	f7ff ff9a 	bl	1a0049fa <lcdCursorSet>
   lcdClearAndHome();
1a004ac6:	f7ff ffad 	bl	1a004a24 <lcdClearAndHome>
}
1a004aca:	bd38      	pop	{r3, r4, r5, pc}
1a004acc:	10002bb8 	.word	0x10002bb8

1a004ad0 <__aeabi_uldivmod>:
1a004ad0:	b953      	cbnz	r3, 1a004ae8 <__aeabi_uldivmod+0x18>
1a004ad2:	b94a      	cbnz	r2, 1a004ae8 <__aeabi_uldivmod+0x18>
1a004ad4:	2900      	cmp	r1, #0
1a004ad6:	bf08      	it	eq
1a004ad8:	2800      	cmpeq	r0, #0
1a004ada:	bf1c      	itt	ne
1a004adc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004ae0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004ae4:	f000 b974 	b.w	1a004dd0 <__aeabi_idiv0>
1a004ae8:	f1ad 0c08 	sub.w	ip, sp, #8
1a004aec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004af0:	f000 f806 	bl	1a004b00 <__udivmoddi4>
1a004af4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004afc:	b004      	add	sp, #16
1a004afe:	4770      	bx	lr

1a004b00 <__udivmoddi4>:
1a004b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004b04:	9e08      	ldr	r6, [sp, #32]
1a004b06:	4604      	mov	r4, r0
1a004b08:	4688      	mov	r8, r1
1a004b0a:	2b00      	cmp	r3, #0
1a004b0c:	f040 8085 	bne.w	1a004c1a <__udivmoddi4+0x11a>
1a004b10:	428a      	cmp	r2, r1
1a004b12:	4615      	mov	r5, r2
1a004b14:	d948      	bls.n	1a004ba8 <__udivmoddi4+0xa8>
1a004b16:	fab2 f282 	clz	r2, r2
1a004b1a:	b14a      	cbz	r2, 1a004b30 <__udivmoddi4+0x30>
1a004b1c:	f1c2 0720 	rsb	r7, r2, #32
1a004b20:	fa01 f302 	lsl.w	r3, r1, r2
1a004b24:	fa20 f707 	lsr.w	r7, r0, r7
1a004b28:	4095      	lsls	r5, r2
1a004b2a:	ea47 0803 	orr.w	r8, r7, r3
1a004b2e:	4094      	lsls	r4, r2
1a004b30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004b34:	0c23      	lsrs	r3, r4, #16
1a004b36:	fbb8 f7fe 	udiv	r7, r8, lr
1a004b3a:	fa1f fc85 	uxth.w	ip, r5
1a004b3e:	fb0e 8817 	mls	r8, lr, r7, r8
1a004b42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004b46:	fb07 f10c 	mul.w	r1, r7, ip
1a004b4a:	4299      	cmp	r1, r3
1a004b4c:	d909      	bls.n	1a004b62 <__udivmoddi4+0x62>
1a004b4e:	18eb      	adds	r3, r5, r3
1a004b50:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a004b54:	f080 80e3 	bcs.w	1a004d1e <__udivmoddi4+0x21e>
1a004b58:	4299      	cmp	r1, r3
1a004b5a:	f240 80e0 	bls.w	1a004d1e <__udivmoddi4+0x21e>
1a004b5e:	3f02      	subs	r7, #2
1a004b60:	442b      	add	r3, r5
1a004b62:	1a5b      	subs	r3, r3, r1
1a004b64:	b2a4      	uxth	r4, r4
1a004b66:	fbb3 f0fe 	udiv	r0, r3, lr
1a004b6a:	fb0e 3310 	mls	r3, lr, r0, r3
1a004b6e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004b72:	fb00 fc0c 	mul.w	ip, r0, ip
1a004b76:	45a4      	cmp	ip, r4
1a004b78:	d909      	bls.n	1a004b8e <__udivmoddi4+0x8e>
1a004b7a:	192c      	adds	r4, r5, r4
1a004b7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004b80:	f080 80cb 	bcs.w	1a004d1a <__udivmoddi4+0x21a>
1a004b84:	45a4      	cmp	ip, r4
1a004b86:	f240 80c8 	bls.w	1a004d1a <__udivmoddi4+0x21a>
1a004b8a:	3802      	subs	r0, #2
1a004b8c:	442c      	add	r4, r5
1a004b8e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004b92:	eba4 040c 	sub.w	r4, r4, ip
1a004b96:	2700      	movs	r7, #0
1a004b98:	b11e      	cbz	r6, 1a004ba2 <__udivmoddi4+0xa2>
1a004b9a:	40d4      	lsrs	r4, r2
1a004b9c:	2300      	movs	r3, #0
1a004b9e:	e9c6 4300 	strd	r4, r3, [r6]
1a004ba2:	4639      	mov	r1, r7
1a004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004ba8:	2a00      	cmp	r2, #0
1a004baa:	d053      	beq.n	1a004c54 <__udivmoddi4+0x154>
1a004bac:	fab2 f282 	clz	r2, r2
1a004bb0:	2a00      	cmp	r2, #0
1a004bb2:	f040 80b6 	bne.w	1a004d22 <__udivmoddi4+0x222>
1a004bb6:	1b49      	subs	r1, r1, r5
1a004bb8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004bbc:	fa1f f885 	uxth.w	r8, r5
1a004bc0:	2701      	movs	r7, #1
1a004bc2:	fbb1 fcfe 	udiv	ip, r1, lr
1a004bc6:	0c23      	lsrs	r3, r4, #16
1a004bc8:	fb0e 111c 	mls	r1, lr, ip, r1
1a004bcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004bd0:	fb08 f10c 	mul.w	r1, r8, ip
1a004bd4:	4299      	cmp	r1, r3
1a004bd6:	d907      	bls.n	1a004be8 <__udivmoddi4+0xe8>
1a004bd8:	18eb      	adds	r3, r5, r3
1a004bda:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a004bde:	d202      	bcs.n	1a004be6 <__udivmoddi4+0xe6>
1a004be0:	4299      	cmp	r1, r3
1a004be2:	f200 80ec 	bhi.w	1a004dbe <__udivmoddi4+0x2be>
1a004be6:	4684      	mov	ip, r0
1a004be8:	1a59      	subs	r1, r3, r1
1a004bea:	b2a3      	uxth	r3, r4
1a004bec:	fbb1 f0fe 	udiv	r0, r1, lr
1a004bf0:	fb0e 1410 	mls	r4, lr, r0, r1
1a004bf4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a004bf8:	fb08 f800 	mul.w	r8, r8, r0
1a004bfc:	45a0      	cmp	r8, r4
1a004bfe:	d907      	bls.n	1a004c10 <__udivmoddi4+0x110>
1a004c00:	192c      	adds	r4, r5, r4
1a004c02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004c06:	d202      	bcs.n	1a004c0e <__udivmoddi4+0x10e>
1a004c08:	45a0      	cmp	r8, r4
1a004c0a:	f200 80dc 	bhi.w	1a004dc6 <__udivmoddi4+0x2c6>
1a004c0e:	4618      	mov	r0, r3
1a004c10:	eba4 0408 	sub.w	r4, r4, r8
1a004c14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a004c18:	e7be      	b.n	1a004b98 <__udivmoddi4+0x98>
1a004c1a:	428b      	cmp	r3, r1
1a004c1c:	d908      	bls.n	1a004c30 <__udivmoddi4+0x130>
1a004c1e:	2e00      	cmp	r6, #0
1a004c20:	d078      	beq.n	1a004d14 <__udivmoddi4+0x214>
1a004c22:	2700      	movs	r7, #0
1a004c24:	e9c6 0100 	strd	r0, r1, [r6]
1a004c28:	4638      	mov	r0, r7
1a004c2a:	4639      	mov	r1, r7
1a004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004c30:	fab3 f783 	clz	r7, r3
1a004c34:	b97f      	cbnz	r7, 1a004c56 <__udivmoddi4+0x156>
1a004c36:	428b      	cmp	r3, r1
1a004c38:	d302      	bcc.n	1a004c40 <__udivmoddi4+0x140>
1a004c3a:	4282      	cmp	r2, r0
1a004c3c:	f200 80bd 	bhi.w	1a004dba <__udivmoddi4+0x2ba>
1a004c40:	1a84      	subs	r4, r0, r2
1a004c42:	eb61 0303 	sbc.w	r3, r1, r3
1a004c46:	2001      	movs	r0, #1
1a004c48:	4698      	mov	r8, r3
1a004c4a:	2e00      	cmp	r6, #0
1a004c4c:	d0a9      	beq.n	1a004ba2 <__udivmoddi4+0xa2>
1a004c4e:	e9c6 4800 	strd	r4, r8, [r6]
1a004c52:	e7a6      	b.n	1a004ba2 <__udivmoddi4+0xa2>
1a004c54:	deff      	udf	#255	; 0xff
1a004c56:	f1c7 0520 	rsb	r5, r7, #32
1a004c5a:	40bb      	lsls	r3, r7
1a004c5c:	fa22 fc05 	lsr.w	ip, r2, r5
1a004c60:	ea4c 0c03 	orr.w	ip, ip, r3
1a004c64:	fa01 f407 	lsl.w	r4, r1, r7
1a004c68:	fa20 f805 	lsr.w	r8, r0, r5
1a004c6c:	fa21 f305 	lsr.w	r3, r1, r5
1a004c70:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a004c74:	ea48 0404 	orr.w	r4, r8, r4
1a004c78:	fbb3 f9fe 	udiv	r9, r3, lr
1a004c7c:	0c21      	lsrs	r1, r4, #16
1a004c7e:	fb0e 3319 	mls	r3, lr, r9, r3
1a004c82:	fa1f f88c 	uxth.w	r8, ip
1a004c86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a004c8a:	fb09 fa08 	mul.w	sl, r9, r8
1a004c8e:	459a      	cmp	sl, r3
1a004c90:	fa02 f207 	lsl.w	r2, r2, r7
1a004c94:	fa00 f107 	lsl.w	r1, r0, r7
1a004c98:	d90b      	bls.n	1a004cb2 <__udivmoddi4+0x1b2>
1a004c9a:	eb1c 0303 	adds.w	r3, ip, r3
1a004c9e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004ca2:	f080 8088 	bcs.w	1a004db6 <__udivmoddi4+0x2b6>
1a004ca6:	459a      	cmp	sl, r3
1a004ca8:	f240 8085 	bls.w	1a004db6 <__udivmoddi4+0x2b6>
1a004cac:	f1a9 0902 	sub.w	r9, r9, #2
1a004cb0:	4463      	add	r3, ip
1a004cb2:	eba3 030a 	sub.w	r3, r3, sl
1a004cb6:	b2a4      	uxth	r4, r4
1a004cb8:	fbb3 f0fe 	udiv	r0, r3, lr
1a004cbc:	fb0e 3310 	mls	r3, lr, r0, r3
1a004cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004cc4:	fb00 f808 	mul.w	r8, r0, r8
1a004cc8:	45a0      	cmp	r8, r4
1a004cca:	d908      	bls.n	1a004cde <__udivmoddi4+0x1de>
1a004ccc:	eb1c 0404 	adds.w	r4, ip, r4
1a004cd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004cd4:	d26b      	bcs.n	1a004dae <__udivmoddi4+0x2ae>
1a004cd6:	45a0      	cmp	r8, r4
1a004cd8:	d969      	bls.n	1a004dae <__udivmoddi4+0x2ae>
1a004cda:	3802      	subs	r0, #2
1a004cdc:	4464      	add	r4, ip
1a004cde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004ce2:	eba4 0408 	sub.w	r4, r4, r8
1a004ce6:	fba0 8902 	umull	r8, r9, r0, r2
1a004cea:	454c      	cmp	r4, r9
1a004cec:	46c6      	mov	lr, r8
1a004cee:	464b      	mov	r3, r9
1a004cf0:	d354      	bcc.n	1a004d9c <__udivmoddi4+0x29c>
1a004cf2:	d051      	beq.n	1a004d98 <__udivmoddi4+0x298>
1a004cf4:	2e00      	cmp	r6, #0
1a004cf6:	d069      	beq.n	1a004dcc <__udivmoddi4+0x2cc>
1a004cf8:	ebb1 020e 	subs.w	r2, r1, lr
1a004cfc:	eb64 0403 	sbc.w	r4, r4, r3
1a004d00:	fa04 f505 	lsl.w	r5, r4, r5
1a004d04:	fa22 f307 	lsr.w	r3, r2, r7
1a004d08:	40fc      	lsrs	r4, r7
1a004d0a:	431d      	orrs	r5, r3
1a004d0c:	e9c6 5400 	strd	r5, r4, [r6]
1a004d10:	2700      	movs	r7, #0
1a004d12:	e746      	b.n	1a004ba2 <__udivmoddi4+0xa2>
1a004d14:	4637      	mov	r7, r6
1a004d16:	4630      	mov	r0, r6
1a004d18:	e743      	b.n	1a004ba2 <__udivmoddi4+0xa2>
1a004d1a:	4618      	mov	r0, r3
1a004d1c:	e737      	b.n	1a004b8e <__udivmoddi4+0x8e>
1a004d1e:	4607      	mov	r7, r0
1a004d20:	e71f      	b.n	1a004b62 <__udivmoddi4+0x62>
1a004d22:	f1c2 0320 	rsb	r3, r2, #32
1a004d26:	fa20 f703 	lsr.w	r7, r0, r3
1a004d2a:	4095      	lsls	r5, r2
1a004d2c:	fa01 f002 	lsl.w	r0, r1, r2
1a004d30:	fa21 f303 	lsr.w	r3, r1, r3
1a004d34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004d38:	4338      	orrs	r0, r7
1a004d3a:	0c01      	lsrs	r1, r0, #16
1a004d3c:	fbb3 f7fe 	udiv	r7, r3, lr
1a004d40:	fa1f f885 	uxth.w	r8, r5
1a004d44:	fb0e 3317 	mls	r3, lr, r7, r3
1a004d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004d4c:	fb07 f308 	mul.w	r3, r7, r8
1a004d50:	428b      	cmp	r3, r1
1a004d52:	fa04 f402 	lsl.w	r4, r4, r2
1a004d56:	d907      	bls.n	1a004d68 <__udivmoddi4+0x268>
1a004d58:	1869      	adds	r1, r5, r1
1a004d5a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004d5e:	d228      	bcs.n	1a004db2 <__udivmoddi4+0x2b2>
1a004d60:	428b      	cmp	r3, r1
1a004d62:	d926      	bls.n	1a004db2 <__udivmoddi4+0x2b2>
1a004d64:	3f02      	subs	r7, #2
1a004d66:	4429      	add	r1, r5
1a004d68:	1acb      	subs	r3, r1, r3
1a004d6a:	b281      	uxth	r1, r0
1a004d6c:	fbb3 f0fe 	udiv	r0, r3, lr
1a004d70:	fb0e 3310 	mls	r3, lr, r0, r3
1a004d74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004d78:	fb00 f308 	mul.w	r3, r0, r8
1a004d7c:	428b      	cmp	r3, r1
1a004d7e:	d907      	bls.n	1a004d90 <__udivmoddi4+0x290>
1a004d80:	1869      	adds	r1, r5, r1
1a004d82:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004d86:	d210      	bcs.n	1a004daa <__udivmoddi4+0x2aa>
1a004d88:	428b      	cmp	r3, r1
1a004d8a:	d90e      	bls.n	1a004daa <__udivmoddi4+0x2aa>
1a004d8c:	3802      	subs	r0, #2
1a004d8e:	4429      	add	r1, r5
1a004d90:	1ac9      	subs	r1, r1, r3
1a004d92:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004d96:	e714      	b.n	1a004bc2 <__udivmoddi4+0xc2>
1a004d98:	4541      	cmp	r1, r8
1a004d9a:	d2ab      	bcs.n	1a004cf4 <__udivmoddi4+0x1f4>
1a004d9c:	ebb8 0e02 	subs.w	lr, r8, r2
1a004da0:	eb69 020c 	sbc.w	r2, r9, ip
1a004da4:	3801      	subs	r0, #1
1a004da6:	4613      	mov	r3, r2
1a004da8:	e7a4      	b.n	1a004cf4 <__udivmoddi4+0x1f4>
1a004daa:	4660      	mov	r0, ip
1a004dac:	e7f0      	b.n	1a004d90 <__udivmoddi4+0x290>
1a004dae:	4618      	mov	r0, r3
1a004db0:	e795      	b.n	1a004cde <__udivmoddi4+0x1de>
1a004db2:	4667      	mov	r7, ip
1a004db4:	e7d8      	b.n	1a004d68 <__udivmoddi4+0x268>
1a004db6:	4681      	mov	r9, r0
1a004db8:	e77b      	b.n	1a004cb2 <__udivmoddi4+0x1b2>
1a004dba:	4638      	mov	r0, r7
1a004dbc:	e745      	b.n	1a004c4a <__udivmoddi4+0x14a>
1a004dbe:	f1ac 0c02 	sub.w	ip, ip, #2
1a004dc2:	442b      	add	r3, r5
1a004dc4:	e710      	b.n	1a004be8 <__udivmoddi4+0xe8>
1a004dc6:	3802      	subs	r0, #2
1a004dc8:	442c      	add	r4, r5
1a004dca:	e721      	b.n	1a004c10 <__udivmoddi4+0x110>
1a004dcc:	4637      	mov	r7, r6
1a004dce:	e6e8      	b.n	1a004ba2 <__udivmoddi4+0xa2>

1a004dd0 <__aeabi_idiv0>:
1a004dd0:	4770      	bx	lr
1a004dd2:	bf00      	nop

1a004dd4 <__sflush_r>:
1a004dd4:	898a      	ldrh	r2, [r1, #12]
1a004dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004dda:	4605      	mov	r5, r0
1a004ddc:	0710      	lsls	r0, r2, #28
1a004dde:	460c      	mov	r4, r1
1a004de0:	d458      	bmi.n	1a004e94 <__sflush_r+0xc0>
1a004de2:	684b      	ldr	r3, [r1, #4]
1a004de4:	2b00      	cmp	r3, #0
1a004de6:	dc05      	bgt.n	1a004df4 <__sflush_r+0x20>
1a004de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a004dea:	2b00      	cmp	r3, #0
1a004dec:	dc02      	bgt.n	1a004df4 <__sflush_r+0x20>
1a004dee:	2000      	movs	r0, #0
1a004df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004df6:	2e00      	cmp	r6, #0
1a004df8:	d0f9      	beq.n	1a004dee <__sflush_r+0x1a>
1a004dfa:	2300      	movs	r3, #0
1a004dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a004e00:	682f      	ldr	r7, [r5, #0]
1a004e02:	602b      	str	r3, [r5, #0]
1a004e04:	d032      	beq.n	1a004e6c <__sflush_r+0x98>
1a004e06:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a004e08:	89a3      	ldrh	r3, [r4, #12]
1a004e0a:	075a      	lsls	r2, r3, #29
1a004e0c:	d505      	bpl.n	1a004e1a <__sflush_r+0x46>
1a004e0e:	6863      	ldr	r3, [r4, #4]
1a004e10:	1ac0      	subs	r0, r0, r3
1a004e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a004e14:	b10b      	cbz	r3, 1a004e1a <__sflush_r+0x46>
1a004e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a004e18:	1ac0      	subs	r0, r0, r3
1a004e1a:	2300      	movs	r3, #0
1a004e1c:	4602      	mov	r2, r0
1a004e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004e20:	6a21      	ldr	r1, [r4, #32]
1a004e22:	4628      	mov	r0, r5
1a004e24:	47b0      	blx	r6
1a004e26:	1c43      	adds	r3, r0, #1
1a004e28:	89a3      	ldrh	r3, [r4, #12]
1a004e2a:	d106      	bne.n	1a004e3a <__sflush_r+0x66>
1a004e2c:	6829      	ldr	r1, [r5, #0]
1a004e2e:	291d      	cmp	r1, #29
1a004e30:	d849      	bhi.n	1a004ec6 <__sflush_r+0xf2>
1a004e32:	4a2a      	ldr	r2, [pc, #168]	; (1a004edc <__sflush_r+0x108>)
1a004e34:	40ca      	lsrs	r2, r1
1a004e36:	07d6      	lsls	r6, r2, #31
1a004e38:	d545      	bpl.n	1a004ec6 <__sflush_r+0xf2>
1a004e3a:	2200      	movs	r2, #0
1a004e3c:	6062      	str	r2, [r4, #4]
1a004e3e:	04d9      	lsls	r1, r3, #19
1a004e40:	6922      	ldr	r2, [r4, #16]
1a004e42:	6022      	str	r2, [r4, #0]
1a004e44:	d504      	bpl.n	1a004e50 <__sflush_r+0x7c>
1a004e46:	1c42      	adds	r2, r0, #1
1a004e48:	d101      	bne.n	1a004e4e <__sflush_r+0x7a>
1a004e4a:	682b      	ldr	r3, [r5, #0]
1a004e4c:	b903      	cbnz	r3, 1a004e50 <__sflush_r+0x7c>
1a004e4e:	6560      	str	r0, [r4, #84]	; 0x54
1a004e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004e52:	602f      	str	r7, [r5, #0]
1a004e54:	2900      	cmp	r1, #0
1a004e56:	d0ca      	beq.n	1a004dee <__sflush_r+0x1a>
1a004e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004e5c:	4299      	cmp	r1, r3
1a004e5e:	d002      	beq.n	1a004e66 <__sflush_r+0x92>
1a004e60:	4628      	mov	r0, r5
1a004e62:	f000 f9ab 	bl	1a0051bc <_free_r>
1a004e66:	2000      	movs	r0, #0
1a004e68:	6360      	str	r0, [r4, #52]	; 0x34
1a004e6a:	e7c1      	b.n	1a004df0 <__sflush_r+0x1c>
1a004e6c:	6a21      	ldr	r1, [r4, #32]
1a004e6e:	2301      	movs	r3, #1
1a004e70:	4628      	mov	r0, r5
1a004e72:	47b0      	blx	r6
1a004e74:	1c41      	adds	r1, r0, #1
1a004e76:	d1c7      	bne.n	1a004e08 <__sflush_r+0x34>
1a004e78:	682b      	ldr	r3, [r5, #0]
1a004e7a:	2b00      	cmp	r3, #0
1a004e7c:	d0c4      	beq.n	1a004e08 <__sflush_r+0x34>
1a004e7e:	2b1d      	cmp	r3, #29
1a004e80:	d001      	beq.n	1a004e86 <__sflush_r+0xb2>
1a004e82:	2b16      	cmp	r3, #22
1a004e84:	d101      	bne.n	1a004e8a <__sflush_r+0xb6>
1a004e86:	602f      	str	r7, [r5, #0]
1a004e88:	e7b1      	b.n	1a004dee <__sflush_r+0x1a>
1a004e8a:	89a3      	ldrh	r3, [r4, #12]
1a004e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004e90:	81a3      	strh	r3, [r4, #12]
1a004e92:	e7ad      	b.n	1a004df0 <__sflush_r+0x1c>
1a004e94:	690f      	ldr	r7, [r1, #16]
1a004e96:	2f00      	cmp	r7, #0
1a004e98:	d0a9      	beq.n	1a004dee <__sflush_r+0x1a>
1a004e9a:	0793      	lsls	r3, r2, #30
1a004e9c:	680e      	ldr	r6, [r1, #0]
1a004e9e:	bf08      	it	eq
1a004ea0:	694b      	ldreq	r3, [r1, #20]
1a004ea2:	600f      	str	r7, [r1, #0]
1a004ea4:	bf18      	it	ne
1a004ea6:	2300      	movne	r3, #0
1a004ea8:	eba6 0807 	sub.w	r8, r6, r7
1a004eac:	608b      	str	r3, [r1, #8]
1a004eae:	f1b8 0f00 	cmp.w	r8, #0
1a004eb2:	dd9c      	ble.n	1a004dee <__sflush_r+0x1a>
1a004eb4:	4643      	mov	r3, r8
1a004eb6:	463a      	mov	r2, r7
1a004eb8:	6a21      	ldr	r1, [r4, #32]
1a004eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004ebc:	4628      	mov	r0, r5
1a004ebe:	47b0      	blx	r6
1a004ec0:	2800      	cmp	r0, #0
1a004ec2:	dc06      	bgt.n	1a004ed2 <__sflush_r+0xfe>
1a004ec4:	89a3      	ldrh	r3, [r4, #12]
1a004ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004eca:	81a3      	strh	r3, [r4, #12]
1a004ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004ed0:	e78e      	b.n	1a004df0 <__sflush_r+0x1c>
1a004ed2:	4407      	add	r7, r0
1a004ed4:	eba8 0800 	sub.w	r8, r8, r0
1a004ed8:	e7e9      	b.n	1a004eae <__sflush_r+0xda>
1a004eda:	bf00      	nop
1a004edc:	20400001 	.word	0x20400001

1a004ee0 <_fflush_r>:
1a004ee0:	b538      	push	{r3, r4, r5, lr}
1a004ee2:	690b      	ldr	r3, [r1, #16]
1a004ee4:	4605      	mov	r5, r0
1a004ee6:	460c      	mov	r4, r1
1a004ee8:	b913      	cbnz	r3, 1a004ef0 <_fflush_r+0x10>
1a004eea:	2500      	movs	r5, #0
1a004eec:	4628      	mov	r0, r5
1a004eee:	bd38      	pop	{r3, r4, r5, pc}
1a004ef0:	b118      	cbz	r0, 1a004efa <_fflush_r+0x1a>
1a004ef2:	6983      	ldr	r3, [r0, #24]
1a004ef4:	b90b      	cbnz	r3, 1a004efa <_fflush_r+0x1a>
1a004ef6:	f000 f887 	bl	1a005008 <__sinit>
1a004efa:	4b14      	ldr	r3, [pc, #80]	; (1a004f4c <_fflush_r+0x6c>)
1a004efc:	429c      	cmp	r4, r3
1a004efe:	d11b      	bne.n	1a004f38 <_fflush_r+0x58>
1a004f00:	686c      	ldr	r4, [r5, #4]
1a004f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004f06:	2b00      	cmp	r3, #0
1a004f08:	d0ef      	beq.n	1a004eea <_fflush_r+0xa>
1a004f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a004f0c:	07d0      	lsls	r0, r2, #31
1a004f0e:	d404      	bmi.n	1a004f1a <_fflush_r+0x3a>
1a004f10:	0599      	lsls	r1, r3, #22
1a004f12:	d402      	bmi.n	1a004f1a <_fflush_r+0x3a>
1a004f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004f16:	f000 f938 	bl	1a00518a <__retarget_lock_acquire_recursive>
1a004f1a:	4628      	mov	r0, r5
1a004f1c:	4621      	mov	r1, r4
1a004f1e:	f7ff ff59 	bl	1a004dd4 <__sflush_r>
1a004f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004f24:	07da      	lsls	r2, r3, #31
1a004f26:	4605      	mov	r5, r0
1a004f28:	d4e0      	bmi.n	1a004eec <_fflush_r+0xc>
1a004f2a:	89a3      	ldrh	r3, [r4, #12]
1a004f2c:	059b      	lsls	r3, r3, #22
1a004f2e:	d4dd      	bmi.n	1a004eec <_fflush_r+0xc>
1a004f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004f32:	f000 f92b 	bl	1a00518c <__retarget_lock_release_recursive>
1a004f36:	e7d9      	b.n	1a004eec <_fflush_r+0xc>
1a004f38:	4b05      	ldr	r3, [pc, #20]	; (1a004f50 <_fflush_r+0x70>)
1a004f3a:	429c      	cmp	r4, r3
1a004f3c:	d101      	bne.n	1a004f42 <_fflush_r+0x62>
1a004f3e:	68ac      	ldr	r4, [r5, #8]
1a004f40:	e7df      	b.n	1a004f02 <_fflush_r+0x22>
1a004f42:	4b04      	ldr	r3, [pc, #16]	; (1a004f54 <_fflush_r+0x74>)
1a004f44:	429c      	cmp	r4, r3
1a004f46:	bf08      	it	eq
1a004f48:	68ec      	ldreq	r4, [r5, #12]
1a004f4a:	e7da      	b.n	1a004f02 <_fflush_r+0x22>
1a004f4c:	1a0063dc 	.word	0x1a0063dc
1a004f50:	1a0063fc 	.word	0x1a0063fc
1a004f54:	1a0063bc 	.word	0x1a0063bc

1a004f58 <std>:
1a004f58:	2300      	movs	r3, #0
1a004f5a:	b510      	push	{r4, lr}
1a004f5c:	4604      	mov	r4, r0
1a004f5e:	e9c0 3300 	strd	r3, r3, [r0]
1a004f62:	6083      	str	r3, [r0, #8]
1a004f64:	8181      	strh	r1, [r0, #12]
1a004f66:	6643      	str	r3, [r0, #100]	; 0x64
1a004f68:	81c2      	strh	r2, [r0, #14]
1a004f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004f6e:	6183      	str	r3, [r0, #24]
1a004f70:	4619      	mov	r1, r3
1a004f72:	2208      	movs	r2, #8
1a004f74:	305c      	adds	r0, #92	; 0x5c
1a004f76:	f000 f918 	bl	1a0051aa <memset>
1a004f7a:	4b05      	ldr	r3, [pc, #20]	; (1a004f90 <std+0x38>)
1a004f7c:	6263      	str	r3, [r4, #36]	; 0x24
1a004f7e:	4b05      	ldr	r3, [pc, #20]	; (1a004f94 <std+0x3c>)
1a004f80:	62a3      	str	r3, [r4, #40]	; 0x28
1a004f82:	4b05      	ldr	r3, [pc, #20]	; (1a004f98 <std+0x40>)
1a004f84:	62e3      	str	r3, [r4, #44]	; 0x2c
1a004f86:	4b05      	ldr	r3, [pc, #20]	; (1a004f9c <std+0x44>)
1a004f88:	6224      	str	r4, [r4, #32]
1a004f8a:	6323      	str	r3, [r4, #48]	; 0x30
1a004f8c:	bd10      	pop	{r4, pc}
1a004f8e:	bf00      	nop
1a004f90:	1a0059e1 	.word	0x1a0059e1
1a004f94:	1a005a03 	.word	0x1a005a03
1a004f98:	1a005a3b 	.word	0x1a005a3b
1a004f9c:	1a005a5f 	.word	0x1a005a5f

1a004fa0 <_cleanup_r>:
1a004fa0:	4901      	ldr	r1, [pc, #4]	; (1a004fa8 <_cleanup_r+0x8>)
1a004fa2:	f000 b8af 	b.w	1a005104 <_fwalk_reent>
1a004fa6:	bf00      	nop
1a004fa8:	1a004ee1 	.word	0x1a004ee1

1a004fac <__sfmoreglue>:
1a004fac:	b570      	push	{r4, r5, r6, lr}
1a004fae:	1e4a      	subs	r2, r1, #1
1a004fb0:	2568      	movs	r5, #104	; 0x68
1a004fb2:	4355      	muls	r5, r2
1a004fb4:	460e      	mov	r6, r1
1a004fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004fba:	f000 f94d 	bl	1a005258 <_malloc_r>
1a004fbe:	4604      	mov	r4, r0
1a004fc0:	b140      	cbz	r0, 1a004fd4 <__sfmoreglue+0x28>
1a004fc2:	2100      	movs	r1, #0
1a004fc4:	e9c0 1600 	strd	r1, r6, [r0]
1a004fc8:	300c      	adds	r0, #12
1a004fca:	60a0      	str	r0, [r4, #8]
1a004fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004fd0:	f000 f8eb 	bl	1a0051aa <memset>
1a004fd4:	4620      	mov	r0, r4
1a004fd6:	bd70      	pop	{r4, r5, r6, pc}

1a004fd8 <__sfp_lock_acquire>:
1a004fd8:	4801      	ldr	r0, [pc, #4]	; (1a004fe0 <__sfp_lock_acquire+0x8>)
1a004fda:	f000 b8d6 	b.w	1a00518a <__retarget_lock_acquire_recursive>
1a004fde:	bf00      	nop
1a004fe0:	10002c60 	.word	0x10002c60

1a004fe4 <__sfp_lock_release>:
1a004fe4:	4801      	ldr	r0, [pc, #4]	; (1a004fec <__sfp_lock_release+0x8>)
1a004fe6:	f000 b8d1 	b.w	1a00518c <__retarget_lock_release_recursive>
1a004fea:	bf00      	nop
1a004fec:	10002c60 	.word	0x10002c60

1a004ff0 <__sinit_lock_acquire>:
1a004ff0:	4801      	ldr	r0, [pc, #4]	; (1a004ff8 <__sinit_lock_acquire+0x8>)
1a004ff2:	f000 b8ca 	b.w	1a00518a <__retarget_lock_acquire_recursive>
1a004ff6:	bf00      	nop
1a004ff8:	10002c5b 	.word	0x10002c5b

1a004ffc <__sinit_lock_release>:
1a004ffc:	4801      	ldr	r0, [pc, #4]	; (1a005004 <__sinit_lock_release+0x8>)
1a004ffe:	f000 b8c5 	b.w	1a00518c <__retarget_lock_release_recursive>
1a005002:	bf00      	nop
1a005004:	10002c5b 	.word	0x10002c5b

1a005008 <__sinit>:
1a005008:	b510      	push	{r4, lr}
1a00500a:	4604      	mov	r4, r0
1a00500c:	f7ff fff0 	bl	1a004ff0 <__sinit_lock_acquire>
1a005010:	69a3      	ldr	r3, [r4, #24]
1a005012:	b11b      	cbz	r3, 1a00501c <__sinit+0x14>
1a005014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005018:	f7ff bff0 	b.w	1a004ffc <__sinit_lock_release>
1a00501c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a005020:	6523      	str	r3, [r4, #80]	; 0x50
1a005022:	4b13      	ldr	r3, [pc, #76]	; (1a005070 <__sinit+0x68>)
1a005024:	4a13      	ldr	r2, [pc, #76]	; (1a005074 <__sinit+0x6c>)
1a005026:	681b      	ldr	r3, [r3, #0]
1a005028:	62a2      	str	r2, [r4, #40]	; 0x28
1a00502a:	42a3      	cmp	r3, r4
1a00502c:	bf04      	itt	eq
1a00502e:	2301      	moveq	r3, #1
1a005030:	61a3      	streq	r3, [r4, #24]
1a005032:	4620      	mov	r0, r4
1a005034:	f000 f820 	bl	1a005078 <__sfp>
1a005038:	6060      	str	r0, [r4, #4]
1a00503a:	4620      	mov	r0, r4
1a00503c:	f000 f81c 	bl	1a005078 <__sfp>
1a005040:	60a0      	str	r0, [r4, #8]
1a005042:	4620      	mov	r0, r4
1a005044:	f000 f818 	bl	1a005078 <__sfp>
1a005048:	2200      	movs	r2, #0
1a00504a:	60e0      	str	r0, [r4, #12]
1a00504c:	2104      	movs	r1, #4
1a00504e:	6860      	ldr	r0, [r4, #4]
1a005050:	f7ff ff82 	bl	1a004f58 <std>
1a005054:	2201      	movs	r2, #1
1a005056:	2109      	movs	r1, #9
1a005058:	68a0      	ldr	r0, [r4, #8]
1a00505a:	f7ff ff7d 	bl	1a004f58 <std>
1a00505e:	2202      	movs	r2, #2
1a005060:	2112      	movs	r1, #18
1a005062:	68e0      	ldr	r0, [r4, #12]
1a005064:	f7ff ff78 	bl	1a004f58 <std>
1a005068:	2301      	movs	r3, #1
1a00506a:	61a3      	str	r3, [r4, #24]
1a00506c:	e7d2      	b.n	1a005014 <__sinit+0xc>
1a00506e:	bf00      	nop
1a005070:	1a00641c 	.word	0x1a00641c
1a005074:	1a004fa1 	.word	0x1a004fa1

1a005078 <__sfp>:
1a005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00507a:	4607      	mov	r7, r0
1a00507c:	f7ff ffac 	bl	1a004fd8 <__sfp_lock_acquire>
1a005080:	4b1e      	ldr	r3, [pc, #120]	; (1a0050fc <__sfp+0x84>)
1a005082:	681e      	ldr	r6, [r3, #0]
1a005084:	69b3      	ldr	r3, [r6, #24]
1a005086:	b913      	cbnz	r3, 1a00508e <__sfp+0x16>
1a005088:	4630      	mov	r0, r6
1a00508a:	f7ff ffbd 	bl	1a005008 <__sinit>
1a00508e:	3648      	adds	r6, #72	; 0x48
1a005090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a005094:	3b01      	subs	r3, #1
1a005096:	d503      	bpl.n	1a0050a0 <__sfp+0x28>
1a005098:	6833      	ldr	r3, [r6, #0]
1a00509a:	b30b      	cbz	r3, 1a0050e0 <__sfp+0x68>
1a00509c:	6836      	ldr	r6, [r6, #0]
1a00509e:	e7f7      	b.n	1a005090 <__sfp+0x18>
1a0050a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0050a4:	b9d5      	cbnz	r5, 1a0050dc <__sfp+0x64>
1a0050a6:	4b16      	ldr	r3, [pc, #88]	; (1a005100 <__sfp+0x88>)
1a0050a8:	60e3      	str	r3, [r4, #12]
1a0050aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0050ae:	6665      	str	r5, [r4, #100]	; 0x64
1a0050b0:	f000 f86a 	bl	1a005188 <__retarget_lock_init_recursive>
1a0050b4:	f7ff ff96 	bl	1a004fe4 <__sfp_lock_release>
1a0050b8:	6025      	str	r5, [r4, #0]
1a0050ba:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a0050be:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0050c2:	61a5      	str	r5, [r4, #24]
1a0050c4:	2208      	movs	r2, #8
1a0050c6:	4629      	mov	r1, r5
1a0050c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0050cc:	f000 f86d 	bl	1a0051aa <memset>
1a0050d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0050d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0050d8:	4620      	mov	r0, r4
1a0050da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0050dc:	3468      	adds	r4, #104	; 0x68
1a0050de:	e7d9      	b.n	1a005094 <__sfp+0x1c>
1a0050e0:	2104      	movs	r1, #4
1a0050e2:	4638      	mov	r0, r7
1a0050e4:	f7ff ff62 	bl	1a004fac <__sfmoreglue>
1a0050e8:	4604      	mov	r4, r0
1a0050ea:	6030      	str	r0, [r6, #0]
1a0050ec:	2800      	cmp	r0, #0
1a0050ee:	d1d5      	bne.n	1a00509c <__sfp+0x24>
1a0050f0:	f7ff ff78 	bl	1a004fe4 <__sfp_lock_release>
1a0050f4:	230c      	movs	r3, #12
1a0050f6:	603b      	str	r3, [r7, #0]
1a0050f8:	e7ee      	b.n	1a0050d8 <__sfp+0x60>
1a0050fa:	bf00      	nop
1a0050fc:	1a00641c 	.word	0x1a00641c
1a005100:	ffff0001 	.word	0xffff0001

1a005104 <_fwalk_reent>:
1a005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005108:	4680      	mov	r8, r0
1a00510a:	4689      	mov	r9, r1
1a00510c:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a005110:	2600      	movs	r6, #0
1a005112:	b914      	cbnz	r4, 1a00511a <_fwalk_reent+0x16>
1a005114:	4630      	mov	r0, r6
1a005116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00511a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00511e:	3f01      	subs	r7, #1
1a005120:	d501      	bpl.n	1a005126 <_fwalk_reent+0x22>
1a005122:	6824      	ldr	r4, [r4, #0]
1a005124:	e7f5      	b.n	1a005112 <_fwalk_reent+0xe>
1a005126:	89ab      	ldrh	r3, [r5, #12]
1a005128:	2b01      	cmp	r3, #1
1a00512a:	d907      	bls.n	1a00513c <_fwalk_reent+0x38>
1a00512c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a005130:	3301      	adds	r3, #1
1a005132:	d003      	beq.n	1a00513c <_fwalk_reent+0x38>
1a005134:	4629      	mov	r1, r5
1a005136:	4640      	mov	r0, r8
1a005138:	47c8      	blx	r9
1a00513a:	4306      	orrs	r6, r0
1a00513c:	3568      	adds	r5, #104	; 0x68
1a00513e:	e7ee      	b.n	1a00511e <_fwalk_reent+0x1a>

1a005140 <__libc_init_array>:
1a005140:	b570      	push	{r4, r5, r6, lr}
1a005142:	4d0d      	ldr	r5, [pc, #52]	; (1a005178 <__libc_init_array+0x38>)
1a005144:	4c0d      	ldr	r4, [pc, #52]	; (1a00517c <__libc_init_array+0x3c>)
1a005146:	1b64      	subs	r4, r4, r5
1a005148:	10a4      	asrs	r4, r4, #2
1a00514a:	2600      	movs	r6, #0
1a00514c:	42a6      	cmp	r6, r4
1a00514e:	d109      	bne.n	1a005164 <__libc_init_array+0x24>
1a005150:	4d0b      	ldr	r5, [pc, #44]	; (1a005180 <__libc_init_array+0x40>)
1a005152:	4c0c      	ldr	r4, [pc, #48]	; (1a005184 <__libc_init_array+0x44>)
1a005154:	f7fb fe37 	bl	1a000dc6 <_init>
1a005158:	1b64      	subs	r4, r4, r5
1a00515a:	10a4      	asrs	r4, r4, #2
1a00515c:	2600      	movs	r6, #0
1a00515e:	42a6      	cmp	r6, r4
1a005160:	d105      	bne.n	1a00516e <__libc_init_array+0x2e>
1a005162:	bd70      	pop	{r4, r5, r6, pc}
1a005164:	f855 3b04 	ldr.w	r3, [r5], #4
1a005168:	4798      	blx	r3
1a00516a:	3601      	adds	r6, #1
1a00516c:	e7ee      	b.n	1a00514c <__libc_init_array+0xc>
1a00516e:	f855 3b04 	ldr.w	r3, [r5], #4
1a005172:	4798      	blx	r3
1a005174:	3601      	adds	r6, #1
1a005176:	e7f2      	b.n	1a00515e <__libc_init_array+0x1e>
1a005178:	1a006454 	.word	0x1a006454
1a00517c:	1a006454 	.word	0x1a006454
1a005180:	1a006454 	.word	0x1a006454
1a005184:	1a006458 	.word	0x1a006458

1a005188 <__retarget_lock_init_recursive>:
1a005188:	4770      	bx	lr

1a00518a <__retarget_lock_acquire_recursive>:
1a00518a:	4770      	bx	lr

1a00518c <__retarget_lock_release_recursive>:
1a00518c:	4770      	bx	lr

1a00518e <memcpy>:
1a00518e:	440a      	add	r2, r1
1a005190:	4291      	cmp	r1, r2
1a005192:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005196:	d100      	bne.n	1a00519a <memcpy+0xc>
1a005198:	4770      	bx	lr
1a00519a:	b510      	push	{r4, lr}
1a00519c:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0051a0:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0051a4:	4291      	cmp	r1, r2
1a0051a6:	d1f9      	bne.n	1a00519c <memcpy+0xe>
1a0051a8:	bd10      	pop	{r4, pc}

1a0051aa <memset>:
1a0051aa:	4402      	add	r2, r0
1a0051ac:	4603      	mov	r3, r0
1a0051ae:	4293      	cmp	r3, r2
1a0051b0:	d100      	bne.n	1a0051b4 <memset+0xa>
1a0051b2:	4770      	bx	lr
1a0051b4:	f803 1b01 	strb.w	r1, [r3], #1
1a0051b8:	e7f9      	b.n	1a0051ae <memset+0x4>
1a0051ba:	Address 0x000000001a0051ba is out of bounds.


1a0051bc <_free_r>:
1a0051bc:	b538      	push	{r3, r4, r5, lr}
1a0051be:	4605      	mov	r5, r0
1a0051c0:	2900      	cmp	r1, #0
1a0051c2:	d045      	beq.n	1a005250 <_free_r+0x94>
1a0051c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0051c8:	1f0c      	subs	r4, r1, #4
1a0051ca:	2b00      	cmp	r3, #0
1a0051cc:	bfb8      	it	lt
1a0051ce:	18e4      	addlt	r4, r4, r3
1a0051d0:	f000 fdce 	bl	1a005d70 <__malloc_lock>
1a0051d4:	4a1f      	ldr	r2, [pc, #124]	; (1a005254 <_free_r+0x98>)
1a0051d6:	6813      	ldr	r3, [r2, #0]
1a0051d8:	4610      	mov	r0, r2
1a0051da:	b933      	cbnz	r3, 1a0051ea <_free_r+0x2e>
1a0051dc:	6063      	str	r3, [r4, #4]
1a0051de:	6014      	str	r4, [r2, #0]
1a0051e0:	4628      	mov	r0, r5
1a0051e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0051e6:	f000 bdc9 	b.w	1a005d7c <__malloc_unlock>
1a0051ea:	42a3      	cmp	r3, r4
1a0051ec:	d90c      	bls.n	1a005208 <_free_r+0x4c>
1a0051ee:	6821      	ldr	r1, [r4, #0]
1a0051f0:	1862      	adds	r2, r4, r1
1a0051f2:	4293      	cmp	r3, r2
1a0051f4:	bf04      	itt	eq
1a0051f6:	681a      	ldreq	r2, [r3, #0]
1a0051f8:	685b      	ldreq	r3, [r3, #4]
1a0051fa:	6063      	str	r3, [r4, #4]
1a0051fc:	bf04      	itt	eq
1a0051fe:	1852      	addeq	r2, r2, r1
1a005200:	6022      	streq	r2, [r4, #0]
1a005202:	6004      	str	r4, [r0, #0]
1a005204:	e7ec      	b.n	1a0051e0 <_free_r+0x24>
1a005206:	4613      	mov	r3, r2
1a005208:	685a      	ldr	r2, [r3, #4]
1a00520a:	b10a      	cbz	r2, 1a005210 <_free_r+0x54>
1a00520c:	42a2      	cmp	r2, r4
1a00520e:	d9fa      	bls.n	1a005206 <_free_r+0x4a>
1a005210:	6819      	ldr	r1, [r3, #0]
1a005212:	1858      	adds	r0, r3, r1
1a005214:	42a0      	cmp	r0, r4
1a005216:	d10b      	bne.n	1a005230 <_free_r+0x74>
1a005218:	6820      	ldr	r0, [r4, #0]
1a00521a:	4401      	add	r1, r0
1a00521c:	1858      	adds	r0, r3, r1
1a00521e:	4282      	cmp	r2, r0
1a005220:	6019      	str	r1, [r3, #0]
1a005222:	d1dd      	bne.n	1a0051e0 <_free_r+0x24>
1a005224:	6810      	ldr	r0, [r2, #0]
1a005226:	6852      	ldr	r2, [r2, #4]
1a005228:	605a      	str	r2, [r3, #4]
1a00522a:	4401      	add	r1, r0
1a00522c:	6019      	str	r1, [r3, #0]
1a00522e:	e7d7      	b.n	1a0051e0 <_free_r+0x24>
1a005230:	d902      	bls.n	1a005238 <_free_r+0x7c>
1a005232:	230c      	movs	r3, #12
1a005234:	602b      	str	r3, [r5, #0]
1a005236:	e7d3      	b.n	1a0051e0 <_free_r+0x24>
1a005238:	6820      	ldr	r0, [r4, #0]
1a00523a:	1821      	adds	r1, r4, r0
1a00523c:	428a      	cmp	r2, r1
1a00523e:	bf04      	itt	eq
1a005240:	6811      	ldreq	r1, [r2, #0]
1a005242:	6852      	ldreq	r2, [r2, #4]
1a005244:	6062      	str	r2, [r4, #4]
1a005246:	bf04      	itt	eq
1a005248:	1809      	addeq	r1, r1, r0
1a00524a:	6021      	streq	r1, [r4, #0]
1a00524c:	605c      	str	r4, [r3, #4]
1a00524e:	e7c7      	b.n	1a0051e0 <_free_r+0x24>
1a005250:	bd38      	pop	{r3, r4, r5, pc}
1a005252:	bf00      	nop
1a005254:	10002bc4 	.word	0x10002bc4

1a005258 <_malloc_r>:
1a005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00525a:	1ccd      	adds	r5, r1, #3
1a00525c:	f025 0503 	bic.w	r5, r5, #3
1a005260:	3508      	adds	r5, #8
1a005262:	2d0c      	cmp	r5, #12
1a005264:	bf38      	it	cc
1a005266:	250c      	movcc	r5, #12
1a005268:	2d00      	cmp	r5, #0
1a00526a:	4606      	mov	r6, r0
1a00526c:	db01      	blt.n	1a005272 <_malloc_r+0x1a>
1a00526e:	42a9      	cmp	r1, r5
1a005270:	d903      	bls.n	1a00527a <_malloc_r+0x22>
1a005272:	230c      	movs	r3, #12
1a005274:	6033      	str	r3, [r6, #0]
1a005276:	2000      	movs	r0, #0
1a005278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00527a:	f000 fd79 	bl	1a005d70 <__malloc_lock>
1a00527e:	4921      	ldr	r1, [pc, #132]	; (1a005304 <_malloc_r+0xac>)
1a005280:	680a      	ldr	r2, [r1, #0]
1a005282:	4614      	mov	r4, r2
1a005284:	b99c      	cbnz	r4, 1a0052ae <_malloc_r+0x56>
1a005286:	4f20      	ldr	r7, [pc, #128]	; (1a005308 <_malloc_r+0xb0>)
1a005288:	683b      	ldr	r3, [r7, #0]
1a00528a:	b923      	cbnz	r3, 1a005296 <_malloc_r+0x3e>
1a00528c:	4621      	mov	r1, r4
1a00528e:	4630      	mov	r0, r6
1a005290:	f7fb fdee 	bl	1a000e70 <_sbrk_r>
1a005294:	6038      	str	r0, [r7, #0]
1a005296:	4629      	mov	r1, r5
1a005298:	4630      	mov	r0, r6
1a00529a:	f7fb fde9 	bl	1a000e70 <_sbrk_r>
1a00529e:	1c43      	adds	r3, r0, #1
1a0052a0:	d123      	bne.n	1a0052ea <_malloc_r+0x92>
1a0052a2:	230c      	movs	r3, #12
1a0052a4:	6033      	str	r3, [r6, #0]
1a0052a6:	4630      	mov	r0, r6
1a0052a8:	f000 fd68 	bl	1a005d7c <__malloc_unlock>
1a0052ac:	e7e3      	b.n	1a005276 <_malloc_r+0x1e>
1a0052ae:	6823      	ldr	r3, [r4, #0]
1a0052b0:	1b5b      	subs	r3, r3, r5
1a0052b2:	d417      	bmi.n	1a0052e4 <_malloc_r+0x8c>
1a0052b4:	2b0b      	cmp	r3, #11
1a0052b6:	d903      	bls.n	1a0052c0 <_malloc_r+0x68>
1a0052b8:	6023      	str	r3, [r4, #0]
1a0052ba:	441c      	add	r4, r3
1a0052bc:	6025      	str	r5, [r4, #0]
1a0052be:	e004      	b.n	1a0052ca <_malloc_r+0x72>
1a0052c0:	6863      	ldr	r3, [r4, #4]
1a0052c2:	42a2      	cmp	r2, r4
1a0052c4:	bf0c      	ite	eq
1a0052c6:	600b      	streq	r3, [r1, #0]
1a0052c8:	6053      	strne	r3, [r2, #4]
1a0052ca:	4630      	mov	r0, r6
1a0052cc:	f000 fd56 	bl	1a005d7c <__malloc_unlock>
1a0052d0:	f104 000b 	add.w	r0, r4, #11
1a0052d4:	1d23      	adds	r3, r4, #4
1a0052d6:	f020 0007 	bic.w	r0, r0, #7
1a0052da:	1ac2      	subs	r2, r0, r3
1a0052dc:	d0cc      	beq.n	1a005278 <_malloc_r+0x20>
1a0052de:	1a1b      	subs	r3, r3, r0
1a0052e0:	50a3      	str	r3, [r4, r2]
1a0052e2:	e7c9      	b.n	1a005278 <_malloc_r+0x20>
1a0052e4:	4622      	mov	r2, r4
1a0052e6:	6864      	ldr	r4, [r4, #4]
1a0052e8:	e7cc      	b.n	1a005284 <_malloc_r+0x2c>
1a0052ea:	1cc4      	adds	r4, r0, #3
1a0052ec:	f024 0403 	bic.w	r4, r4, #3
1a0052f0:	42a0      	cmp	r0, r4
1a0052f2:	d0e3      	beq.n	1a0052bc <_malloc_r+0x64>
1a0052f4:	1a21      	subs	r1, r4, r0
1a0052f6:	4630      	mov	r0, r6
1a0052f8:	f7fb fdba 	bl	1a000e70 <_sbrk_r>
1a0052fc:	3001      	adds	r0, #1
1a0052fe:	d1dd      	bne.n	1a0052bc <_malloc_r+0x64>
1a005300:	e7cf      	b.n	1a0052a2 <_malloc_r+0x4a>
1a005302:	bf00      	nop
1a005304:	10002bc4 	.word	0x10002bc4
1a005308:	10002bc8 	.word	0x10002bc8

1a00530c <__sfputc_r>:
1a00530c:	6893      	ldr	r3, [r2, #8]
1a00530e:	3b01      	subs	r3, #1
1a005310:	2b00      	cmp	r3, #0
1a005312:	b410      	push	{r4}
1a005314:	6093      	str	r3, [r2, #8]
1a005316:	da08      	bge.n	1a00532a <__sfputc_r+0x1e>
1a005318:	6994      	ldr	r4, [r2, #24]
1a00531a:	42a3      	cmp	r3, r4
1a00531c:	db01      	blt.n	1a005322 <__sfputc_r+0x16>
1a00531e:	290a      	cmp	r1, #10
1a005320:	d103      	bne.n	1a00532a <__sfputc_r+0x1e>
1a005322:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005326:	f000 bbaf 	b.w	1a005a88 <__swbuf_r>
1a00532a:	6813      	ldr	r3, [r2, #0]
1a00532c:	1c58      	adds	r0, r3, #1
1a00532e:	6010      	str	r0, [r2, #0]
1a005330:	7019      	strb	r1, [r3, #0]
1a005332:	4608      	mov	r0, r1
1a005334:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005338:	4770      	bx	lr

1a00533a <__sfputs_r>:
1a00533a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00533c:	4606      	mov	r6, r0
1a00533e:	460f      	mov	r7, r1
1a005340:	4614      	mov	r4, r2
1a005342:	18d5      	adds	r5, r2, r3
1a005344:	42ac      	cmp	r4, r5
1a005346:	d101      	bne.n	1a00534c <__sfputs_r+0x12>
1a005348:	2000      	movs	r0, #0
1a00534a:	e007      	b.n	1a00535c <__sfputs_r+0x22>
1a00534c:	463a      	mov	r2, r7
1a00534e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a005352:	4630      	mov	r0, r6
1a005354:	f7ff ffda 	bl	1a00530c <__sfputc_r>
1a005358:	1c43      	adds	r3, r0, #1
1a00535a:	d1f3      	bne.n	1a005344 <__sfputs_r+0xa>
1a00535c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00535e:	Address 0x000000001a00535e is out of bounds.


1a005360 <_vfiprintf_r>:
1a005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005364:	460d      	mov	r5, r1
1a005366:	b09d      	sub	sp, #116	; 0x74
1a005368:	4614      	mov	r4, r2
1a00536a:	461e      	mov	r6, r3
1a00536c:	4607      	mov	r7, r0
1a00536e:	b118      	cbz	r0, 1a005378 <_vfiprintf_r+0x18>
1a005370:	6983      	ldr	r3, [r0, #24]
1a005372:	b90b      	cbnz	r3, 1a005378 <_vfiprintf_r+0x18>
1a005374:	f7ff fe48 	bl	1a005008 <__sinit>
1a005378:	4b85      	ldr	r3, [pc, #532]	; (1a005590 <_vfiprintf_r+0x230>)
1a00537a:	429d      	cmp	r5, r3
1a00537c:	d11b      	bne.n	1a0053b6 <_vfiprintf_r+0x56>
1a00537e:	687d      	ldr	r5, [r7, #4]
1a005380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005382:	07d9      	lsls	r1, r3, #31
1a005384:	d405      	bmi.n	1a005392 <_vfiprintf_r+0x32>
1a005386:	89ab      	ldrh	r3, [r5, #12]
1a005388:	059a      	lsls	r2, r3, #22
1a00538a:	d402      	bmi.n	1a005392 <_vfiprintf_r+0x32>
1a00538c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00538e:	f7ff fefc 	bl	1a00518a <__retarget_lock_acquire_recursive>
1a005392:	89ab      	ldrh	r3, [r5, #12]
1a005394:	071b      	lsls	r3, r3, #28
1a005396:	d501      	bpl.n	1a00539c <_vfiprintf_r+0x3c>
1a005398:	692b      	ldr	r3, [r5, #16]
1a00539a:	b9eb      	cbnz	r3, 1a0053d8 <_vfiprintf_r+0x78>
1a00539c:	4629      	mov	r1, r5
1a00539e:	4638      	mov	r0, r7
1a0053a0:	f000 fbc4 	bl	1a005b2c <__swsetup_r>
1a0053a4:	b1c0      	cbz	r0, 1a0053d8 <_vfiprintf_r+0x78>
1a0053a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a0053a8:	07d8      	lsls	r0, r3, #31
1a0053aa:	d50e      	bpl.n	1a0053ca <_vfiprintf_r+0x6a>
1a0053ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0053b0:	b01d      	add	sp, #116	; 0x74
1a0053b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0053b6:	4b77      	ldr	r3, [pc, #476]	; (1a005594 <_vfiprintf_r+0x234>)
1a0053b8:	429d      	cmp	r5, r3
1a0053ba:	d101      	bne.n	1a0053c0 <_vfiprintf_r+0x60>
1a0053bc:	68bd      	ldr	r5, [r7, #8]
1a0053be:	e7df      	b.n	1a005380 <_vfiprintf_r+0x20>
1a0053c0:	4b75      	ldr	r3, [pc, #468]	; (1a005598 <_vfiprintf_r+0x238>)
1a0053c2:	429d      	cmp	r5, r3
1a0053c4:	bf08      	it	eq
1a0053c6:	68fd      	ldreq	r5, [r7, #12]
1a0053c8:	e7da      	b.n	1a005380 <_vfiprintf_r+0x20>
1a0053ca:	89ab      	ldrh	r3, [r5, #12]
1a0053cc:	0599      	lsls	r1, r3, #22
1a0053ce:	d4ed      	bmi.n	1a0053ac <_vfiprintf_r+0x4c>
1a0053d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0053d2:	f7ff fedb 	bl	1a00518c <__retarget_lock_release_recursive>
1a0053d6:	e7e9      	b.n	1a0053ac <_vfiprintf_r+0x4c>
1a0053d8:	2300      	movs	r3, #0
1a0053da:	9309      	str	r3, [sp, #36]	; 0x24
1a0053dc:	2320      	movs	r3, #32
1a0053de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0053e2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a00559c <_vfiprintf_r+0x23c>
1a0053e6:	9603      	str	r6, [sp, #12]
1a0053e8:	2330      	movs	r3, #48	; 0x30
1a0053ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0053ee:	f04f 0a01 	mov.w	sl, #1
1a0053f2:	4623      	mov	r3, r4
1a0053f4:	461e      	mov	r6, r3
1a0053f6:	f813 2b01 	ldrb.w	r2, [r3], #1
1a0053fa:	b10a      	cbz	r2, 1a005400 <_vfiprintf_r+0xa0>
1a0053fc:	2a25      	cmp	r2, #37	; 0x25
1a0053fe:	d1f9      	bne.n	1a0053f4 <_vfiprintf_r+0x94>
1a005400:	ebb6 0b04 	subs.w	fp, r6, r4
1a005404:	d00b      	beq.n	1a00541e <_vfiprintf_r+0xbe>
1a005406:	465b      	mov	r3, fp
1a005408:	4622      	mov	r2, r4
1a00540a:	4629      	mov	r1, r5
1a00540c:	4638      	mov	r0, r7
1a00540e:	f7ff ff94 	bl	1a00533a <__sfputs_r>
1a005412:	3001      	adds	r0, #1
1a005414:	f000 80a3 	beq.w	1a00555e <_vfiprintf_r+0x1fe>
1a005418:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00541a:	445b      	add	r3, fp
1a00541c:	9309      	str	r3, [sp, #36]	; 0x24
1a00541e:	7833      	ldrb	r3, [r6, #0]
1a005420:	2b00      	cmp	r3, #0
1a005422:	f000 809c 	beq.w	1a00555e <_vfiprintf_r+0x1fe>
1a005426:	2300      	movs	r3, #0
1a005428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00542c:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a005430:	3601      	adds	r6, #1
1a005432:	9304      	str	r3, [sp, #16]
1a005434:	9307      	str	r3, [sp, #28]
1a005436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00543a:	931a      	str	r3, [sp, #104]	; 0x68
1a00543c:	4634      	mov	r4, r6
1a00543e:	2205      	movs	r2, #5
1a005440:	f814 1b01 	ldrb.w	r1, [r4], #1
1a005444:	4855      	ldr	r0, [pc, #340]	; (1a00559c <_vfiprintf_r+0x23c>)
1a005446:	f000 fc43 	bl	1a005cd0 <memchr>
1a00544a:	9b04      	ldr	r3, [sp, #16]
1a00544c:	b9c0      	cbnz	r0, 1a005480 <_vfiprintf_r+0x120>
1a00544e:	06da      	lsls	r2, r3, #27
1a005450:	bf44      	itt	mi
1a005452:	2220      	movmi	r2, #32
1a005454:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005458:	0718      	lsls	r0, r3, #28
1a00545a:	bf44      	itt	mi
1a00545c:	222b      	movmi	r2, #43	; 0x2b
1a00545e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005462:	7832      	ldrb	r2, [r6, #0]
1a005464:	2a2a      	cmp	r2, #42	; 0x2a
1a005466:	d013      	beq.n	1a005490 <_vfiprintf_r+0x130>
1a005468:	9a07      	ldr	r2, [sp, #28]
1a00546a:	4634      	mov	r4, r6
1a00546c:	2000      	movs	r0, #0
1a00546e:	260a      	movs	r6, #10
1a005470:	4621      	mov	r1, r4
1a005472:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005476:	3b30      	subs	r3, #48	; 0x30
1a005478:	2b09      	cmp	r3, #9
1a00547a:	d94b      	bls.n	1a005514 <_vfiprintf_r+0x1b4>
1a00547c:	b970      	cbnz	r0, 1a00549c <_vfiprintf_r+0x13c>
1a00547e:	e014      	b.n	1a0054aa <_vfiprintf_r+0x14a>
1a005480:	eba0 0009 	sub.w	r0, r0, r9
1a005484:	fa0a f000 	lsl.w	r0, sl, r0
1a005488:	4318      	orrs	r0, r3
1a00548a:	9004      	str	r0, [sp, #16]
1a00548c:	4626      	mov	r6, r4
1a00548e:	e7d5      	b.n	1a00543c <_vfiprintf_r+0xdc>
1a005490:	9a03      	ldr	r2, [sp, #12]
1a005492:	1d11      	adds	r1, r2, #4
1a005494:	6812      	ldr	r2, [r2, #0]
1a005496:	9103      	str	r1, [sp, #12]
1a005498:	2a00      	cmp	r2, #0
1a00549a:	db01      	blt.n	1a0054a0 <_vfiprintf_r+0x140>
1a00549c:	9207      	str	r2, [sp, #28]
1a00549e:	e004      	b.n	1a0054aa <_vfiprintf_r+0x14a>
1a0054a0:	4252      	negs	r2, r2
1a0054a2:	f043 0302 	orr.w	r3, r3, #2
1a0054a6:	9207      	str	r2, [sp, #28]
1a0054a8:	9304      	str	r3, [sp, #16]
1a0054aa:	7823      	ldrb	r3, [r4, #0]
1a0054ac:	2b2e      	cmp	r3, #46	; 0x2e
1a0054ae:	d10c      	bne.n	1a0054ca <_vfiprintf_r+0x16a>
1a0054b0:	7863      	ldrb	r3, [r4, #1]
1a0054b2:	2b2a      	cmp	r3, #42	; 0x2a
1a0054b4:	d133      	bne.n	1a00551e <_vfiprintf_r+0x1be>
1a0054b6:	9b03      	ldr	r3, [sp, #12]
1a0054b8:	1d1a      	adds	r2, r3, #4
1a0054ba:	681b      	ldr	r3, [r3, #0]
1a0054bc:	9203      	str	r2, [sp, #12]
1a0054be:	2b00      	cmp	r3, #0
1a0054c0:	bfb8      	it	lt
1a0054c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a0054c6:	3402      	adds	r4, #2
1a0054c8:	9305      	str	r3, [sp, #20]
1a0054ca:	4e35      	ldr	r6, [pc, #212]	; (1a0055a0 <_vfiprintf_r+0x240>)
1a0054cc:	7821      	ldrb	r1, [r4, #0]
1a0054ce:	2203      	movs	r2, #3
1a0054d0:	4630      	mov	r0, r6
1a0054d2:	f000 fbfd 	bl	1a005cd0 <memchr>
1a0054d6:	b138      	cbz	r0, 1a0054e8 <_vfiprintf_r+0x188>
1a0054d8:	2340      	movs	r3, #64	; 0x40
1a0054da:	1b80      	subs	r0, r0, r6
1a0054dc:	fa03 f000 	lsl.w	r0, r3, r0
1a0054e0:	9b04      	ldr	r3, [sp, #16]
1a0054e2:	4303      	orrs	r3, r0
1a0054e4:	3401      	adds	r4, #1
1a0054e6:	9304      	str	r3, [sp, #16]
1a0054e8:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0054ec:	482d      	ldr	r0, [pc, #180]	; (1a0055a4 <_vfiprintf_r+0x244>)
1a0054ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0054f2:	2206      	movs	r2, #6
1a0054f4:	f000 fbec 	bl	1a005cd0 <memchr>
1a0054f8:	2800      	cmp	r0, #0
1a0054fa:	d03f      	beq.n	1a00557c <_vfiprintf_r+0x21c>
1a0054fc:	4b2a      	ldr	r3, [pc, #168]	; (1a0055a8 <_vfiprintf_r+0x248>)
1a0054fe:	bb13      	cbnz	r3, 1a005546 <_vfiprintf_r+0x1e6>
1a005500:	9b03      	ldr	r3, [sp, #12]
1a005502:	3307      	adds	r3, #7
1a005504:	f023 0307 	bic.w	r3, r3, #7
1a005508:	3308      	adds	r3, #8
1a00550a:	9303      	str	r3, [sp, #12]
1a00550c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00550e:	4443      	add	r3, r8
1a005510:	9309      	str	r3, [sp, #36]	; 0x24
1a005512:	e76e      	b.n	1a0053f2 <_vfiprintf_r+0x92>
1a005514:	fb06 3202 	mla	r2, r6, r2, r3
1a005518:	2001      	movs	r0, #1
1a00551a:	460c      	mov	r4, r1
1a00551c:	e7a8      	b.n	1a005470 <_vfiprintf_r+0x110>
1a00551e:	2300      	movs	r3, #0
1a005520:	3401      	adds	r4, #1
1a005522:	9305      	str	r3, [sp, #20]
1a005524:	4619      	mov	r1, r3
1a005526:	260a      	movs	r6, #10
1a005528:	4620      	mov	r0, r4
1a00552a:	f810 2b01 	ldrb.w	r2, [r0], #1
1a00552e:	3a30      	subs	r2, #48	; 0x30
1a005530:	2a09      	cmp	r2, #9
1a005532:	d903      	bls.n	1a00553c <_vfiprintf_r+0x1dc>
1a005534:	2b00      	cmp	r3, #0
1a005536:	d0c8      	beq.n	1a0054ca <_vfiprintf_r+0x16a>
1a005538:	9105      	str	r1, [sp, #20]
1a00553a:	e7c6      	b.n	1a0054ca <_vfiprintf_r+0x16a>
1a00553c:	fb06 2101 	mla	r1, r6, r1, r2
1a005540:	2301      	movs	r3, #1
1a005542:	4604      	mov	r4, r0
1a005544:	e7f0      	b.n	1a005528 <_vfiprintf_r+0x1c8>
1a005546:	ab03      	add	r3, sp, #12
1a005548:	9300      	str	r3, [sp, #0]
1a00554a:	462a      	mov	r2, r5
1a00554c:	4b17      	ldr	r3, [pc, #92]	; (1a0055ac <_vfiprintf_r+0x24c>)
1a00554e:	a904      	add	r1, sp, #16
1a005550:	4638      	mov	r0, r7
1a005552:	f3af 8000 	nop.w
1a005556:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00555a:	4680      	mov	r8, r0
1a00555c:	d1d6      	bne.n	1a00550c <_vfiprintf_r+0x1ac>
1a00555e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005560:	07d9      	lsls	r1, r3, #31
1a005562:	d405      	bmi.n	1a005570 <_vfiprintf_r+0x210>
1a005564:	89ab      	ldrh	r3, [r5, #12]
1a005566:	059a      	lsls	r2, r3, #22
1a005568:	d402      	bmi.n	1a005570 <_vfiprintf_r+0x210>
1a00556a:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00556c:	f7ff fe0e 	bl	1a00518c <__retarget_lock_release_recursive>
1a005570:	89ab      	ldrh	r3, [r5, #12]
1a005572:	065b      	lsls	r3, r3, #25
1a005574:	f53f af1a 	bmi.w	1a0053ac <_vfiprintf_r+0x4c>
1a005578:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00557a:	e719      	b.n	1a0053b0 <_vfiprintf_r+0x50>
1a00557c:	ab03      	add	r3, sp, #12
1a00557e:	9300      	str	r3, [sp, #0]
1a005580:	462a      	mov	r2, r5
1a005582:	4b0a      	ldr	r3, [pc, #40]	; (1a0055ac <_vfiprintf_r+0x24c>)
1a005584:	a904      	add	r1, sp, #16
1a005586:	4638      	mov	r0, r7
1a005588:	f000 f888 	bl	1a00569c <_printf_i>
1a00558c:	e7e3      	b.n	1a005556 <_vfiprintf_r+0x1f6>
1a00558e:	bf00      	nop
1a005590:	1a0063dc 	.word	0x1a0063dc
1a005594:	1a0063fc 	.word	0x1a0063fc
1a005598:	1a0063bc 	.word	0x1a0063bc
1a00559c:	1a006420 	.word	0x1a006420
1a0055a0:	1a006426 	.word	0x1a006426
1a0055a4:	1a00642a 	.word	0x1a00642a
1a0055a8:	00000000 	.word	0x00000000
1a0055ac:	1a00533b 	.word	0x1a00533b

1a0055b0 <_printf_common>:
1a0055b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0055b4:	4691      	mov	r9, r2
1a0055b6:	461f      	mov	r7, r3
1a0055b8:	688a      	ldr	r2, [r1, #8]
1a0055ba:	690b      	ldr	r3, [r1, #16]
1a0055bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0055c0:	4293      	cmp	r3, r2
1a0055c2:	bfb8      	it	lt
1a0055c4:	4613      	movlt	r3, r2
1a0055c6:	f8c9 3000 	str.w	r3, [r9]
1a0055ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0055ce:	4606      	mov	r6, r0
1a0055d0:	460c      	mov	r4, r1
1a0055d2:	b112      	cbz	r2, 1a0055da <_printf_common+0x2a>
1a0055d4:	3301      	adds	r3, #1
1a0055d6:	f8c9 3000 	str.w	r3, [r9]
1a0055da:	6823      	ldr	r3, [r4, #0]
1a0055dc:	0699      	lsls	r1, r3, #26
1a0055de:	bf42      	ittt	mi
1a0055e0:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0055e4:	3302      	addmi	r3, #2
1a0055e6:	f8c9 3000 	strmi.w	r3, [r9]
1a0055ea:	6825      	ldr	r5, [r4, #0]
1a0055ec:	f015 0506 	ands.w	r5, r5, #6
1a0055f0:	d107      	bne.n	1a005602 <_printf_common+0x52>
1a0055f2:	f104 0a19 	add.w	sl, r4, #25
1a0055f6:	68e3      	ldr	r3, [r4, #12]
1a0055f8:	f8d9 2000 	ldr.w	r2, [r9]
1a0055fc:	1a9b      	subs	r3, r3, r2
1a0055fe:	42ab      	cmp	r3, r5
1a005600:	dc28      	bgt.n	1a005654 <_printf_common+0xa4>
1a005602:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a005606:	6822      	ldr	r2, [r4, #0]
1a005608:	3300      	adds	r3, #0
1a00560a:	bf18      	it	ne
1a00560c:	2301      	movne	r3, #1
1a00560e:	0692      	lsls	r2, r2, #26
1a005610:	d42d      	bmi.n	1a00566e <_printf_common+0xbe>
1a005612:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a005616:	4639      	mov	r1, r7
1a005618:	4630      	mov	r0, r6
1a00561a:	47c0      	blx	r8
1a00561c:	3001      	adds	r0, #1
1a00561e:	d020      	beq.n	1a005662 <_printf_common+0xb2>
1a005620:	6823      	ldr	r3, [r4, #0]
1a005622:	68e5      	ldr	r5, [r4, #12]
1a005624:	f8d9 2000 	ldr.w	r2, [r9]
1a005628:	f003 0306 	and.w	r3, r3, #6
1a00562c:	2b04      	cmp	r3, #4
1a00562e:	bf08      	it	eq
1a005630:	1aad      	subeq	r5, r5, r2
1a005632:	68a3      	ldr	r3, [r4, #8]
1a005634:	6922      	ldr	r2, [r4, #16]
1a005636:	bf0c      	ite	eq
1a005638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a00563c:	2500      	movne	r5, #0
1a00563e:	4293      	cmp	r3, r2
1a005640:	bfc4      	itt	gt
1a005642:	1a9b      	subgt	r3, r3, r2
1a005644:	18ed      	addgt	r5, r5, r3
1a005646:	f04f 0900 	mov.w	r9, #0
1a00564a:	341a      	adds	r4, #26
1a00564c:	454d      	cmp	r5, r9
1a00564e:	d11a      	bne.n	1a005686 <_printf_common+0xd6>
1a005650:	2000      	movs	r0, #0
1a005652:	e008      	b.n	1a005666 <_printf_common+0xb6>
1a005654:	2301      	movs	r3, #1
1a005656:	4652      	mov	r2, sl
1a005658:	4639      	mov	r1, r7
1a00565a:	4630      	mov	r0, r6
1a00565c:	47c0      	blx	r8
1a00565e:	3001      	adds	r0, #1
1a005660:	d103      	bne.n	1a00566a <_printf_common+0xba>
1a005662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00566a:	3501      	adds	r5, #1
1a00566c:	e7c3      	b.n	1a0055f6 <_printf_common+0x46>
1a00566e:	18e1      	adds	r1, r4, r3
1a005670:	1c5a      	adds	r2, r3, #1
1a005672:	2030      	movs	r0, #48	; 0x30
1a005674:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a005678:	4422      	add	r2, r4
1a00567a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00567e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a005682:	3302      	adds	r3, #2
1a005684:	e7c5      	b.n	1a005612 <_printf_common+0x62>
1a005686:	2301      	movs	r3, #1
1a005688:	4622      	mov	r2, r4
1a00568a:	4639      	mov	r1, r7
1a00568c:	4630      	mov	r0, r6
1a00568e:	47c0      	blx	r8
1a005690:	3001      	adds	r0, #1
1a005692:	d0e6      	beq.n	1a005662 <_printf_common+0xb2>
1a005694:	f109 0901 	add.w	r9, r9, #1
1a005698:	e7d8      	b.n	1a00564c <_printf_common+0x9c>
1a00569a:	Address 0x000000001a00569a is out of bounds.


1a00569c <_printf_i>:
1a00569c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0056a0:	4606      	mov	r6, r0
1a0056a2:	460c      	mov	r4, r1
1a0056a4:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a0056a8:	7e09      	ldrb	r1, [r1, #24]
1a0056aa:	b085      	sub	sp, #20
1a0056ac:	296e      	cmp	r1, #110	; 0x6e
1a0056ae:	4698      	mov	r8, r3
1a0056b0:	4617      	mov	r7, r2
1a0056b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0056b4:	f000 80ba 	beq.w	1a00582c <_printf_i+0x190>
1a0056b8:	d824      	bhi.n	1a005704 <_printf_i+0x68>
1a0056ba:	2963      	cmp	r1, #99	; 0x63
1a0056bc:	d039      	beq.n	1a005732 <_printf_i+0x96>
1a0056be:	d80a      	bhi.n	1a0056d6 <_printf_i+0x3a>
1a0056c0:	2900      	cmp	r1, #0
1a0056c2:	f000 80c3 	beq.w	1a00584c <_printf_i+0x1b0>
1a0056c6:	2958      	cmp	r1, #88	; 0x58
1a0056c8:	f000 8091 	beq.w	1a0057ee <_printf_i+0x152>
1a0056cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0056d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0056d4:	e035      	b.n	1a005742 <_printf_i+0xa6>
1a0056d6:	2964      	cmp	r1, #100	; 0x64
1a0056d8:	d001      	beq.n	1a0056de <_printf_i+0x42>
1a0056da:	2969      	cmp	r1, #105	; 0x69
1a0056dc:	d1f6      	bne.n	1a0056cc <_printf_i+0x30>
1a0056de:	6825      	ldr	r5, [r4, #0]
1a0056e0:	681a      	ldr	r2, [r3, #0]
1a0056e2:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0056e6:	f102 0104 	add.w	r1, r2, #4
1a0056ea:	d02c      	beq.n	1a005746 <_printf_i+0xaa>
1a0056ec:	6812      	ldr	r2, [r2, #0]
1a0056ee:	6019      	str	r1, [r3, #0]
1a0056f0:	2a00      	cmp	r2, #0
1a0056f2:	da03      	bge.n	1a0056fc <_printf_i+0x60>
1a0056f4:	232d      	movs	r3, #45	; 0x2d
1a0056f6:	4252      	negs	r2, r2
1a0056f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0056fc:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a0058bc <_printf_i+0x220>
1a005700:	230a      	movs	r3, #10
1a005702:	e03f      	b.n	1a005784 <_printf_i+0xe8>
1a005704:	2973      	cmp	r1, #115	; 0x73
1a005706:	f000 80a5 	beq.w	1a005854 <_printf_i+0x1b8>
1a00570a:	d808      	bhi.n	1a00571e <_printf_i+0x82>
1a00570c:	296f      	cmp	r1, #111	; 0x6f
1a00570e:	d021      	beq.n	1a005754 <_printf_i+0xb8>
1a005710:	2970      	cmp	r1, #112	; 0x70
1a005712:	d1db      	bne.n	1a0056cc <_printf_i+0x30>
1a005714:	6822      	ldr	r2, [r4, #0]
1a005716:	f042 0220 	orr.w	r2, r2, #32
1a00571a:	6022      	str	r2, [r4, #0]
1a00571c:	e003      	b.n	1a005726 <_printf_i+0x8a>
1a00571e:	2975      	cmp	r1, #117	; 0x75
1a005720:	d018      	beq.n	1a005754 <_printf_i+0xb8>
1a005722:	2978      	cmp	r1, #120	; 0x78
1a005724:	d1d2      	bne.n	1a0056cc <_printf_i+0x30>
1a005726:	2278      	movs	r2, #120	; 0x78
1a005728:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a00572c:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0058c0 <_printf_i+0x224>
1a005730:	e061      	b.n	1a0057f6 <_printf_i+0x15a>
1a005732:	681a      	ldr	r2, [r3, #0]
1a005734:	1d11      	adds	r1, r2, #4
1a005736:	6019      	str	r1, [r3, #0]
1a005738:	6813      	ldr	r3, [r2, #0]
1a00573a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00573e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005742:	2301      	movs	r3, #1
1a005744:	e093      	b.n	1a00586e <_printf_i+0x1d2>
1a005746:	6812      	ldr	r2, [r2, #0]
1a005748:	6019      	str	r1, [r3, #0]
1a00574a:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00574e:	bf18      	it	ne
1a005750:	b212      	sxthne	r2, r2
1a005752:	e7cd      	b.n	1a0056f0 <_printf_i+0x54>
1a005754:	f8d4 c000 	ldr.w	ip, [r4]
1a005758:	681a      	ldr	r2, [r3, #0]
1a00575a:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00575e:	f102 0504 	add.w	r5, r2, #4
1a005762:	601d      	str	r5, [r3, #0]
1a005764:	d001      	beq.n	1a00576a <_printf_i+0xce>
1a005766:	6812      	ldr	r2, [r2, #0]
1a005768:	e003      	b.n	1a005772 <_printf_i+0xd6>
1a00576a:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00576e:	d0fa      	beq.n	1a005766 <_printf_i+0xca>
1a005770:	8812      	ldrh	r2, [r2, #0]
1a005772:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a0058bc <_printf_i+0x220>
1a005776:	296f      	cmp	r1, #111	; 0x6f
1a005778:	bf0c      	ite	eq
1a00577a:	2308      	moveq	r3, #8
1a00577c:	230a      	movne	r3, #10
1a00577e:	2100      	movs	r1, #0
1a005780:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a005784:	6865      	ldr	r5, [r4, #4]
1a005786:	60a5      	str	r5, [r4, #8]
1a005788:	2d00      	cmp	r5, #0
1a00578a:	bfa2      	ittt	ge
1a00578c:	6821      	ldrge	r1, [r4, #0]
1a00578e:	f021 0104 	bicge.w	r1, r1, #4
1a005792:	6021      	strge	r1, [r4, #0]
1a005794:	b90a      	cbnz	r2, 1a00579a <_printf_i+0xfe>
1a005796:	2d00      	cmp	r5, #0
1a005798:	d046      	beq.n	1a005828 <_printf_i+0x18c>
1a00579a:	4605      	mov	r5, r0
1a00579c:	fbb2 f1f3 	udiv	r1, r2, r3
1a0057a0:	fb03 2e11 	mls	lr, r3, r1, r2
1a0057a4:	4293      	cmp	r3, r2
1a0057a6:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a0057aa:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a0057ae:	d939      	bls.n	1a005824 <_printf_i+0x188>
1a0057b0:	2b08      	cmp	r3, #8
1a0057b2:	d10b      	bne.n	1a0057cc <_printf_i+0x130>
1a0057b4:	6823      	ldr	r3, [r4, #0]
1a0057b6:	07da      	lsls	r2, r3, #31
1a0057b8:	d508      	bpl.n	1a0057cc <_printf_i+0x130>
1a0057ba:	6923      	ldr	r3, [r4, #16]
1a0057bc:	6862      	ldr	r2, [r4, #4]
1a0057be:	429a      	cmp	r2, r3
1a0057c0:	bfde      	ittt	le
1a0057c2:	2330      	movle	r3, #48	; 0x30
1a0057c4:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0057c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0057cc:	1b40      	subs	r0, r0, r5
1a0057ce:	6120      	str	r0, [r4, #16]
1a0057d0:	f8cd 8000 	str.w	r8, [sp]
1a0057d4:	463b      	mov	r3, r7
1a0057d6:	aa03      	add	r2, sp, #12
1a0057d8:	4621      	mov	r1, r4
1a0057da:	4630      	mov	r0, r6
1a0057dc:	f7ff fee8 	bl	1a0055b0 <_printf_common>
1a0057e0:	3001      	adds	r0, #1
1a0057e2:	d149      	bne.n	1a005878 <_printf_i+0x1dc>
1a0057e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0057e8:	b005      	add	sp, #20
1a0057ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0057ee:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a0058bc <_printf_i+0x220>
1a0057f2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0057f6:	681d      	ldr	r5, [r3, #0]
1a0057f8:	6821      	ldr	r1, [r4, #0]
1a0057fa:	f855 2b04 	ldr.w	r2, [r5], #4
1a0057fe:	601d      	str	r5, [r3, #0]
1a005800:	060d      	lsls	r5, r1, #24
1a005802:	d50b      	bpl.n	1a00581c <_printf_i+0x180>
1a005804:	07cd      	lsls	r5, r1, #31
1a005806:	bf44      	itt	mi
1a005808:	f041 0120 	orrmi.w	r1, r1, #32
1a00580c:	6021      	strmi	r1, [r4, #0]
1a00580e:	b91a      	cbnz	r2, 1a005818 <_printf_i+0x17c>
1a005810:	6823      	ldr	r3, [r4, #0]
1a005812:	f023 0320 	bic.w	r3, r3, #32
1a005816:	6023      	str	r3, [r4, #0]
1a005818:	2310      	movs	r3, #16
1a00581a:	e7b0      	b.n	1a00577e <_printf_i+0xe2>
1a00581c:	064b      	lsls	r3, r1, #25
1a00581e:	bf48      	it	mi
1a005820:	b292      	uxthmi	r2, r2
1a005822:	e7ef      	b.n	1a005804 <_printf_i+0x168>
1a005824:	460a      	mov	r2, r1
1a005826:	e7b9      	b.n	1a00579c <_printf_i+0x100>
1a005828:	4605      	mov	r5, r0
1a00582a:	e7c1      	b.n	1a0057b0 <_printf_i+0x114>
1a00582c:	681a      	ldr	r2, [r3, #0]
1a00582e:	f8d4 c000 	ldr.w	ip, [r4]
1a005832:	6961      	ldr	r1, [r4, #20]
1a005834:	1d15      	adds	r5, r2, #4
1a005836:	601d      	str	r5, [r3, #0]
1a005838:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00583c:	6813      	ldr	r3, [r2, #0]
1a00583e:	d001      	beq.n	1a005844 <_printf_i+0x1a8>
1a005840:	6019      	str	r1, [r3, #0]
1a005842:	e003      	b.n	1a00584c <_printf_i+0x1b0>
1a005844:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a005848:	d0fa      	beq.n	1a005840 <_printf_i+0x1a4>
1a00584a:	8019      	strh	r1, [r3, #0]
1a00584c:	2300      	movs	r3, #0
1a00584e:	6123      	str	r3, [r4, #16]
1a005850:	4605      	mov	r5, r0
1a005852:	e7bd      	b.n	1a0057d0 <_printf_i+0x134>
1a005854:	681a      	ldr	r2, [r3, #0]
1a005856:	1d11      	adds	r1, r2, #4
1a005858:	6019      	str	r1, [r3, #0]
1a00585a:	6815      	ldr	r5, [r2, #0]
1a00585c:	6862      	ldr	r2, [r4, #4]
1a00585e:	2100      	movs	r1, #0
1a005860:	4628      	mov	r0, r5
1a005862:	f000 fa35 	bl	1a005cd0 <memchr>
1a005866:	b108      	cbz	r0, 1a00586c <_printf_i+0x1d0>
1a005868:	1b40      	subs	r0, r0, r5
1a00586a:	6060      	str	r0, [r4, #4]
1a00586c:	6863      	ldr	r3, [r4, #4]
1a00586e:	6123      	str	r3, [r4, #16]
1a005870:	2300      	movs	r3, #0
1a005872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a005876:	e7ab      	b.n	1a0057d0 <_printf_i+0x134>
1a005878:	6923      	ldr	r3, [r4, #16]
1a00587a:	462a      	mov	r2, r5
1a00587c:	4639      	mov	r1, r7
1a00587e:	4630      	mov	r0, r6
1a005880:	47c0      	blx	r8
1a005882:	3001      	adds	r0, #1
1a005884:	d0ae      	beq.n	1a0057e4 <_printf_i+0x148>
1a005886:	6823      	ldr	r3, [r4, #0]
1a005888:	079b      	lsls	r3, r3, #30
1a00588a:	d413      	bmi.n	1a0058b4 <_printf_i+0x218>
1a00588c:	68e0      	ldr	r0, [r4, #12]
1a00588e:	9b03      	ldr	r3, [sp, #12]
1a005890:	4298      	cmp	r0, r3
1a005892:	bfb8      	it	lt
1a005894:	4618      	movlt	r0, r3
1a005896:	e7a7      	b.n	1a0057e8 <_printf_i+0x14c>
1a005898:	2301      	movs	r3, #1
1a00589a:	464a      	mov	r2, r9
1a00589c:	4639      	mov	r1, r7
1a00589e:	4630      	mov	r0, r6
1a0058a0:	47c0      	blx	r8
1a0058a2:	3001      	adds	r0, #1
1a0058a4:	d09e      	beq.n	1a0057e4 <_printf_i+0x148>
1a0058a6:	3501      	adds	r5, #1
1a0058a8:	68e3      	ldr	r3, [r4, #12]
1a0058aa:	9a03      	ldr	r2, [sp, #12]
1a0058ac:	1a9b      	subs	r3, r3, r2
1a0058ae:	42ab      	cmp	r3, r5
1a0058b0:	dcf2      	bgt.n	1a005898 <_printf_i+0x1fc>
1a0058b2:	e7eb      	b.n	1a00588c <_printf_i+0x1f0>
1a0058b4:	2500      	movs	r5, #0
1a0058b6:	f104 0919 	add.w	r9, r4, #25
1a0058ba:	e7f5      	b.n	1a0058a8 <_printf_i+0x20c>
1a0058bc:	1a006431 	.word	0x1a006431
1a0058c0:	1a006442 	.word	0x1a006442

1a0058c4 <iprintf>:
1a0058c4:	b40f      	push	{r0, r1, r2, r3}
1a0058c6:	4b0a      	ldr	r3, [pc, #40]	; (1a0058f0 <iprintf+0x2c>)
1a0058c8:	b513      	push	{r0, r1, r4, lr}
1a0058ca:	681c      	ldr	r4, [r3, #0]
1a0058cc:	b124      	cbz	r4, 1a0058d8 <iprintf+0x14>
1a0058ce:	69a3      	ldr	r3, [r4, #24]
1a0058d0:	b913      	cbnz	r3, 1a0058d8 <iprintf+0x14>
1a0058d2:	4620      	mov	r0, r4
1a0058d4:	f7ff fb98 	bl	1a005008 <__sinit>
1a0058d8:	ab05      	add	r3, sp, #20
1a0058da:	9a04      	ldr	r2, [sp, #16]
1a0058dc:	68a1      	ldr	r1, [r4, #8]
1a0058de:	9301      	str	r3, [sp, #4]
1a0058e0:	4620      	mov	r0, r4
1a0058e2:	f7ff fd3d 	bl	1a005360 <_vfiprintf_r>
1a0058e6:	b002      	add	sp, #8
1a0058e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0058ec:	b004      	add	sp, #16
1a0058ee:	4770      	bx	lr
1a0058f0:	100000e4 	.word	0x100000e4

1a0058f4 <_puts_r>:
1a0058f4:	b570      	push	{r4, r5, r6, lr}
1a0058f6:	460e      	mov	r6, r1
1a0058f8:	4605      	mov	r5, r0
1a0058fa:	b118      	cbz	r0, 1a005904 <_puts_r+0x10>
1a0058fc:	6983      	ldr	r3, [r0, #24]
1a0058fe:	b90b      	cbnz	r3, 1a005904 <_puts_r+0x10>
1a005900:	f7ff fb82 	bl	1a005008 <__sinit>
1a005904:	69ab      	ldr	r3, [r5, #24]
1a005906:	68ac      	ldr	r4, [r5, #8]
1a005908:	b913      	cbnz	r3, 1a005910 <_puts_r+0x1c>
1a00590a:	4628      	mov	r0, r5
1a00590c:	f7ff fb7c 	bl	1a005008 <__sinit>
1a005910:	4b2c      	ldr	r3, [pc, #176]	; (1a0059c4 <_puts_r+0xd0>)
1a005912:	429c      	cmp	r4, r3
1a005914:	d120      	bne.n	1a005958 <_puts_r+0x64>
1a005916:	686c      	ldr	r4, [r5, #4]
1a005918:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00591a:	07db      	lsls	r3, r3, #31
1a00591c:	d405      	bmi.n	1a00592a <_puts_r+0x36>
1a00591e:	89a3      	ldrh	r3, [r4, #12]
1a005920:	0598      	lsls	r0, r3, #22
1a005922:	d402      	bmi.n	1a00592a <_puts_r+0x36>
1a005924:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005926:	f7ff fc30 	bl	1a00518a <__retarget_lock_acquire_recursive>
1a00592a:	89a3      	ldrh	r3, [r4, #12]
1a00592c:	0719      	lsls	r1, r3, #28
1a00592e:	d51d      	bpl.n	1a00596c <_puts_r+0x78>
1a005930:	6923      	ldr	r3, [r4, #16]
1a005932:	b1db      	cbz	r3, 1a00596c <_puts_r+0x78>
1a005934:	3e01      	subs	r6, #1
1a005936:	68a3      	ldr	r3, [r4, #8]
1a005938:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a00593c:	3b01      	subs	r3, #1
1a00593e:	60a3      	str	r3, [r4, #8]
1a005940:	bb39      	cbnz	r1, 1a005992 <_puts_r+0x9e>
1a005942:	2b00      	cmp	r3, #0
1a005944:	da38      	bge.n	1a0059b8 <_puts_r+0xc4>
1a005946:	4622      	mov	r2, r4
1a005948:	210a      	movs	r1, #10
1a00594a:	4628      	mov	r0, r5
1a00594c:	f000 f89c 	bl	1a005a88 <__swbuf_r>
1a005950:	3001      	adds	r0, #1
1a005952:	d011      	beq.n	1a005978 <_puts_r+0x84>
1a005954:	250a      	movs	r5, #10
1a005956:	e011      	b.n	1a00597c <_puts_r+0x88>
1a005958:	4b1b      	ldr	r3, [pc, #108]	; (1a0059c8 <_puts_r+0xd4>)
1a00595a:	429c      	cmp	r4, r3
1a00595c:	d101      	bne.n	1a005962 <_puts_r+0x6e>
1a00595e:	68ac      	ldr	r4, [r5, #8]
1a005960:	e7da      	b.n	1a005918 <_puts_r+0x24>
1a005962:	4b1a      	ldr	r3, [pc, #104]	; (1a0059cc <_puts_r+0xd8>)
1a005964:	429c      	cmp	r4, r3
1a005966:	bf08      	it	eq
1a005968:	68ec      	ldreq	r4, [r5, #12]
1a00596a:	e7d5      	b.n	1a005918 <_puts_r+0x24>
1a00596c:	4621      	mov	r1, r4
1a00596e:	4628      	mov	r0, r5
1a005970:	f000 f8dc 	bl	1a005b2c <__swsetup_r>
1a005974:	2800      	cmp	r0, #0
1a005976:	d0dd      	beq.n	1a005934 <_puts_r+0x40>
1a005978:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a00597c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00597e:	07da      	lsls	r2, r3, #31
1a005980:	d405      	bmi.n	1a00598e <_puts_r+0x9a>
1a005982:	89a3      	ldrh	r3, [r4, #12]
1a005984:	059b      	lsls	r3, r3, #22
1a005986:	d402      	bmi.n	1a00598e <_puts_r+0x9a>
1a005988:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00598a:	f7ff fbff 	bl	1a00518c <__retarget_lock_release_recursive>
1a00598e:	4628      	mov	r0, r5
1a005990:	bd70      	pop	{r4, r5, r6, pc}
1a005992:	2b00      	cmp	r3, #0
1a005994:	da04      	bge.n	1a0059a0 <_puts_r+0xac>
1a005996:	69a2      	ldr	r2, [r4, #24]
1a005998:	429a      	cmp	r2, r3
1a00599a:	dc06      	bgt.n	1a0059aa <_puts_r+0xb6>
1a00599c:	290a      	cmp	r1, #10
1a00599e:	d004      	beq.n	1a0059aa <_puts_r+0xb6>
1a0059a0:	6823      	ldr	r3, [r4, #0]
1a0059a2:	1c5a      	adds	r2, r3, #1
1a0059a4:	6022      	str	r2, [r4, #0]
1a0059a6:	7019      	strb	r1, [r3, #0]
1a0059a8:	e7c5      	b.n	1a005936 <_puts_r+0x42>
1a0059aa:	4622      	mov	r2, r4
1a0059ac:	4628      	mov	r0, r5
1a0059ae:	f000 f86b 	bl	1a005a88 <__swbuf_r>
1a0059b2:	3001      	adds	r0, #1
1a0059b4:	d1bf      	bne.n	1a005936 <_puts_r+0x42>
1a0059b6:	e7df      	b.n	1a005978 <_puts_r+0x84>
1a0059b8:	6823      	ldr	r3, [r4, #0]
1a0059ba:	250a      	movs	r5, #10
1a0059bc:	1c5a      	adds	r2, r3, #1
1a0059be:	6022      	str	r2, [r4, #0]
1a0059c0:	701d      	strb	r5, [r3, #0]
1a0059c2:	e7db      	b.n	1a00597c <_puts_r+0x88>
1a0059c4:	1a0063dc 	.word	0x1a0063dc
1a0059c8:	1a0063fc 	.word	0x1a0063fc
1a0059cc:	1a0063bc 	.word	0x1a0063bc

1a0059d0 <puts>:
1a0059d0:	4b02      	ldr	r3, [pc, #8]	; (1a0059dc <puts+0xc>)
1a0059d2:	4601      	mov	r1, r0
1a0059d4:	6818      	ldr	r0, [r3, #0]
1a0059d6:	f7ff bf8d 	b.w	1a0058f4 <_puts_r>
1a0059da:	bf00      	nop
1a0059dc:	100000e4 	.word	0x100000e4

1a0059e0 <__sread>:
1a0059e0:	b510      	push	{r4, lr}
1a0059e2:	460c      	mov	r4, r1
1a0059e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0059e8:	f7fb fa06 	bl	1a000df8 <_read_r>
1a0059ec:	2800      	cmp	r0, #0
1a0059ee:	bfab      	itete	ge
1a0059f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0059f2:	89a3      	ldrhlt	r3, [r4, #12]
1a0059f4:	181b      	addge	r3, r3, r0
1a0059f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0059fa:	bfac      	ite	ge
1a0059fc:	6563      	strge	r3, [r4, #84]	; 0x54
1a0059fe:	81a3      	strhlt	r3, [r4, #12]
1a005a00:	bd10      	pop	{r4, pc}

1a005a02 <__swrite>:
1a005a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005a06:	461f      	mov	r7, r3
1a005a08:	898b      	ldrh	r3, [r1, #12]
1a005a0a:	05db      	lsls	r3, r3, #23
1a005a0c:	4605      	mov	r5, r0
1a005a0e:	460c      	mov	r4, r1
1a005a10:	4616      	mov	r6, r2
1a005a12:	d505      	bpl.n	1a005a20 <__swrite+0x1e>
1a005a14:	2302      	movs	r3, #2
1a005a16:	2200      	movs	r2, #0
1a005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005a1c:	f7fb f9e7 	bl	1a000dee <_lseek_r>
1a005a20:	89a3      	ldrh	r3, [r4, #12]
1a005a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a005a2a:	81a3      	strh	r3, [r4, #12]
1a005a2c:	4632      	mov	r2, r6
1a005a2e:	463b      	mov	r3, r7
1a005a30:	4628      	mov	r0, r5
1a005a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a005a36:	f7fb ba06 	b.w	1a000e46 <_write_r>

1a005a3a <__sseek>:
1a005a3a:	b510      	push	{r4, lr}
1a005a3c:	460c      	mov	r4, r1
1a005a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005a42:	f7fb f9d4 	bl	1a000dee <_lseek_r>
1a005a46:	1c43      	adds	r3, r0, #1
1a005a48:	89a3      	ldrh	r3, [r4, #12]
1a005a4a:	bf15      	itete	ne
1a005a4c:	6560      	strne	r0, [r4, #84]	; 0x54
1a005a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a005a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a005a56:	81a3      	strheq	r3, [r4, #12]
1a005a58:	bf18      	it	ne
1a005a5a:	81a3      	strhne	r3, [r4, #12]
1a005a5c:	bd10      	pop	{r4, pc}

1a005a5e <__sclose>:
1a005a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005a62:	f7fb b9b1 	b.w	1a000dc8 <_close_r>

1a005a66 <strcat>:
1a005a66:	b510      	push	{r4, lr}
1a005a68:	4603      	mov	r3, r0
1a005a6a:	461a      	mov	r2, r3
1a005a6c:	f812 4b01 	ldrb.w	r4, [r2], #1
1a005a70:	b93c      	cbnz	r4, 1a005a82 <strcat+0x1c>
1a005a72:	3b01      	subs	r3, #1
1a005a74:	f811 2b01 	ldrb.w	r2, [r1], #1
1a005a78:	f803 2f01 	strb.w	r2, [r3, #1]!
1a005a7c:	2a00      	cmp	r2, #0
1a005a7e:	d1f9      	bne.n	1a005a74 <strcat+0xe>
1a005a80:	bd10      	pop	{r4, pc}
1a005a82:	4613      	mov	r3, r2
1a005a84:	e7f1      	b.n	1a005a6a <strcat+0x4>
1a005a86:	Address 0x000000001a005a86 is out of bounds.


1a005a88 <__swbuf_r>:
1a005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005a8a:	460e      	mov	r6, r1
1a005a8c:	4614      	mov	r4, r2
1a005a8e:	4605      	mov	r5, r0
1a005a90:	b118      	cbz	r0, 1a005a9a <__swbuf_r+0x12>
1a005a92:	6983      	ldr	r3, [r0, #24]
1a005a94:	b90b      	cbnz	r3, 1a005a9a <__swbuf_r+0x12>
1a005a96:	f7ff fab7 	bl	1a005008 <__sinit>
1a005a9a:	4b21      	ldr	r3, [pc, #132]	; (1a005b20 <__swbuf_r+0x98>)
1a005a9c:	429c      	cmp	r4, r3
1a005a9e:	d12b      	bne.n	1a005af8 <__swbuf_r+0x70>
1a005aa0:	686c      	ldr	r4, [r5, #4]
1a005aa2:	69a3      	ldr	r3, [r4, #24]
1a005aa4:	60a3      	str	r3, [r4, #8]
1a005aa6:	89a3      	ldrh	r3, [r4, #12]
1a005aa8:	071a      	lsls	r2, r3, #28
1a005aaa:	d52f      	bpl.n	1a005b0c <__swbuf_r+0x84>
1a005aac:	6923      	ldr	r3, [r4, #16]
1a005aae:	b36b      	cbz	r3, 1a005b0c <__swbuf_r+0x84>
1a005ab0:	6923      	ldr	r3, [r4, #16]
1a005ab2:	6820      	ldr	r0, [r4, #0]
1a005ab4:	1ac0      	subs	r0, r0, r3
1a005ab6:	6963      	ldr	r3, [r4, #20]
1a005ab8:	b2f6      	uxtb	r6, r6
1a005aba:	4283      	cmp	r3, r0
1a005abc:	4637      	mov	r7, r6
1a005abe:	dc04      	bgt.n	1a005aca <__swbuf_r+0x42>
1a005ac0:	4621      	mov	r1, r4
1a005ac2:	4628      	mov	r0, r5
1a005ac4:	f7ff fa0c 	bl	1a004ee0 <_fflush_r>
1a005ac8:	bb30      	cbnz	r0, 1a005b18 <__swbuf_r+0x90>
1a005aca:	68a3      	ldr	r3, [r4, #8]
1a005acc:	3b01      	subs	r3, #1
1a005ace:	60a3      	str	r3, [r4, #8]
1a005ad0:	6823      	ldr	r3, [r4, #0]
1a005ad2:	1c5a      	adds	r2, r3, #1
1a005ad4:	6022      	str	r2, [r4, #0]
1a005ad6:	701e      	strb	r6, [r3, #0]
1a005ad8:	6963      	ldr	r3, [r4, #20]
1a005ada:	3001      	adds	r0, #1
1a005adc:	4283      	cmp	r3, r0
1a005ade:	d004      	beq.n	1a005aea <__swbuf_r+0x62>
1a005ae0:	89a3      	ldrh	r3, [r4, #12]
1a005ae2:	07db      	lsls	r3, r3, #31
1a005ae4:	d506      	bpl.n	1a005af4 <__swbuf_r+0x6c>
1a005ae6:	2e0a      	cmp	r6, #10
1a005ae8:	d104      	bne.n	1a005af4 <__swbuf_r+0x6c>
1a005aea:	4621      	mov	r1, r4
1a005aec:	4628      	mov	r0, r5
1a005aee:	f7ff f9f7 	bl	1a004ee0 <_fflush_r>
1a005af2:	b988      	cbnz	r0, 1a005b18 <__swbuf_r+0x90>
1a005af4:	4638      	mov	r0, r7
1a005af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005af8:	4b0a      	ldr	r3, [pc, #40]	; (1a005b24 <__swbuf_r+0x9c>)
1a005afa:	429c      	cmp	r4, r3
1a005afc:	d101      	bne.n	1a005b02 <__swbuf_r+0x7a>
1a005afe:	68ac      	ldr	r4, [r5, #8]
1a005b00:	e7cf      	b.n	1a005aa2 <__swbuf_r+0x1a>
1a005b02:	4b09      	ldr	r3, [pc, #36]	; (1a005b28 <__swbuf_r+0xa0>)
1a005b04:	429c      	cmp	r4, r3
1a005b06:	bf08      	it	eq
1a005b08:	68ec      	ldreq	r4, [r5, #12]
1a005b0a:	e7ca      	b.n	1a005aa2 <__swbuf_r+0x1a>
1a005b0c:	4621      	mov	r1, r4
1a005b0e:	4628      	mov	r0, r5
1a005b10:	f000 f80c 	bl	1a005b2c <__swsetup_r>
1a005b14:	2800      	cmp	r0, #0
1a005b16:	d0cb      	beq.n	1a005ab0 <__swbuf_r+0x28>
1a005b18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a005b1c:	e7ea      	b.n	1a005af4 <__swbuf_r+0x6c>
1a005b1e:	bf00      	nop
1a005b20:	1a0063dc 	.word	0x1a0063dc
1a005b24:	1a0063fc 	.word	0x1a0063fc
1a005b28:	1a0063bc 	.word	0x1a0063bc

1a005b2c <__swsetup_r>:
1a005b2c:	4b32      	ldr	r3, [pc, #200]	; (1a005bf8 <__swsetup_r+0xcc>)
1a005b2e:	b570      	push	{r4, r5, r6, lr}
1a005b30:	681d      	ldr	r5, [r3, #0]
1a005b32:	4606      	mov	r6, r0
1a005b34:	460c      	mov	r4, r1
1a005b36:	b125      	cbz	r5, 1a005b42 <__swsetup_r+0x16>
1a005b38:	69ab      	ldr	r3, [r5, #24]
1a005b3a:	b913      	cbnz	r3, 1a005b42 <__swsetup_r+0x16>
1a005b3c:	4628      	mov	r0, r5
1a005b3e:	f7ff fa63 	bl	1a005008 <__sinit>
1a005b42:	4b2e      	ldr	r3, [pc, #184]	; (1a005bfc <__swsetup_r+0xd0>)
1a005b44:	429c      	cmp	r4, r3
1a005b46:	d10f      	bne.n	1a005b68 <__swsetup_r+0x3c>
1a005b48:	686c      	ldr	r4, [r5, #4]
1a005b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005b4e:	b29a      	uxth	r2, r3
1a005b50:	0715      	lsls	r5, r2, #28
1a005b52:	d42c      	bmi.n	1a005bae <__swsetup_r+0x82>
1a005b54:	06d0      	lsls	r0, r2, #27
1a005b56:	d411      	bmi.n	1a005b7c <__swsetup_r+0x50>
1a005b58:	2209      	movs	r2, #9
1a005b5a:	6032      	str	r2, [r6, #0]
1a005b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005b60:	81a3      	strh	r3, [r4, #12]
1a005b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005b66:	e03e      	b.n	1a005be6 <__swsetup_r+0xba>
1a005b68:	4b25      	ldr	r3, [pc, #148]	; (1a005c00 <__swsetup_r+0xd4>)
1a005b6a:	429c      	cmp	r4, r3
1a005b6c:	d101      	bne.n	1a005b72 <__swsetup_r+0x46>
1a005b6e:	68ac      	ldr	r4, [r5, #8]
1a005b70:	e7eb      	b.n	1a005b4a <__swsetup_r+0x1e>
1a005b72:	4b24      	ldr	r3, [pc, #144]	; (1a005c04 <__swsetup_r+0xd8>)
1a005b74:	429c      	cmp	r4, r3
1a005b76:	bf08      	it	eq
1a005b78:	68ec      	ldreq	r4, [r5, #12]
1a005b7a:	e7e6      	b.n	1a005b4a <__swsetup_r+0x1e>
1a005b7c:	0751      	lsls	r1, r2, #29
1a005b7e:	d512      	bpl.n	1a005ba6 <__swsetup_r+0x7a>
1a005b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a005b82:	b141      	cbz	r1, 1a005b96 <__swsetup_r+0x6a>
1a005b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a005b88:	4299      	cmp	r1, r3
1a005b8a:	d002      	beq.n	1a005b92 <__swsetup_r+0x66>
1a005b8c:	4630      	mov	r0, r6
1a005b8e:	f7ff fb15 	bl	1a0051bc <_free_r>
1a005b92:	2300      	movs	r3, #0
1a005b94:	6363      	str	r3, [r4, #52]	; 0x34
1a005b96:	89a3      	ldrh	r3, [r4, #12]
1a005b98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a005b9c:	81a3      	strh	r3, [r4, #12]
1a005b9e:	2300      	movs	r3, #0
1a005ba0:	6063      	str	r3, [r4, #4]
1a005ba2:	6923      	ldr	r3, [r4, #16]
1a005ba4:	6023      	str	r3, [r4, #0]
1a005ba6:	89a3      	ldrh	r3, [r4, #12]
1a005ba8:	f043 0308 	orr.w	r3, r3, #8
1a005bac:	81a3      	strh	r3, [r4, #12]
1a005bae:	6923      	ldr	r3, [r4, #16]
1a005bb0:	b94b      	cbnz	r3, 1a005bc6 <__swsetup_r+0x9a>
1a005bb2:	89a3      	ldrh	r3, [r4, #12]
1a005bb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a005bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a005bbc:	d003      	beq.n	1a005bc6 <__swsetup_r+0x9a>
1a005bbe:	4621      	mov	r1, r4
1a005bc0:	4630      	mov	r0, r6
1a005bc2:	f000 f845 	bl	1a005c50 <__smakebuf_r>
1a005bc6:	89a2      	ldrh	r2, [r4, #12]
1a005bc8:	f012 0301 	ands.w	r3, r2, #1
1a005bcc:	d00c      	beq.n	1a005be8 <__swsetup_r+0xbc>
1a005bce:	2300      	movs	r3, #0
1a005bd0:	60a3      	str	r3, [r4, #8]
1a005bd2:	6963      	ldr	r3, [r4, #20]
1a005bd4:	425b      	negs	r3, r3
1a005bd6:	61a3      	str	r3, [r4, #24]
1a005bd8:	6923      	ldr	r3, [r4, #16]
1a005bda:	b953      	cbnz	r3, 1a005bf2 <__swsetup_r+0xc6>
1a005bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005be0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a005be4:	d1ba      	bne.n	1a005b5c <__swsetup_r+0x30>
1a005be6:	bd70      	pop	{r4, r5, r6, pc}
1a005be8:	0792      	lsls	r2, r2, #30
1a005bea:	bf58      	it	pl
1a005bec:	6963      	ldrpl	r3, [r4, #20]
1a005bee:	60a3      	str	r3, [r4, #8]
1a005bf0:	e7f2      	b.n	1a005bd8 <__swsetup_r+0xac>
1a005bf2:	2000      	movs	r0, #0
1a005bf4:	e7f7      	b.n	1a005be6 <__swsetup_r+0xba>
1a005bf6:	bf00      	nop
1a005bf8:	100000e4 	.word	0x100000e4
1a005bfc:	1a0063dc 	.word	0x1a0063dc
1a005c00:	1a0063fc 	.word	0x1a0063fc
1a005c04:	1a0063bc 	.word	0x1a0063bc

1a005c08 <__swhatbuf_r>:
1a005c08:	b570      	push	{r4, r5, r6, lr}
1a005c0a:	460e      	mov	r6, r1
1a005c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005c10:	2900      	cmp	r1, #0
1a005c12:	b096      	sub	sp, #88	; 0x58
1a005c14:	4614      	mov	r4, r2
1a005c16:	461d      	mov	r5, r3
1a005c18:	da07      	bge.n	1a005c2a <__swhatbuf_r+0x22>
1a005c1a:	2300      	movs	r3, #0
1a005c1c:	602b      	str	r3, [r5, #0]
1a005c1e:	89b3      	ldrh	r3, [r6, #12]
1a005c20:	061a      	lsls	r2, r3, #24
1a005c22:	d410      	bmi.n	1a005c46 <__swhatbuf_r+0x3e>
1a005c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a005c28:	e00e      	b.n	1a005c48 <__swhatbuf_r+0x40>
1a005c2a:	466a      	mov	r2, sp
1a005c2c:	f7fb f8d1 	bl	1a000dd2 <_fstat_r>
1a005c30:	2800      	cmp	r0, #0
1a005c32:	dbf2      	blt.n	1a005c1a <__swhatbuf_r+0x12>
1a005c34:	9a01      	ldr	r2, [sp, #4]
1a005c36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a005c3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a005c3e:	425a      	negs	r2, r3
1a005c40:	415a      	adcs	r2, r3
1a005c42:	602a      	str	r2, [r5, #0]
1a005c44:	e7ee      	b.n	1a005c24 <__swhatbuf_r+0x1c>
1a005c46:	2340      	movs	r3, #64	; 0x40
1a005c48:	2000      	movs	r0, #0
1a005c4a:	6023      	str	r3, [r4, #0]
1a005c4c:	b016      	add	sp, #88	; 0x58
1a005c4e:	bd70      	pop	{r4, r5, r6, pc}

1a005c50 <__smakebuf_r>:
1a005c50:	898b      	ldrh	r3, [r1, #12]
1a005c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a005c54:	079d      	lsls	r5, r3, #30
1a005c56:	4606      	mov	r6, r0
1a005c58:	460c      	mov	r4, r1
1a005c5a:	d507      	bpl.n	1a005c6c <__smakebuf_r+0x1c>
1a005c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a005c60:	6023      	str	r3, [r4, #0]
1a005c62:	6123      	str	r3, [r4, #16]
1a005c64:	2301      	movs	r3, #1
1a005c66:	6163      	str	r3, [r4, #20]
1a005c68:	b002      	add	sp, #8
1a005c6a:	bd70      	pop	{r4, r5, r6, pc}
1a005c6c:	ab01      	add	r3, sp, #4
1a005c6e:	466a      	mov	r2, sp
1a005c70:	f7ff ffca 	bl	1a005c08 <__swhatbuf_r>
1a005c74:	9900      	ldr	r1, [sp, #0]
1a005c76:	4605      	mov	r5, r0
1a005c78:	4630      	mov	r0, r6
1a005c7a:	f7ff faed 	bl	1a005258 <_malloc_r>
1a005c7e:	b948      	cbnz	r0, 1a005c94 <__smakebuf_r+0x44>
1a005c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005c84:	059a      	lsls	r2, r3, #22
1a005c86:	d4ef      	bmi.n	1a005c68 <__smakebuf_r+0x18>
1a005c88:	f023 0303 	bic.w	r3, r3, #3
1a005c8c:	f043 0302 	orr.w	r3, r3, #2
1a005c90:	81a3      	strh	r3, [r4, #12]
1a005c92:	e7e3      	b.n	1a005c5c <__smakebuf_r+0xc>
1a005c94:	4b0d      	ldr	r3, [pc, #52]	; (1a005ccc <__smakebuf_r+0x7c>)
1a005c96:	62b3      	str	r3, [r6, #40]	; 0x28
1a005c98:	89a3      	ldrh	r3, [r4, #12]
1a005c9a:	6020      	str	r0, [r4, #0]
1a005c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005ca0:	81a3      	strh	r3, [r4, #12]
1a005ca2:	9b00      	ldr	r3, [sp, #0]
1a005ca4:	6163      	str	r3, [r4, #20]
1a005ca6:	9b01      	ldr	r3, [sp, #4]
1a005ca8:	6120      	str	r0, [r4, #16]
1a005caa:	b15b      	cbz	r3, 1a005cc4 <__smakebuf_r+0x74>
1a005cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005cb0:	4630      	mov	r0, r6
1a005cb2:	f7fb f893 	bl	1a000ddc <_isatty_r>
1a005cb6:	b128      	cbz	r0, 1a005cc4 <__smakebuf_r+0x74>
1a005cb8:	89a3      	ldrh	r3, [r4, #12]
1a005cba:	f023 0303 	bic.w	r3, r3, #3
1a005cbe:	f043 0301 	orr.w	r3, r3, #1
1a005cc2:	81a3      	strh	r3, [r4, #12]
1a005cc4:	89a3      	ldrh	r3, [r4, #12]
1a005cc6:	431d      	orrs	r5, r3
1a005cc8:	81a5      	strh	r5, [r4, #12]
1a005cca:	e7cd      	b.n	1a005c68 <__smakebuf_r+0x18>
1a005ccc:	1a004fa1 	.word	0x1a004fa1

1a005cd0 <memchr>:
1a005cd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005cd4:	2a10      	cmp	r2, #16
1a005cd6:	db2b      	blt.n	1a005d30 <memchr+0x60>
1a005cd8:	f010 0f07 	tst.w	r0, #7
1a005cdc:	d008      	beq.n	1a005cf0 <memchr+0x20>
1a005cde:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005ce2:	3a01      	subs	r2, #1
1a005ce4:	428b      	cmp	r3, r1
1a005ce6:	d02d      	beq.n	1a005d44 <memchr+0x74>
1a005ce8:	f010 0f07 	tst.w	r0, #7
1a005cec:	b342      	cbz	r2, 1a005d40 <memchr+0x70>
1a005cee:	d1f6      	bne.n	1a005cde <memchr+0xe>
1a005cf0:	b4f0      	push	{r4, r5, r6, r7}
1a005cf2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005cf6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a005cfa:	f022 0407 	bic.w	r4, r2, #7
1a005cfe:	f07f 0700 	mvns.w	r7, #0
1a005d02:	2300      	movs	r3, #0
1a005d04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005d08:	3c08      	subs	r4, #8
1a005d0a:	ea85 0501 	eor.w	r5, r5, r1
1a005d0e:	ea86 0601 	eor.w	r6, r6, r1
1a005d12:	fa85 f547 	uadd8	r5, r5, r7
1a005d16:	faa3 f587 	sel	r5, r3, r7
1a005d1a:	fa86 f647 	uadd8	r6, r6, r7
1a005d1e:	faa5 f687 	sel	r6, r5, r7
1a005d22:	b98e      	cbnz	r6, 1a005d48 <memchr+0x78>
1a005d24:	d1ee      	bne.n	1a005d04 <memchr+0x34>
1a005d26:	bcf0      	pop	{r4, r5, r6, r7}
1a005d28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005d2c:	f002 0207 	and.w	r2, r2, #7
1a005d30:	b132      	cbz	r2, 1a005d40 <memchr+0x70>
1a005d32:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005d36:	3a01      	subs	r2, #1
1a005d38:	ea83 0301 	eor.w	r3, r3, r1
1a005d3c:	b113      	cbz	r3, 1a005d44 <memchr+0x74>
1a005d3e:	d1f8      	bne.n	1a005d32 <memchr+0x62>
1a005d40:	2000      	movs	r0, #0
1a005d42:	4770      	bx	lr
1a005d44:	3801      	subs	r0, #1
1a005d46:	4770      	bx	lr
1a005d48:	2d00      	cmp	r5, #0
1a005d4a:	bf06      	itte	eq
1a005d4c:	4635      	moveq	r5, r6
1a005d4e:	3803      	subeq	r0, #3
1a005d50:	3807      	subne	r0, #7
1a005d52:	f015 0f01 	tst.w	r5, #1
1a005d56:	d107      	bne.n	1a005d68 <memchr+0x98>
1a005d58:	3001      	adds	r0, #1
1a005d5a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a005d5e:	bf02      	ittt	eq
1a005d60:	3001      	addeq	r0, #1
1a005d62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005d66:	3001      	addeq	r0, #1
1a005d68:	bcf0      	pop	{r4, r5, r6, r7}
1a005d6a:	3801      	subs	r0, #1
1a005d6c:	4770      	bx	lr
1a005d6e:	bf00      	nop

1a005d70 <__malloc_lock>:
1a005d70:	4801      	ldr	r0, [pc, #4]	; (1a005d78 <__malloc_lock+0x8>)
1a005d72:	f7ff ba0a 	b.w	1a00518a <__retarget_lock_acquire_recursive>
1a005d76:	bf00      	nop
1a005d78:	10002c5c 	.word	0x10002c5c

1a005d7c <__malloc_unlock>:
1a005d7c:	4801      	ldr	r0, [pc, #4]	; (1a005d84 <__malloc_unlock+0x8>)
1a005d7e:	f7ff ba05 	b.w	1a00518c <__retarget_lock_release_recursive>
1a005d82:	bf00      	nop
1a005d84:	10002c5c 	.word	0x10002c5c
1a005d88:	432b5441 	.word	0x432b5441
1a005d8c:	54544147 	.word	0x54544147
1a005d90:	000a0d3f 	.word	0x000a0d3f
1a005d94:	432b5441 	.word	0x432b5441
1a005d98:	3d46474d 	.word	0x3d46474d
1a005d9c:	000a0d31 	.word	0x000a0d31
1a005da0:	0a0d5441 	.word	0x0a0d5441
1a005da4:	00000000 	.word	0x00000000
1a005da8:	0a0d4b4f 	.word	0x0a0d4b4f
1a005dac:	ffffff00 	.word	0xffffff00
1a005db0:	74736953 	.word	0x74736953
1a005db4:	20616d65 	.word	0x20616d65
1a005db8:	69746361 	.word	0x69746361
1a005dbc:	6f646176 	.word	0x6f646176
1a005dc0:	ffff000d 	.word	0xffff000d
1a005dc4:	75646f4d 	.word	0x75646f4d
1a005dc8:	66206f6c 	.word	0x66206f6c
1a005dcc:	69636e75 	.word	0x69636e75
1a005dd0:	20616e6f 	.word	0x20616e6f
1a005dd4:	72726f63 	.word	0x72726f63
1a005dd8:	61746365 	.word	0x61746365
1a005ddc:	746e656d 	.word	0x746e656d
1a005de0:	00000d65 	.word	0x00000d65
1a005de4:	75646f4d 	.word	0x75646f4d
1a005de8:	61206f6c 	.word	0x61206f6c
1a005dec:	6e203967 	.word	0x6e203967
1a005df0:	7566206f 	.word	0x7566206f
1a005df4:	6f69636e 	.word	0x6f69636e
1a005df8:	000d616e 	.word	0x000d616e
1a005dfc:	75646f4d 	.word	0x75646f4d
1a005e00:	74206f6c 	.word	0x74206f6c
1a005e04:	6f747865 	.word	0x6f747865
1a005e08:	74636120 	.word	0x74636120
1a005e0c:	64617669 	.word	0x64617669
1a005e10:	6f63206f 	.word	0x6f63206f
1a005e14:	63657272 	.word	0x63657272
1a005e18:	656d6174 	.word	0x656d6174
1a005e1c:	0d65746e 	.word	0x0d65746e
1a005e20:	00000000 	.word	0x00000000
1a005e24:	6f646f4d 	.word	0x6f646f4d
1a005e28:	78657420 	.word	0x78657420
1a005e2c:	6e206f74 	.word	0x6e206f74
1a005e30:	6361206f 	.word	0x6361206f
1a005e34:	61766974 	.word	0x61766974
1a005e38:	000d6f64 	.word	0x000d6f64
1a005e3c:	6f646f4d 	.word	0x6f646f4d
1a005e40:	78657420 	.word	0x78657420
1a005e44:	61206f74 	.word	0x61206f74
1a005e48:	76697463 	.word	0x76697463
1a005e4c:	206f6461 	.word	0x206f6461
1a005e50:	72726f63 	.word	0x72726f63
1a005e54:	61746365 	.word	0x61746365
1a005e58:	746e656d 	.word	0x746e656d
1a005e5c:	00000d65 	.word	0x00000d65
1a005e60:	75646f4d 	.word	0x75646f4d
1a005e64:	61206f6c 	.word	0x61206f6c
1a005e68:	68636174 	.word	0x68636174
1a005e6c:	206f6461 	.word	0x206f6461
1a005e70:	616c2061 	.word	0x616c2061
1a005e74:	64657220 	.word	0x64657220
1a005e78:	0000000d 	.word	0x0000000d
1a005e7c:	75646f4d 	.word	0x75646f4d
1a005e80:	61206f6c 	.word	0x61206f6c
1a005e84:	6e203966 	.word	0x6e203966
1a005e88:	7365206f 	.word	0x7365206f
1a005e8c:	61206174 	.word	0x61206174
1a005e90:	68636174 	.word	0x68636174
1a005e94:	206f6461 	.word	0x206f6461
1a005e98:	616c2061 	.word	0x616c2061
1a005e9c:	64657220 	.word	0x64657220
1a005ea0:	ffff000d 	.word	0xffff000d
1a005ea4:	73206f4e 	.word	0x73206f4e
1a005ea8:	72632065 	.word	0x72632065
1a005eac:	6f726165 	.word	0x6f726165
1a005eb0:	7571206e 	.word	0x7571206e
1a005eb4:	20657565 	.word	0x20657565
1a005eb8:	61726170 	.word	0x61726170
1a005ebc:	63657420 	.word	0x63657420
1a005ec0:	0d73616c 	.word	0x0d73616c
1a005ec4:	00000000 	.word	0x00000000
1a005ec8:	6c636574 	.word	0x6c636574
1a005ecc:	61745f61 	.word	0x61745f61
1a005ed0:	00006b73 	.word	0x00006b73
1a005ed4:	65726154 	.word	0x65726154
1a005ed8:	45542061 	.word	0x45542061
1a005edc:	20642543 	.word	0x20642543
1a005ee0:	65726320 	.word	0x65726320
1a005ee4:	0d616461 	.word	0x0d616461
1a005ee8:	0000000a 	.word	0x0000000a
1a005eec:	5f64656c 	.word	0x5f64656c
1a005ef0:	6b736174 	.word	0x6b736174
1a005ef4:	00000000 	.word	0x00000000
1a005ef8:	65726154 	.word	0x65726154
1a005efc:	656c2061 	.word	0x656c2061
1a005f00:	72632064 	.word	0x72632064
1a005f04:	61646165 	.word	0x61646165
1a005f08:	0000000d 	.word	0x0000000d
1a005f0c:	74737973 	.word	0x74737973
1a005f10:	745f6d65 	.word	0x745f6d65
1a005f14:	006b7361 	.word	0x006b7361
1a005f18:	65726154 	.word	0x65726154
1a005f1c:	79732061 	.word	0x79732061
1a005f20:	6d657473 	.word	0x6d657473
1a005f24:	65726320 	.word	0x65726320
1a005f28:	0d616461 	.word	0x0d616461
1a005f2c:	00000000 	.word	0x00000000
1a005f30:	5f64636c 	.word	0x5f64636c
1a005f34:	6b736174 	.word	0x6b736174
1a005f38:	00000000 	.word	0x00000000
1a005f3c:	65726154 	.word	0x65726154
1a005f40:	636c2061 	.word	0x636c2061
1a005f44:	72632064 	.word	0x72632064
1a005f48:	61646165 	.word	0x61646165
1a005f4c:	0000000d 	.word	0x0000000d
1a005f50:	6f727245 	.word	0x6f727245
1a005f54:	6c612072 	.word	0x6c612072
1a005f58:	65726320 	.word	0x65726320
1a005f5c:	71207261 	.word	0x71207261
1a005f60:	65756575 	.word	0x65756575
1a005f64:	44434c20 	.word	0x44434c20
1a005f68:	0000000d 	.word	0x0000000d
1a005f6c:	6f727245 	.word	0x6f727245
1a005f70:	6c612072 	.word	0x6c612072
1a005f74:	65726320 	.word	0x65726320
1a005f78:	71207261 	.word	0x71207261
1a005f7c:	65756575 	.word	0x65756575
1a005f80:	64656c20 	.word	0x64656c20
1a005f84:	0000000d 	.word	0x0000000d
1a005f88:	6f727245 	.word	0x6f727245
1a005f8c:	6c612072 	.word	0x6c612072
1a005f90:	65726320 	.word	0x65726320
1a005f94:	73207261 	.word	0x73207261
1a005f98:	66616d65 	.word	0x66616d65
1a005f9c:	206f726f 	.word	0x206f726f
1a005fa0:	0d64656c 	.word	0x0d64656c
1a005fa4:	00000000 	.word	0x00000000
1a005fa8:	6f727245 	.word	0x6f727245
1a005fac:	6c612072 	.word	0x6c612072
1a005fb0:	65726320 	.word	0x65726320
1a005fb4:	6d207261 	.word	0x6d207261
1a005fb8:	78657475 	.word	0x78657475
1a005fbc:	ffff000d 	.word	0xffff000d
1a005fc0:	74736953 	.word	0x74736953
1a005fc4:	20616d65 	.word	0x20616d65
1a005fc8:	63696e69 	.word	0x63696e69
1a005fcc:	6f646169 	.word	0x6f646169
1a005fd0:	ffff000d 	.word	0xffff000d
1a005fd4:	65636361 	.word	0x65636361
1a005fd8:	00206f73 	.word	0x00206f73
1a005fdc:	63206c45 	.word	0x63206c45
1a005fe0:	6769646f 	.word	0x6769646f
1a005fe4:	6564206f 	.word	0x6564206f
1a005fe8:	63636120 	.word	0x63636120
1a005fec:	206f7365 	.word	0x206f7365
1a005ff0:	25207365 	.word	0x25207365
1a005ff4:	53202e73 	.word	0x53202e73
1a005ff8:	65747369 	.word	0x65747369
1a005ffc:	2520616d 	.word	0x2520616d
1a006000:	000a0d73 	.word	0x000a0d73
1a006004:	63206553 	.word	0x63206553
1a006008:	75747061 	.word	0x75747061
1a00600c:	75206f72 	.word	0x75206f72
1a006010:	7020616e 	.word	0x7020616e
1a006014:	61736c75 	.word	0x61736c75
1a006018:	6e6f6963 	.word	0x6e6f6963
1a00601c:	0000000d 	.word	0x0000000d
1a006020:	7463654c 	.word	0x7463654c
1a006024:	20617275 	.word	0x20617275
1a006028:	706d6f63 	.word	0x706d6f63
1a00602c:	6174656c 	.word	0x6174656c
1a006030:	65206164 	.word	0x65206164
1a006034:	616c206e 	.word	0x616c206e
1a006038:	63657420 	.word	0x63657420
1a00603c:	2520616c 	.word	0x2520616c
1a006040:	000a0d64 	.word	0x000a0d64
1a006044:	6c707041 	.word	0x6c707041
1a006048:	74616369 	.word	0x74616369
1a00604c:	206e6f69 	.word	0x206e6f69
1a006050:	6c6c614d 	.word	0x6c6c614d
1a006054:	4620636f 	.word	0x4620636f
1a006058:	656c6961 	.word	0x656c6961
1a00605c:	6f482064 	.word	0x6f482064
1a006060:	0d216b6f 	.word	0x0d216b6f
1a006064:	00000000 	.word	0x00000000
1a006068:	7362696c 	.word	0x7362696c
1a00606c:	6572662f 	.word	0x6572662f
1a006070:	6f747265 	.word	0x6f747265
1a006074:	6f732f73 	.word	0x6f732f73
1a006078:	65637275 	.word	0x65637275
1a00607c:	6f6f682f 	.word	0x6f6f682f
1a006080:	632e736b 	.word	0x632e736b
1a006084:	ffffff00 	.word	0xffffff00
1a006088:	70410a0d 	.word	0x70410a0d
1a00608c:	63696c70 	.word	0x63696c70
1a006090:	6f697461 	.word	0x6f697461
1a006094:	7453206e 	.word	0x7453206e
1a006098:	206b6361 	.word	0x206b6361
1a00609c:	7265764f 	.word	0x7265764f
1a0060a0:	776f6c66 	.word	0x776f6c66
1a0060a4:	6f202121 	.word	0x6f202121
1a0060a8:	6154206e 	.word	0x6154206e
1a0060ac:	203a6b73 	.word	0x203a6b73
1a0060b0:	0a0d7325 	.word	0x0a0d7325
1a0060b4:	ffffff00 	.word	0xffffff00
1a0060b8:	41760a0d 	.word	0x41760a0d
1a0060bc:	72657373 	.word	0x72657373
1a0060c0:	6c614374 	.word	0x6c614374
1a0060c4:	2864656c 	.word	0x2864656c
1a0060c8:	200a0d29 	.word	0x200a0d29
1a0060cc:	4c4c2020 	.word	0x4c4c2020
1a0060d0:	20656e69 	.word	0x20656e69
1a0060d4:	626d754e 	.word	0x626d754e
1a0060d8:	3d207265 	.word	0x3d207265
1a0060dc:	0d642520 	.word	0x0d642520
1a0060e0:	2020200a 	.word	0x2020200a
1a0060e4:	656c6946 	.word	0x656c6946
1a0060e8:	6d614e20 	.word	0x6d614e20
1a0060ec:	203d2065 	.word	0x203d2065
1a0060f0:	0a0d7325 	.word	0x0a0d7325
1a0060f4:	ff000a0d 	.word	0xff000a0d
1a0060f8:	454c4449 	.word	0x454c4449
1a0060fc:	ffffff00 	.word	0xffffff00
1a006100:	51726d54 	.word	0x51726d54
1a006104:	ffffff00 	.word	0xffffff00
1a006108:	20726d54 	.word	0x20726d54
1a00610c:	00637653 	.word	0x00637653

1a006110 <ExtRateIn>:
1a006110:	00000000                                ....

1a006114 <GpioButtons>:
1a006114:	08000400 09010900                       ........

1a00611c <GpioLeds>:
1a00611c:	01050005 0e000205 0c010b01              ............

1a006128 <GpioPorts>:
1a006128:	03030003 0f050403 05031005 07030603     ................
1a006138:	ffff0802                                ....

1a00613c <OscRateIn>:
1a00613c:	00b71b00                                ....

1a006140 <InitClkStates>:
1a006140:	01010f01                                ....

1a006144 <pinmuxing>:
1a006144:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a006154:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a006164:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a006174:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a006184:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a006194:	00d50301 00d50401 00160107 00560207     ..............V.
1a0061a4:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0061b4:	00570206                                ..W.

1a0061b8 <UART_BClock>:
1a0061b8:	01a201c2 01620182                       ......b.

1a0061c0 <UART_PClock>:
1a0061c0:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0061d0:	000000ff                                ....

1a0061d4 <periph_to_base>:
1a0061d4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0061e4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0061f4:	000100e0 01000100 01200003 00060120     .......... . ...
1a006204:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a006214:	01820013 00120182 01a201a2 01c20011     ................
1a006224:	001001c2 01e201e2 0202000f 000e0202     ................
1a006234:	02220222 0223000d 001c0223              "."...#.#...

1a006240 <InitClkStates>:
1a006240:	00010100 00010909 0001090a 01010701     ................
1a006250:	00010902 00010906 0101090c 0001090d     ................
1a006260:	0001090e 0001090f 00010910 00010911     ................
1a006270:	00010912 00010913 00011114 00011119     ................
1a006280:	0001111a 0001111b                       ........

1a006288 <lpcUarts>:
1a006288:	40081000 06020406 00180205 40081000     ...@...........@
1a006298:	09070509 00180706 40082000 00000000     ......... .@....
1a0062a8:	00190000 400c1000 07060107 001a0602     .......@........
1a0062b8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0062c8:	02020302 001b0204                       ........

1a0062d0 <gpioPinsInit>:
1a0062d0:	02000104 00050701 05010d03 04080100     ................
1a0062e0:	02020002 02000304 00000403 04070002     ................
1a0062f0:	030c0300 09050402 05040103 04030208     ................
1a006300:	04020305 06040504 0802000c 03000b06     ................
1a006310:	00090607 07060503 060f0504 03030004     ................
1a006320:	02000404 00050404 06040502 04060200     ................
1a006330:	0c050408 05040a04 0003010e 14010a00     ................
1a006340:	010f0000 0d000012 00001101 0010010c     ................
1a006350:	07070300 000f0300 01000001 00000000     ................
1a006360:	000a0600 08060603 06100504 04030005     ................
1a006370:	03000106 04090400 04010d05 010b0000     ................
1a006380:	0200000f 00000001 00010104 02010800     ................
1a006390:	01090000 09010006 05040002 04010200     ................
1a0063a0:	02020105 02020504 0e00000a 01000b02     ................
1a0063b0:	000c020b ffff0c01 d494c080              ............

1a0063bc <__sf_fake_stderr>:
	...

1a0063dc <__sf_fake_stdin>:
	...

1a0063fc <__sf_fake_stdout>:
	...

1a00641c <_global_impure_ptr>:
1a00641c:	100000e8 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a00642c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a00643c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a00644c:	64636261 ff006665                       abcdef..
